/* odeconfig.h */
/* compatibility.h */
/* common.h */
const char* dGetConfiguration(void);
int dCheckConfiguration(const char* token);
/* odeinit.h */
void dInitODE(void);
int dInitODE2(unsigned int uiInitFlags);
int dAllocateODEDataForThread(unsigned int uiAllocateFlags);
void dCleanupODEAllDataForThread();
void dCloseODE(void);
/* contact.h */
/* error.h */
void dSetErrorHandler(dMessageFunction* fn);
void dSetDebugHandler(dMessageFunction* fn);
void dSetMessageHandler(dMessageFunction* fn);
dMessageFunction* dGetErrorHandler(void);
dMessageFunction* dGetDebugHandler(void);
dMessageFunction* dGetMessageHandler(void);
void dError(int num, const char* msg, ...);
void dDebug(int num, const char* msg, ...);
void dMessage(int num, const char* msg, ...);
/* memory.h */
void dSetAllocHandler(dAllocFunction* fn);
void dSetReallocHandler(dReallocFunction* fn);
void dSetFreeHandler(dFreeFunction* fn);
dAllocFunction* dGetAllocHandler(void);
dReallocFunction* dGetReallocHandler(void);
dFreeFunction* dGetFreeHandler(void);
void* dAlloc(size_t size);
void* dRealloc(void* ptr, size_t oldsize, size_t newsize);
void dFree(void* ptr, size_t size);
/* odemath.h */
int dSafeNormalize3(dVector3 a);
int dSafeNormalize4(dVector4 a);
void dNormalize3(dVector3 a);
void dNormalize4(dVector4 a);
void dPlaneSpace(const dVector3 n, dVector3 p, dVector3 q);
/* matrix.h */
void dSetZero(dReal* a, int n);
void dSetValue(dReal* a, int n, dReal value);
dReal dDot(const dReal* a, const dReal* b, int n);
void dMultiply0(dReal* A, const dReal* B, const dReal* C, int p, int q, int r);
void dMultiply1(dReal* A, const dReal* B, const dReal* C, int p, int q, int r);
void dMultiply2(dReal* A, const dReal* B, const dReal* C, int p, int q, int r);
int dFactorCholesky(dReal* A, int n);
void dSolveCholesky(const dReal* L, dReal* b, int n);
int dInvertPDMatrix(const dReal* A, dReal* Ainv, int n);
int dIsPositiveDefinite(const dReal* A, int n);
void dFactorLDLT(dReal* A, dReal* d, int n, int nskip);
void dSolveL1(const dReal* L, dReal* b, int n, int nskip);
void dSolveL1T(const dReal* L, dReal* b, int n, int nskip);
void dVectorScale(dReal* a, const dReal* d, int n);
void dSolveLDLT(const dReal* L, const dReal* d, dReal* b, int n, int nskip);
void dLDLTAddTL(dReal* L, dReal* d, const dReal* a, int n, int nskip);
void dLDLTRemove(dReal* *A, const int* p, dReal* L, dReal* d, int n1, int n2, int r, int nskip);
void dRemoveRowCol(dReal* A, int n, int nskip, int r);
/* timer.h */
void dStopwatchReset(dStopwatch* s);
void dStopwatchStart(dStopwatch* s);
void dStopwatchStop(dStopwatch* s);
double dStopwatchTime(dStopwatch* s);
void dTimerStart(const char* description);
void dTimerNow(const char* description);
void dTimerEnd(void);
void dTimerReport(FILE* fout, int average);
double dTimerTicksPerSecond(void);
double dTimerResolution(void);
/* rotation.h */
void dRSetIdentity(dMatrix3 R);
void dRFromAxisAndAngle(dMatrix3 R, dReal ax, dReal ay, dReal az, dReal angle);
void dRFromEulerAngles(dMatrix3 R, dReal phi, dReal theta, dReal psi);
void dRFrom2Axes(dMatrix3 R, dReal ax, dReal ay, dReal az, dReal bx, dReal by, dReal bz);
void dRFromZAxis(dMatrix3 R, dReal ax, dReal ay, dReal az);
void dQSetIdentity(dQuaternion q);
void dQFromAxisAndAngle(dQuaternion q, dReal ax, dReal ay, dReal az, dReal angle);
void dQMultiply0(dQuaternion qa, const dQuaternion qb, const dQuaternion qc);
void dQMultiply1(dQuaternion qa, const dQuaternion qb, const dQuaternion qc);
void dQMultiply2(dQuaternion qa, const dQuaternion qb, const dQuaternion qc);
void dQMultiply3(dQuaternion qa, const dQuaternion qb, const dQuaternion qc);
void dRfromQ(dMatrix3 R, const dQuaternion q);
void dQfromR(dQuaternion q, const dMatrix3 R);
void dDQfromW(dReal dq[4], const dVector3 w, const dQuaternion q);
/* mass.h */
int dMassCheck(const dMass* m);
void dMassSetZero(dMass* m);
void dMassSetParameters(dMass* m, dReal themass, dReal cgx, dReal cgy, dReal cgz, dReal I11, dReal I22, dReal I33, dReal I12, dReal I13, dReal I23);
void dMassSetSphere(dMass* m, dReal density, dReal radius);
void dMassSetSphereTotal(dMass* m, dReal total_mass, dReal radius);
void dMassSetCapsule(dMass* m, dReal density, int direction, dReal radius, dReal length);
void dMassSetCapsuleTotal(dMass* m, dReal total_mass, int direction, dReal radius, dReal length);
void dMassSetCylinder(dMass* m, dReal density, int direction, dReal radius, dReal length);
void dMassSetCylinderTotal(dMass* m, dReal total_mass, int direction, dReal radius, dReal length);
void dMassSetBox(dMass* m, dReal density, dReal lx, dReal ly, dReal lz);
void dMassSetBoxTotal(dMass* m, dReal total_mass, dReal lx, dReal ly, dReal lz);
void dMassSetTrimesh(dMass* m, dReal density, dGeomID g);
void dMassSetTrimeshTotal(dMass* m, dReal total_mass, dGeomID g);
void dMassAdjust(dMass* m, dReal newmass);
void dMassTranslate(dMass* m, dReal x, dReal y, dReal z);
void dMassRotate(dMass* m, const dMatrix3 R);
void dMassAdd(dMass* a, const dMass* b);
/* misc.h */
int dTestRand(void);
unsigned long dRand(void);
unsigned long dRandGetSeed(void);
void dRandSetSeed(unsigned long s);
int dRandInt(int n);
dReal dRandReal(void);
void dPrintMatrix(const dReal* A, int n, int m, char* fmt, FILE* f);
void dMakeRandomVector(dReal* A, int n, dReal range);
void dMakeRandomMatrix(dReal* A, int n, int m, dReal range);
void dClearUpperTriangle(dReal* A, int n);
dReal dMaxDifference(const dReal* A, const dReal* B, int n, int m);
dReal dMaxDifferenceLowerTriangle(const dReal* A, const dReal* B, int n);
/* objects.h */
dWorldID dWorldCreate(void);
void dWorldDestroy(dWorldID world);
void dWorldSetGravity(dWorldID w, dReal x, dReal y, dReal z);
void dWorldGetGravity(dWorldID w, dVector3 gravity);
void dWorldSetERP(dWorldID w, dReal erp);
dReal dWorldGetERP(dWorldID w);
void dWorldSetCFM(dWorldID w, dReal cfm);
dReal dWorldGetCFM(dWorldID w);
void dWorldStep(dWorldID w, dReal stepsize);
void dWorldImpulseToForce(dWorldID w, dReal stepsize, dReal ix, dReal iy, dReal iz, dVector3 force);
void dWorldQuickStep(dWorldID w, dReal stepsize);
void dWorldSetQuickStepNumIterations(dWorldID w, int num);
int dWorldGetQuickStepNumIterations(dWorldID w);
void dWorldSetQuickStepW(dWorldID w, dReal over_relaxation);
dReal dWorldGetQuickStepW(dWorldID w);
void dWorldSetContactMaxCorrectingVel(dWorldID w, dReal vel);
dReal dWorldGetContactMaxCorrectingVel(dWorldID w);
void dWorldSetContactSurfaceLayer(dWorldID w, dReal depth);
dReal dWorldGetContactSurfaceLayer(dWorldID w);
void dWorldStepFast1(dWorldID w, dReal stepsize, int maxiterations);
void dWorldSetAutoEnableDepthSF1(dWorldID w, int autoEnableDepth);
int dWorldGetAutoEnableDepthSF1(dWorldID w);
dReal dWorldGetAutoDisableLinearThreshold(dWorldID w);
void dWorldSetAutoDisableLinearThreshold(dWorldID w, dReal linear_threshold);
dReal dWorldGetAutoDisableAngularThreshold(dWorldID w);
void dWorldSetAutoDisableAngularThreshold(dWorldID w, dReal angular_threshold);
dReal dWorldGetAutoDisableLinearAverageThreshold(dWorldID w);
void dWorldSetAutoDisableLinearAverageThreshold(dWorldID w, dReal linear_average_threshold);
dReal dWorldGetAutoDisableAngularAverageThreshold(dWorldID w);
void dWorldSetAutoDisableAngularAverageThreshold(dWorldID w, dReal angular_average_threshold);
int dWorldGetAutoDisableAverageSamplesCount(dWorldID w);
void dWorldSetAutoDisableAverageSamplesCount(dWorldID w, unsigned int average_samples_count);
int dWorldGetAutoDisableSteps(dWorldID w);
void dWorldSetAutoDisableSteps(dWorldID w, int steps);
dReal dWorldGetAutoDisableTime(dWorldID w);
void dWorldSetAutoDisableTime(dWorldID w, dReal time);
int dWorldGetAutoDisableFlag(dWorldID w);
void dWorldSetAutoDisableFlag(dWorldID w, int do_auto_disable);
dReal dWorldGetLinearDampingThreshold(dWorldID w);
void dWorldSetLinearDampingThreshold(dWorldID w, dReal threshold);
dReal dWorldGetAngularDampingThreshold(dWorldID w);
void dWorldSetAngularDampingThreshold(dWorldID w, dReal threshold);
dReal dWorldGetLinearDamping(dWorldID w);
void dWorldSetLinearDamping(dWorldID w, dReal scale);
dReal dWorldGetAngularDamping(dWorldID w);
void dWorldSetAngularDamping(dWorldID w, dReal scale);
void dWorldSetDamping(dWorldID w, dReal linear_scale, dReal angular_scale);
dReal dWorldGetMaxAngularSpeed(dWorldID w);
void dWorldSetMaxAngularSpeed(dWorldID w, dReal max_speed);
dReal dBodyGetAutoDisableLinearThreshold(dBodyID b);
void dBodySetAutoDisableLinearThreshold(dBodyID b, dReal linear_average_threshold);
dReal dBodyGetAutoDisableAngularThreshold(dBodyID b);
void dBodySetAutoDisableAngularThreshold(dBodyID b, dReal angular_average_threshold);
int dBodyGetAutoDisableAverageSamplesCount(dBodyID b);
void dBodySetAutoDisableAverageSamplesCount(dBodyID b, unsigned int average_samples_count);
int dBodyGetAutoDisableSteps(dBodyID b);
void dBodySetAutoDisableSteps(dBodyID b, int steps);
dReal dBodyGetAutoDisableTime(dBodyID b);
void dBodySetAutoDisableTime(dBodyID b, dReal time);
int dBodyGetAutoDisableFlag(dBodyID b);
void dBodySetAutoDisableFlag(dBodyID b, int do_auto_disable);
void dBodySetAutoDisableDefaults(dBodyID b);
dWorldID dBodyGetWorld(dBodyID b);
dBodyID dBodyCreate(dWorldID w);
void dBodyDestroy(dBodyID b);
void dBodySetData(dBodyID b, void* data);
void* dBodyGetData(dBodyID b);
void dBodySetPosition(dBodyID b, dReal x, dReal y, dReal z);
void dBodySetRotation(dBodyID b, const dMatrix3 R);
void dBodySetQuaternion(dBodyID b, const dQuaternion q);
void dBodySetLinearVel(dBodyID b, dReal x, dReal y, dReal z);
void dBodySetAngularVel(dBodyID b, dReal x, dReal y, dReal z);
const dReal* dBodyGetPosition(dBodyID b);
void dBodyCopyPosition(dBodyID body, dVector3 pos);
const dReal* dBodyGetRotation(dBodyID b);
void dBodyCopyRotation(dBodyID b, dMatrix3 R);
const dReal* dBodyGetQuaternion(dBodyID b);
void dBodyCopyQuaternion(dBodyID body, dQuaternion quat);
const dReal* dBodyGetLinearVel(dBodyID b);
const dReal* dBodyGetAngularVel(dBodyID b);
void dBodySetMass(dBodyID b, const dMass* mass);
void dBodyGetMass(dBodyID b, dMass* mass);
void dBodyAddForce(dBodyID b, dReal fx, dReal fy, dReal fz);
void dBodyAddTorque(dBodyID b, dReal fx, dReal fy, dReal fz);
void dBodyAddRelForce(dBodyID b, dReal fx, dReal fy, dReal fz);
void dBodyAddRelTorque(dBodyID b, dReal fx, dReal fy, dReal fz);
void dBodyAddForceAtPos(dBodyID b, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void dBodyAddForceAtRelPos(dBodyID b, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void dBodyAddRelForceAtPos(dBodyID b, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
void dBodyAddRelForceAtRelPos(dBodyID b, dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
const dReal* dBodyGetForce(dBodyID b);
const dReal* dBodyGetTorque(dBodyID b);
void dBodySetForce(dBodyID b, dReal x, dReal y, dReal z);
void dBodySetTorque(dBodyID b, dReal x, dReal y, dReal z);
void dBodyGetRelPointPos(dBodyID b, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyGetRelPointVel(dBodyID b, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyGetPointVel(dBodyID b, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyGetPosRelPoint(dBodyID b, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyVectorToWorld(dBodyID b, dReal px, dReal py, dReal pz, dVector3 result);
void dBodyVectorFromWorld(dBodyID b, dReal px, dReal py, dReal pz, dVector3 result);
void dBodySetFiniteRotationMode(dBodyID b, int mode);
void dBodySetFiniteRotationAxis(dBodyID b, dReal x, dReal y, dReal z);
int dBodyGetFiniteRotationMode(dBodyID b);
void dBodyGetFiniteRotationAxis(dBodyID b, dVector3 result);
int dBodyGetNumJoints(dBodyID b);
dJointID dBodyGetJoint(dBodyID b, int index);
void dBodyEnable(dBodyID b);
void dBodyDisable(dBodyID b);
int dBodyIsEnabled(dBodyID b);
void dBodySetGravityMode(dBodyID b, int mode);
int dBodyGetGravityMode(dBodyID b);
void dBodySetMovedCallback(dBodyID b, void(*callback)(dBodyID b));
dGeomID dBodyGetFirstGeom(dBodyID b);
dGeomID dBodyGetNextGeom(dGeomID g);
void dBodySetDampingDefaults(dBodyID b);
dReal dBodyGetLinearDamping(dBodyID b);
void dBodySetLinearDamping(dBodyID b, dReal scale);
dReal dBodyGetAngularDamping(dBodyID b);
void dBodySetAngularDamping(dBodyID b, dReal scale);
void dBodySetDamping(dBodyID b, dReal linear_scale, dReal angular_scale);
dReal dBodyGetLinearDampingThreshold(dBodyID b);
void dBodySetLinearDampingThreshold(dBodyID b, dReal threshold);
dReal dBodyGetAngularDampingThreshold(dBodyID b);
void dBodySetAngularDampingThreshold(dBodyID b, dReal threshold);
dReal dBodyGetMaxAngularSpeed(dBodyID b);
void dBodySetMaxAngularSpeed(dBodyID b, dReal max_speed);
dJointID dJointCreateBall(dWorldID w, dJointGroupID group);
dJointID dJointCreateHinge(dWorldID w, dJointGroupID group);
dJointID dJointCreateSlider(dWorldID w, dJointGroupID group);
dJointID dJointCreateContact(dWorldID w, dJointGroupID, const dContact* );
dJointID dJointCreateHinge2(dWorldID w, dJointGroupID group);
dJointID dJointCreateUniversal(dWorldID w, dJointGroupID group);
dJointID dJointCreatePR(dWorldID w, dJointGroupID group);
dJointID dJointCreatePU(dWorldID w, dJointGroupID group);
dJointID dJointCreatePiston(dWorldID w, dJointGroupID group);
dJointID dJointCreateFixed(dWorldID w, dJointGroupID group);
dJointID dJointCreateNull(dWorldID w, dJointGroupID group);
dJointID dJointCreateAMotor(dWorldID w, dJointGroupID group);
dJointID dJointCreateLMotor(dWorldID w, dJointGroupID group);
dJointID dJointCreatePlane2D(dWorldID w, dJointGroupID group);
void dJointDestroy(dJointID j);
dJointGroupID dJointGroupCreate(int max_size);
void dJointGroupDestroy(dJointGroupID);
void dJointGroupEmpty(dJointGroupID);
int dJointGetNumBodies(dJointID j);
void dJointAttach(dJointID j, dBodyID body1, dBodyID body2);
void dJointSetData(dJointID j, void* data);
void* dJointGetData(dJointID j);
dJointType dJointGetType(dJointID j);
dBodyID dJointGetBody(dJointID j, int index);
void dJointSetFeedback(dJointID j, dJointFeedback* );
dJointFeedback* dJointGetFeedback(dJointID j);
void dJointSetBallAnchor(dJointID j, dReal x, dReal y, dReal z);
void dJointSetBallAnchor2(dJointID j, dReal x, dReal y, dReal z);
void dJointSetBallParam(dJointID j, int parameter, dReal value);
void dJointSetHingeAnchor(dJointID j, dReal x, dReal y, dReal z);
void dJointSetHingeAnchorDelta(dJointID j, dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
void dJointSetHingeAxis(dJointID j, dReal x, dReal y, dReal z);
void dJointSetHingeAxisOffset(dJointID j, dReal x, dReal y, dReal z, dReal angle);
void dJointSetHingeParam(dJointID j, int parameter, dReal value);
void dJointAddHingeTorque(dJointID joint, dReal torque);
void dJointSetSliderAxis(dJointID j, dReal x, dReal y, dReal z);
void dJointSetSliderAxisDelta(dJointID j, dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
void dJointSetSliderParam(dJointID j, int parameter, dReal value);
void dJointAddSliderForce(dJointID joint, dReal force);
void dJointSetHinge2Anchor(dJointID j, dReal x, dReal y, dReal z);
void dJointSetHinge2Axis1(dJointID j, dReal x, dReal y, dReal z);
void dJointSetHinge2Axis2(dJointID j, dReal x, dReal y, dReal z);
void dJointSetHinge2Param(dJointID j, int parameter, dReal value);
void dJointAddHinge2Torques(dJointID joint, dReal torque1, dReal torque2);
void dJointSetUniversalAnchor(dJointID j, dReal x, dReal y, dReal z);
void dJointSetUniversalAxis1(dJointID j, dReal x, dReal y, dReal z);
void dJointSetUniversalAxis2(dJointID j, dReal x, dReal y, dReal z);
void dJointSetUniversalParam(dJointID j, int parameter, dReal value);
void dJointAddUniversalTorques(dJointID joint, dReal torque1, dReal torque2);
void dJointSetPRAnchor(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPRAxis1(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPRAxis2(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPRParam(dJointID j, int parameter, dReal value);
void dJointAddPRTorque(dJointID j, dReal torque);
void dJointSetPUAnchor(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPUAnchorDelta(dJointID j, dReal x, dReal y, dReal z, dReal dx, dReal dy, dReal dz);
void dJointSetPUAxis1(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPUAxis2(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPUAxis3(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPUAxisP(dJointID id, dReal x, dReal y, dReal z);
void dJointSetPUParam(dJointID j, int parameter, dReal value);
void dJointAddPUTorque(dJointID j, dReal torque);
void dJointSetPistonAnchor(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPistonAnchorOffset(dJointID j, dReal x, dReal y, dReal z, dReal dx, dReal dy, dReal dz);
void dJointSetPistonAxis(dJointID j, dReal x, dReal y, dReal z);
void dJointSetPistonAxisDelta(dJointID j, dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
void dJointSetPistonParam(dJointID j, int parameter, dReal value);
void dJointAddPistonForce(dJointID joint, dReal force);
void dJointSetFixed(dJointID j);
void dJointSetFixedParam(dJointID j, int parameter, dReal value);
void dJointSetAMotorNumAxes(dJointID j, int num);
void dJointSetAMotorAxis(dJointID j, int anum, int rel, dReal x, dReal y, dReal z);
void dJointSetAMotorAngle(dJointID j, int anum, dReal angle);
void dJointSetAMotorParam(dJointID j, int parameter, dReal value);
void dJointSetAMotorMode(dJointID j, int mode);
void dJointAddAMotorTorques(dJointID j, dReal torque1, dReal torque2, dReal torque3);
void dJointSetLMotorNumAxes(dJointID j, int num);
void dJointSetLMotorAxis(dJointID j, int anum, int rel, dReal x, dReal y, dReal z);
void dJointSetLMotorParam(dJointID j, int parameter, dReal value);
void dJointSetPlane2DXParam(dJointID j, int parameter, dReal value);
void dJointSetPlane2DYParam(dJointID j, int parameter, dReal value);
void dJointSetPlane2DAngleParam(dJointID j, int parameter, dReal value);
void dJointGetBallAnchor(dJointID j, dVector3 result);
void dJointGetBallAnchor2(dJointID j, dVector3 result);
dReal dJointGetBallParam(dJointID j, int parameter);
void dJointGetHingeAnchor(dJointID j, dVector3 result);
void dJointGetHingeAnchor2(dJointID j, dVector3 result);
void dJointGetHingeAxis(dJointID j, dVector3 result);
dReal dJointGetHingeParam(dJointID j, int parameter);
dReal dJointGetHingeAngle(dJointID j);
dReal dJointGetHingeAngleRate(dJointID j);
dReal dJointGetSliderPosition(dJointID j);
dReal dJointGetSliderPositionRate(dJointID j);
void dJointGetSliderAxis(dJointID j, dVector3 result);
dReal dJointGetSliderParam(dJointID j, int parameter);
void dJointGetHinge2Anchor(dJointID j, dVector3 result);
void dJointGetHinge2Anchor2(dJointID j, dVector3 result);
void dJointGetHinge2Axis1(dJointID j, dVector3 result);
void dJointGetHinge2Axis2(dJointID j, dVector3 result);
dReal dJointGetHinge2Param(dJointID j, int parameter);
dReal dJointGetHinge2Angle1(dJointID j);
dReal dJointGetHinge2Angle1Rate(dJointID j);
dReal dJointGetHinge2Angle2Rate(dJointID j);
void dJointGetUniversalAnchor(dJointID j, dVector3 result);
void dJointGetUniversalAnchor2(dJointID j, dVector3 result);
void dJointGetUniversalAxis1(dJointID j, dVector3 result);
void dJointGetUniversalAxis2(dJointID j, dVector3 result);
dReal dJointGetUniversalParam(dJointID j, int parameter);
void dJointGetUniversalAngles(dJointID j, dReal* angle1, dReal* angle2);
dReal dJointGetUniversalAngle1(dJointID j);
dReal dJointGetUniversalAngle2(dJointID j);
dReal dJointGetUniversalAngle1Rate(dJointID j);
dReal dJointGetUniversalAngle2Rate(dJointID j);
void dJointGetPRAnchor(dJointID j, dVector3 result);
dReal dJointGetPRPosition(dJointID j);
dReal dJointGetPRPositionRate(dJointID j);
void dJointGetPRAxis1(dJointID j, dVector3 result);
void dJointGetPRAxis2(dJointID j, dVector3 result);
dReal dJointGetPRParam(dJointID j, int parameter);
void dJointGetPUAnchor(dJointID j, dVector3 result);
dReal dJointGetPUPosition(dJointID j);
dReal dJointGetPUPositionRate(dJointID j);
void dJointGetPUAxis1(dJointID j, dVector3 result);
void dJointGetPUAxis2(dJointID j, dVector3 result);
void dJointGetPUAxis3(dJointID j, dVector3 result);
void dJointGetPUAxisP(dJointID id, dVector3 result);
void dJointGetPUAngles(dJointID j, dReal* angle1, dReal* angle2);
dReal dJointGetPUAngle1(dJointID j);
dReal dJointGetPUAngle1Rate(dJointID j);
dReal dJointGetPUAngle2(dJointID j);
dReal dJointGetPUAngle2Rate(dJointID j);
dReal dJointGetPUParam(dJointID j, int parameter);
dReal dJointGetPistonPosition(dJointID j);
dReal dJointGetPistonPositionRate(dJointID j);
dReal dJointGetPistonAngle(dJointID j);
dReal dJointGetPistonAngleRate(dJointID j);
void dJointGetPistonAnchor(dJointID j, dVector3 result);
void dJointGetPistonAnchor2(dJointID j, dVector3 result);
void dJointGetPistonAxis(dJointID j, dVector3 result);
dReal dJointGetPistonParam(dJointID j, int parameter);
int dJointGetAMotorNumAxes(dJointID j);
void dJointGetAMotorAxis(dJointID j, int anum, dVector3 result);
int dJointGetAMotorAxisRel(dJointID j, int anum);
dReal dJointGetAMotorAngle(dJointID j, int anum);
dReal dJointGetAMotorAngleRate(dJointID j, int anum);
dReal dJointGetAMotorParam(dJointID j, int parameter);
int dJointGetAMotorMode(dJointID j);
int dJointGetLMotorNumAxes(dJointID j);
void dJointGetLMotorAxis(dJointID j, int anum, dVector3 result);
dReal dJointGetLMotorParam(dJointID j, int parameter);
dReal dJointGetFixedParam(dJointID j, int parameter);
dJointID dConnectingJoint(dBodyID b, dBodyID);
int dConnectingJointList(dBodyID b, dBodyID, dJointID*);
int dAreConnected(dBodyID b, dBodyID);
int dAreConnectedExcluding(dBodyID body1, dBodyID body2, int joint_type);
/* odecpp.h */
/* collision_space.h */
dSpaceID dSimpleSpaceCreate(dSpaceID space);
dSpaceID dHashSpaceCreate(dSpaceID space);
dSpaceID dQuadTreeSpaceCreate(dSpaceID space, dVector3 Center, dVector3 Extents, int Depth);
dSpaceID dSweepAndPruneSpaceCreate(dSpaceID space, int axisorder);
void dSpaceDestroy(dSpaceID space);
void dHashSpaceSetLevels(dSpaceID space, int minlevel, int maxlevel);
void dHashSpaceGetLevels(dSpaceID space, int* minlevel, int* maxlevel);
void dSpaceSetCleanup(dSpaceID space, int mode);
int dSpaceGetCleanup(dSpaceID space);
void dSpaceSetSublevel(dSpaceID space, int sublevel);
int dSpaceGetSublevel(dSpaceID space);
void dSpaceAdd(dSpaceID space, dGeomID g);
void dSpaceRemove(dSpaceID space, dGeomID g);
int dSpaceQuery(dSpaceID space, dGeomID g);
void dSpaceClean(dSpaceID space);
int dSpaceGetNumGeoms(dSpaceID space);
dGeomID dSpaceGetGeom(dSpaceID space, int i);
int dSpaceGetClass(dSpaceID space);
/* collision.h */
void dGeomDestroy(dGeomID geom);
void dGeomSetData(dGeomID geom, void* data);
void* dGeomGetData(dGeomID geom);
void dGeomSetBody(dGeomID geom, dBodyID body);
dBodyID dGeomGetBody(dGeomID geom);
void dGeomSetPosition(dGeomID geom, dReal x, dReal y, dReal z);
void dGeomSetRotation(dGeomID geom, const dMatrix3 R);
void dGeomSetQuaternion(dGeomID geom, const dQuaternion Q);
const dReal* dGeomGetPosition(dGeomID geom);
void dGeomCopyPosition(dGeomID geom, dVector3 pos);
const dReal* dGeomGetRotation(dGeomID geom);
void dGeomCopyRotation(dGeomID geom, dMatrix3 R);
void dGeomGetQuaternion(dGeomID geom, dQuaternion result);
void dGeomGetAABB(dGeomID geom, dReal aabb[6]);
int dGeomIsSpace(dGeomID geom);
dSpaceID dGeomGetSpace(dGeomID);
int dGeomGetClass(dGeomID geom);
void dGeomSetCategoryBits(dGeomID geom, unsigned long bits);
void dGeomSetCollideBits(dGeomID geom, unsigned long bits);
unsigned long dGeomGetCategoryBits(dGeomID);
unsigned long dGeomGetCollideBits(dGeomID);
void dGeomEnable(dGeomID geom);
void dGeomDisable(dGeomID geom);
int dGeomIsEnabled(dGeomID geom);
void dGeomSetOffsetPosition(dGeomID geom, dReal x, dReal y, dReal z);
void dGeomSetOffsetRotation(dGeomID geom, const dMatrix3 R);
void dGeomSetOffsetQuaternion(dGeomID geom, const dQuaternion Q);
void dGeomSetOffsetWorldPosition(dGeomID geom, dReal x, dReal y, dReal z);
void dGeomSetOffsetWorldRotation(dGeomID geom, const dMatrix3 R);
void dGeomSetOffsetWorldQuaternion(dGeomID geom, const dQuaternion);
void dGeomClearOffset(dGeomID geom);
int dGeomIsOffset(dGeomID geom);
const dReal* dGeomGetOffsetPosition(dGeomID geom);
void dGeomCopyOffsetPosition(dGeomID geom, dVector3 pos);
const dReal* dGeomGetOffsetRotation(dGeomID geom);
void dGeomCopyOffsetRotation(dGeomID geom, dMatrix3 R);
void dGeomGetOffsetQuaternion(dGeomID geom, dQuaternion result);
int dCollide(dGeomID o1, dGeomID o2, int flags, dContactGeom* contact, int skip);
void dSpaceCollide(dSpaceID space, void* data, dNearCallback* callback);
void dSpaceCollide2(dGeomID space1, dGeomID space2, void* data, dNearCallback* callback);
dGeomID dCreateSphere(dSpaceID space, dReal radius);
void dGeomSphereSetRadius(dGeomID sphere, dReal radius);
dReal dGeomSphereGetRadius(dGeomID sphere);
dReal dGeomSpherePointDepth(dGeomID sphere, dReal x, dReal y, dReal z);
dGeomID dCreateConvex(dSpaceID space, dReal* _planes, unsigned int _planecount, dReal* _points, unsigned int _pointcount,unsigned int* _polygons);
void dGeomSetConvex(dGeomID g, dReal* _planes, unsigned int _count, dReal* _points, unsigned int _pointcount,unsigned int* _polygons);
dGeomID dCreateBox(dSpaceID space, dReal lx, dReal ly, dReal lz);
void dGeomBoxSetLengths(dGeomID box, dReal lx, dReal ly, dReal lz);
void dGeomBoxGetLengths(dGeomID box, dVector3 result);
dReal dGeomBoxPointDepth(dGeomID box, dReal x, dReal y, dReal z);
dGeomID dCreatePlane(dSpaceID space, dReal a, dReal b, dReal c, dReal d);
void dGeomPlaneSetParams(dGeomID plane, dReal a, dReal b, dReal c, dReal d);
void dGeomPlaneGetParams(dGeomID plane, dVector4 result);
dReal dGeomPlanePointDepth(dGeomID plane, dReal x, dReal y, dReal z);
dGeomID dCreateCapsule(dSpaceID space, dReal radius, dReal length);
void dGeomCapsuleSetParams(dGeomID ccylinder, dReal radius, dReal length);
void dGeomCapsuleGetParams(dGeomID ccylinder, dReal* radius, dReal* length);
dReal dGeomCapsulePointDepth(dGeomID ccylinder, dReal x, dReal y, dReal z);
dGeomID dCreateCylinder(dSpaceID space, dReal radius, dReal length);
void dGeomCylinderSetParams(dGeomID cylinder, dReal radius, dReal length);
void dGeomCylinderGetParams(dGeomID cylinder, dReal* radius, dReal* length);
dGeomID dCreateRay(dSpaceID space, dReal length);
void dGeomRaySetLength(dGeomID ray, dReal length);
dReal dGeomRayGetLength(dGeomID ray);
void dGeomRaySet(dGeomID ray, dReal px, dReal py, dReal pz, dReal dx, dReal dy, dReal dz);
void dGeomRayGet(dGeomID ray, dVector3 start, dVector3 dir);
void dGeomRaySetParams(dGeomID g, int FirstContact, int BackfaceCull);
void dGeomRayGetParams(dGeomID g, int* FirstContact, int* BackfaceCull);
void dGeomRaySetClosestHit(dGeomID g, int closestHit);
int dGeomRayGetClosestHit(dGeomID g);
dGeomID dCreateGeomTransform(dSpaceID space);
void dGeomTransformSetGeom(dGeomID g, dGeomID obj);
dGeomID dGeomTransformGetGeom(dGeomID g);
void dGeomTransformSetCleanup(dGeomID g, int mode);
int dGeomTransformGetCleanup(dGeomID g);
void dGeomTransformSetInfo(dGeomID g, int mode);
int dGeomTransformGetInfo(dGeomID g);
dGeomID dCreateHeightfield(dSpaceID space, dHeightfieldDataID data, int bPlaceable);
dHeightfieldDataID dGeomHeightfieldDataCreate();
void dGeomHeightfieldDataDestroy(dHeightfieldDataID d);
void dGeomHeightfieldDataBuildCallback(dHeightfieldDataID d, void* pUserData, dHeightfieldGetHeight* pCallback, dReal width, dReal depth, int widthSamples, int depthSamples, dReal scale, dReal offset, dReal thickness, int bWrap);
void dGeomHeightfieldDataBuildByte(dHeightfieldDataID d, const unsigned char* pHeightData, int bCopyHeightData, dReal width, dReal depth, int widthSamples, int depthSamples, dReal scale, dReal offset, dReal thickness, int bWrap);
void dGeomHeightfieldDataBuildShort(dHeightfieldDataID d, const short* pHeightData, int bCopyHeightData, dReal width, dReal depth, int widthSamples, int depthSamples, dReal scale, dReal offset, dReal thickness, int bWrap);
void dGeomHeightfieldDataBuildSingle(dHeightfieldDataID d, const float* pHeightData, int bCopyHeightData, dReal width, dReal depth, int widthSamples, int depthSamples, dReal scale, dReal offset, dReal thickness, int bWrap);
void dGeomHeightfieldDataBuildDouble(dHeightfieldDataID d, const double* pHeightData, int bCopyHeightData, dReal width, dReal depth, int widthSamples, int depthSamples, dReal scale, dReal offset, dReal thickness, int bWrap);
void dGeomHeightfieldDataSetBounds(dHeightfieldDataID d, dReal minHeight, dReal maxHeight);
void dGeomHeightfieldSetHeightfieldData(dGeomID g, dHeightfieldDataID d);
dHeightfieldDataID dGeomHeightfieldGetHeightfieldData(dGeomID g);
void dClosestLineSegmentPoints(const dVector3 a1, const dVector3 a2, const dVector3 b1, const dVector3 b2, dVector3 cp1, dVector3 cp2);
int dBoxTouchesBox(const dVector3 _p1, const dMatrix3 R1, const dVector3 side1, const dVector3 _p2, const dMatrix3 R2, const dVector3 side2);
int dBoxBox(const dVector3 p1, const dMatrix3 R1, const dVector3 side1, const dVector3 p2, const dMatrix3 R2, const dVector3 side2, dVector3 normal, dReal* depth, int* return_code, int flags, dContactGeom* contact, int skip);
void dInfiniteAABB(dGeomID geom, dReal aabb[6]);
int dCreateGeomClass(const dGeomClass* classptr);
void* dGeomGetClassData(dGeomID);
dGeomID dCreateGeom(int classnum);
void dSetColliderOverride(int i, int j, dColliderFn* fn);
/* odecpp_collision.h */
/* export-dif.h */
void dWorldExportDIF(dWorldID w, FILE* file, const char* world_name);
