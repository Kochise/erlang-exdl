Content-Type: multipart/related; start=<op.mhtml.1229348540234.3aeeb6016b4d8589@192.168.1.200>; boundary=----------EFBe3geZg9eFblqpdVA4hm
Content-Location: http://www.ode.org/ode-latest-userguide.html
Subject: =?utf-8?Q?Open=20Dynamics=20Engine?=
MIME-Version: 1.0

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=ode-latest-userguide.html
Content-Type: text/html; charset=iso-8859-1; name=ode-latest-userguide.html
Content-Id: <op.mhtml.1229348540234.3aeeb6016b4d8589@192.168.1.200>
Content-Location: http://www.ode.org/ode-latest-userguide.html
Content-Transfer-Encoding: Quoted-Printable

<html>
<head>
<title>Open Dynamics Engine</title>
<meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Diso-88=
59-1">
<style type=3D"text/css">
	h1.title {
		color:		#0000ff;
		font-weight:	bold;
		text-align:	center;
	}
	div.subtitle {
		color:		#0000ff;
		font-size:	smaller;
		padding-bottom:	10px;
	}
	div.author {
		color:		#000000;
		font-size:	smaller;
		font-style:	italic;
	}
	div.titledate {
		color:		#000000;
		font-size:	smaller;
		font-style:	italic;
		padding-bottom:	10px;
	}
	div.copyright {
		color:		#000000;
		font-size:	small;
	}
	h1.contents {
	}
	pre.code {
		background:	#c0ffff;
		color:		#0000ff;
		white-space:	pre;
	}
	span.c {
		font-family:	Courier, fixed, serif;
		white-space:	pre;
		font-size:	smaller;
	}
	span.arg {
		color:		#0000ff;
		font-family:	Courier, fixed, serif;
		font-size:	smaller;
	}
	a.func:link {
		color: #0000ff;
		font-family:	Courier, fixed, serif;
		font-size:	smaller;
	}
	a.func:visited {
		color: #0000ff;
		font-family:	Courier, fixed, serif;
		font-size:	smaller;
	}
	a.constref:link {
		color: #c00000;
		font-family:	Courier, fixed, serif;
		font-size:	smaller;
	}
	a.constref:visited {
		color: #c00000;
		font-family:	Courier, fixed, serif;
		font-size:	smaller;
	}
	pre.func1 {
		color:		#0000ff;
		white-space:	pre;
		font-family:	Courier, fixed, serif;
		margin-top:	5px;
		font-size:	smaller;
	}
	div.func2 {
		margin-left:	3em;
		margin-top:	5px;
		margin-bottom:	5px;
	}
	span.const {
		color:		#c00000;
		font-family:	Courier, fixed, serif;
		font-size:	smaller;
	}
	h1.section1 {
		font-weight:	bold;
		padding-top:	5px;
		border-top:	solid 2px black;
	}
	h2.section2 {
	}
	h3.section3 {
	}
	div.math {
		text-align:	center;
	}

	div.example {
		background:	#c0ffff;
		color:		#0000ff;
		width:		auto;
		font-weight:	bold;
		margin-left:	0em;
		margin-right:	0em;
		border-top:	solid 1px black;
		border-bottom:	solid 1px black;
		white-space:	pre;
		font-family:	Courier, fixed, serif;
		font-style:	normal;
		text-align:	left;
	}
</style>
</head>

<body bgcolor=3D"#ffffff" link=3D"#0000ff" alink=3D"#0000ff" vlink=3D"#0=
000ff">

<hr noshade size=3D2>
<h1 class=3D"title">
	Open Dynamics Engine
	<div class=3D"subtitle">v0.5 User Guide</div>
	<div class=3D"author">Russell Smith</div>
	<div class=3D"titledate">Thursday 23 February, 2006 </div>
	<div class=3D"copyright">This document is Copyright &copy; 2001-2004 Ru=
ssell Smith.</div>
</h1>
<hr noshade size=3D2>

<h1 class=3D"contents">Contents</h1>
<ul><li><a href=3D"#sec_1_0_0">1. Introduction</a>
<ul><li><a href=3D"#sec_1_1_0">1.1. Features</a>
<li><a href=3D"#sec_1_2_0">1.2. ODE's License</a>
<li><a href=3D"#sec_1_3_0">1.3. The ODE Community</a>
</ul><li><a href=3D"#sec_2_0_0">2. How to Install and Use ODE</a>
<ul><li><a href=3D"#sec_2_1_0">2.1. Installing ODE</a>
<ul><li><a href=3D"#sec_2_1_1">2.1.1. Building and Running ODE Tests on =
MacOS X</a>
</ul><li><a href=3D"#sec_2_2_0">2.2. Using ODE</a>
</ul><li><a href=3D"#sec_3_0_0">3. Concepts</a>
<ul><li><a href=3D"#sec_3_1_0">3.1. Background</a>
<li><a href=3D"#sec_3_2_0">3.2. Rigid bodies</a>
<ul><li><a href=3D"#sec_3_2_1">3.2.1. Islands and Disabled Bodies</a>
</ul><li><a href=3D"#sec_3_3_0">3.3. Integration</a>
<li><a href=3D"#sec_3_4_0">3.4. Force accumulators</a>
<li><a href=3D"#sec_3_5_0">3.5. Joints and constraints</a>
<li><a href=3D"#sec_3_6_0">3.6. Joint groups</a>
<li><a href=3D"#sec_3_7_0">3.7. Joint error and the error reduction para=
meter (ERP)</a>
<li><a href=3D"#sec_3_8_0">3.8. Soft constraint and constraint force mix=
ing (CFM)</a>
<ul><li><a href=3D"#sec_3_8_1">3.8.1. Constraint Force Mixing (CFM)</a>
<li><a href=3D"#sec_3_8_2">3.8.2. How To Use ERP and CFM</a>
</ul><li><a href=3D"#sec_3_9_0">3.9. Collision handling</a>
<li><a href=3D"#sec_3_10_0">3.10. Typical simulation code</a>
<li><a href=3D"#sec_3_11_0">3.11. Physics model</a>
<ul><li><a href=3D"#sec_3_11_1">3.11.1. Friction Approximation</a>
</ul></ul><li><a href=3D"#sec_4_0_0">4. Data Types and Conventions</a>
<ul><li><a href=3D"#sec_4_1_0">4.1. The basic data types</a>
<li><a href=3D"#sec_4_2_0">4.2. Objects and IDs</a>
<li><a href=3D"#sec_4_3_0">4.3. Argument conventions</a>
<li><a href=3D"#sec_4_4_0">4.4. C versus C++</a>
<li><a href=3D"#sec_4_5_0">4.5. Debugging</a>
</ul><li><a href=3D"#sec_5_0_0">5. World</a>
<ul><li><a href=3D"#sec_5_1_0">5.1. Stepping Functions</a>
<li><a href=3D"#sec_5_2_0">5.2. Contact Parameters</a>
</ul><li><a href=3D"#sec_6_0_0">6. Rigid Body Functions</a>
<ul><li><a href=3D"#sec_6_1_0">6.1. Creating and Destroying Bodies</a>
<li><a href=3D"#sec_6_2_0">6.2. Position and orientation</a>
<li><a href=3D"#sec_6_3_0">6.3. Mass and force</a>
<li><a href=3D"#sec_6_4_0">6.4. Utility</a>
<li><a href=3D"#sec_6_5_0">6.5. Automatic Enabling and Disabling</a>
<li><a href=3D"#sec_6_6_0">6.6. Miscellaneous Body Functions</a>
</ul><li><a href=3D"#sec_7_0_0">7. Joint Types and Joint Functions</a>
<ul><li><a href=3D"#sec_7_1_0">7.1. Creating and Destroying Joints</a>
<li><a href=3D"#sec_7_2_0">7.2. Miscellaneous Joint Functions</a>
<li><a href=3D"#sec_7_3_0">7.3. Joint parameter setting functions</a>
<ul><li><a href=3D"#sec_7_3_1">7.3.1. Ball and Socket</a>
<li><a href=3D"#sec_7_3_2">7.3.2. Hinge</a>
<li><a href=3D"#sec_7_3_3">7.3.3. Slider</a>
<li><a href=3D"#sec_7_3_4">7.3.4. Universal</a>
<li><a href=3D"#sec_7_3_5">7.3.5. Hinge-2</a>
<li><a href=3D"#sec_7_3_6">7.3.6. Fixed</a>
<li><a href=3D"#sec_7_3_7">7.3.7. Contact</a>
<li><a href=3D"#sec_7_3_8">7.3.8. Angular Motor</a>
</ul><li><a href=3D"#sec_7_4_0">7.4. General</a>
<li><a href=3D"#sec_7_5_0">7.5. Stop and motor parameters</a>
<ul><li><a href=3D"#sec_7_5_1">7.5.1. Parameter Functions</a>
</ul><li><a href=3D"#sec_7_6_0">7.6. Setting Joint Torques/Forces Direct=
ly</a>
</ul><li><a href=3D"#sec_8_0_0">8. StepFast</a>
<ul><li><a href=3D"#sec_8_1_0">8.1. When to use StepFast1</a>
<li><a href=3D"#sec_8_2_0">8.2. When NOT to use StepFast1</a>
<li><a href=3D"#sec_8_3_0">8.3. How it works</a>
<li><a href=3D"#sec_8_4_0">8.4. Experimental Utilities included with Ste=
pFast1</a>
<li><a href=3D"#sec_8_5_0">8.5. API</a>
</ul><li><a href=3D"#sec_9_0_0">9. Support Functions</a>
<ul><li><a href=3D"#sec_9_1_0">9.1. Rotation functions</a>
<li><a href=3D"#sec_9_2_0">9.2. Mass functions</a>
<li><a href=3D"#sec_9_3_0">9.3. Math functions</a>
<li><a href=3D"#sec_9_4_0">9.4. Error and memory functions</a>
</ul><li><a href=3D"#sec_10_0_0">10. Collision Detection</a>
<ul><li><a href=3D"#sec_10_1_0">10.1. Contact points</a>
<li><a href=3D"#sec_10_2_0">10.2. Geoms</a>
<li><a href=3D"#sec_10_3_0">10.3. Spaces</a>
<li><a href=3D"#sec_10_4_0">10.4. General geom functions</a>
<li><a href=3D"#sec_10_5_0">10.5. Collision detection</a>
<ul><li><a href=3D"#sec_10_5_1">10.5.1. Category and Collide Bitfields</=
a>
<li><a href=3D"#sec_10_5_2">10.5.2. Collision Detection Functions</a>
</ul><li><a href=3D"#sec_10_6_0">10.6. Space functions</a>
<li><a href=3D"#sec_10_7_0">10.7. Geometry Classes</a>
<ul><li><a href=3D"#sec_10_7_1">10.7.1. Sphere Class</a>
<li><a href=3D"#sec_10_7_2">10.7.2. Box Class</a>
<li><a href=3D"#sec_10_7_3">10.7.3. Plane Class</a>
<li><a href=3D"#sec_10_7_4">10.7.4. Capped Cylinder Class</a>
<li><a href=3D"#sec_10_7_5">10.7.5. Ray Class</a>
<li><a href=3D"#sec_10_7_6">10.7.6. Triangle Mesh Class</a>
<li><a href=3D"#sec_10_7_7">10.7.7. Geometry Transform Class</a>
</ul><li><a href=3D"#sec_10_8_0">10.8. User defined classes</a>
<li><a href=3D"#sec_10_9_0">10.9. Composite objects</a>
<li><a href=3D"#sec_10_10_0">10.10. Utility functions</a>
<li><a href=3D"#sec_10_11_0">10.11. Implementation notes</a>
<ul><li><a href=3D"#sec_10_11_1">10.11.1. Large Environments</a>
<li><a href=3D"#sec_10_11_2">10.11.2. Using a Different Collision Librar=
y</a>
</ul></ul><li><a href=3D"#sec_11_0_0">11. How To Make Good Simulations</=
a>
<ul><li><a href=3D"#sec_11_1_0">11.1. Integrator accuracy and stability<=
/a>
<li><a href=3D"#sec_11_2_0">11.2. Behavior may depend on step size</a>
<li><a href=3D"#sec_11_3_0">11.3. Making things go faster</a>
<li><a href=3D"#sec_11_4_0">11.4. Making things stable</a>
<li><a href=3D"#sec_11_5_0">11.5. Using constraint force mixing (CFM)</a=
>
<li><a href=3D"#sec_11_6_0">11.6. Avoiding singularities</a>
<li><a href=3D"#sec_11_7_0">11.7. Other stuff</a>
</ul><li><a href=3D"#sec_12_0_0">12. FAQ</a>
<ul><li><a href=3D"#sec_12_1_0">12.1. How do I connect a body to the sta=
tic environment with a joint?</a>
<li><a href=3D"#sec_12_2_0">12.2. Does ODE need or use graphics library =
X ?</a>
<li><a href=3D"#sec_12_3_0">12.3. Why do my rigid bodies bounce or penet=
rate on collision?
My restitution is zero!</a>
<li><a href=3D"#sec_12_4_0">12.4. How can an immovable body be created?<=
/a>
<li><a href=3D"#sec_12_5_0">12.5. Why would you ever want to set ERP les=
s than one?</a>
<li><a href=3D"#sec_12_6_0">12.6. Is it advisable to set body velocities=
 directly, instead of
applying a force or torque?</a>
<li><a href=3D"#sec_12_7_0">12.7. Why, when I set a body's velocity dire=
ctly, does it come up to speed
slower when joined to other bodies?</a>
<li><a href=3D"#sec_12_8_0">12.8. Should I scale my units to be around 1=
.0 ?</a>
<li><a href=3D"#sec_12_9_0">12.9. I've made a car, but the wheels don't =
stay on properly!</a>
<li><a href=3D"#sec_12_10_0">12.10. How do I make ``one way'' collision =
interaction</a>
<li><a href=3D"#sec_12_11_0">12.11. The Windows version of ODE crashes w=
ith large systems</a>
<li><a href=3D"#sec_12_12_0">12.12. My simple rotating bodies are unstab=
le!</a>
<li><a href=3D"#sec_12_13_0">12.13. My rolling bodies (e.g. wheels) some=
times get stuck between geoms</a>
<ul><li><a href=3D"#sec_12_13_1">12.13.1. The Problem</a>
<li><a href=3D"#sec_12_13_2">12.13.2. The Solution</a>
</ul></ul><li><a href=3D"#sec_13_0_0">13. Known Issues</a>
<li><a href=3D"#sec_14_0_0">14. ODE Internals</a>
<ul><li><a href=3D"#sec_14_1_0">14.1. Matrix storage conventions</a>
<li><a href=3D"#sec_14_2_0">14.2. Internals FAQ</a>
<ul><li><a href=3D"#sec_14_2_1">14.2.1. Why do some structures have a <s=
pan class=3Dc>dx</span> prefix and some have a
<span class=3Dc>d</span> prefix?</a>
<li><a href=3D"#sec_14_2_2">14.2.2. Returned Vectors</a>
</ul></ul></ul>

<h1 class=3Dsection1><a name=3D"sec_1_0_0">1. Introduction</a></h1>The O=
pen Dynamics Engine (ODE) is a free, industrial quality library for
simulating articulated rigid body dynamics.
For example, it is good for simulating ground vehicles, legged creatures=
,
and moving objects in VR environments.
It is fast, flexible and robust, and it has built-in collision detection=
.
ODE is being developed by <a href=3D"http://www.q12.org">Russell Smith</=
a>
with help from several
<a href=3D"http://opende.sourceforge.net/community.html">contributors</a=
>.<p>If ``rigid body simulation'' does not make much sense to you, check=
 out
<a href=3D"http://opende.sourceforge.net/slides/slides.html">What is a P=
hysics
SDK?</a>.<p>This is the user guide for ODE version 0.5.
Despite the low version number, ODE is reasonably mature and stable.<h2 =
class=3Dsection2><a name=3D"sec_1_1_0">1.1. Features</a></h2>ODE is good=
 for simulating <i>articulated</i> rigid body structures.
An articulated structure is created when rigid bodies of various shapes =
are
connected together with joints of various kinds.
Examples are ground vehicles (where the wheels are connected to the chas=
sis),
legged creatures (where the legs are connected to the body), or stacks o=
f
objects.<p>ODE is designed to be used in interactive or real-time simula=
tion.
It is particularly good for simulating moving objects in changeable
virtual reality environments.
This is because it is fast, robust and stable, and the user has complete=

freedom to change the structure of the system even while the simulation
is running.<p>ODE uses a highly stable integrator, so that the simulatio=
n errors should
not grow out of control.
The physical meaning of this is that the simulated system should not
"explode" for no reason (believe me, this happens a lot with other simul=
ators
if you are not careful).
ODE emphasizes speed and stability over physical accuracy.<p>ODE has <i>=
hard</i> contacts. This means that a special non-penetration
constraint is used whenever two bodies collide.
The alternative, used in many other simulators, is to use virtual spring=
s to
represent contacts.
This is difficult to do right and extremely error-prone.<p>ODE has a bui=
lt-in collision detection system.
However you can ignore it and do your own collision detection if you wan=
t to.
The current collision primitives are sphere, box, capped cylinder, plane=
,
ray, and triangular mesh - more collision objects will come later.
ODE's collision system provides fast identification of potentially
intersecting objects, through the concept of ``spaces''.<p>Here are the =
features:
<ul>
<li>	Rigid bodies with arbitrary mass distribution.
<li>	Joint types: ball-and-socket, hinge, slider (prismatic),
	hinge-2, fixed, angular motor, universal.
<li>	Collision primitives: sphere, box, capped cylinder, plane,
	ray, and triangular mesh.
<li>	Collision spaces: Quad tree, hash space, and simple.
<li>	Simulation method: The equations of motion are derived from a
	Lagrange multiplier velocity based model due to Trinkle/Stewart and
	Anitescu/Potra.
<li>	A first order integrator is being used. It's fast, but not accurate=

	enough for quantitative engineering yet. Higher order integrators
	will come later.
<li>	Choice of time stepping methods: either the standard ``big matrix''=

	method or the newer iterative QuickStep method can be used.
<li>	Contact and friction model: This is based on the Dantzig LCP solver=

	described by Baraff, although ODE implements a faster approximation
	to the Coloumb friction model.
<li>	Has a native C interface (even though ODE is mostly written in C++)=
.
<li>	Has a C++ interface built on top of the C one.
<li>	Many unit tests, and more being written all the time.
<li>	Platform specific optimizations.
<li>	Other stuff I forgot to mention...
</ul><h2 class=3Dsection2><a name=3D"sec_1_2_0">1.2. ODE's License</a></=
h2>ODE is Copyright &copy; 2001-2004 Russell L. Smith.
All rights reserved.<p>This library is free software; you can redistribu=
te it and/or
modify it under the terms of EITHER:
<ol>
<li>	The <a href=3D"http://www.opensource.org/licenses/lgpl-license.html=
">GNU
	Lesser General Public License</a> as published by the Free Software
	Foundation; either version 2.1 of the License, or (at your option)
	any later version. The text of the GNU Lesser General Public License
	is included with this library in the file <span class=3Dc>LICENSE.TXT</=
span>.
<li>	The <a href=3D"http://opende.sourceforge.net/ode-license.html">BSD-=
style
	license</a> that is included with this library in
	the file <span class=3Dc>LICENSE-BSD.TXT</span>.
</ol>
This library is distributed in the hope that it will be useful,
but <i>WITHOUT ANY WARRANTY</i>; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the files
<span class=3Dc>LICENSE.TXT</span> and <span class=3Dc>LICENSE-BSD.TXT</=
span> for more details.<h2 class=3Dsection2><a name=3D"sec_1_3_0">1.3. T=
he ODE Community</a></h2>Do you have questions or comments about ODE?
Think you can help? Please <a href=3D"http://ode.org/mailman/listinfo/od=
e">write to
the ODE mailing list</a>.<h1 class=3Dsection1><a name=3D"sec_2_0_0">2. H=
ow to Install and Use ODE</a></h1><h2 class=3Dsection2><a name=3D"sec_2_=
1_0">2.1. Installing ODE</a></h2><b>Step 1:</b>
Unpack the ODE archive.<p><b>Steps 2-4 (alternate):</b>
If you're on windows and using MSVC, you can use the workspace and proje=
ct
files in the VC6 subdirectory of the distribution.<p><b>Step 2:</b>
Get the GNU <span class=3Dc>make</span> tool. Many Unix platforms come w=
ith this, although
sometimes it is called <span class=3Dc>gmake</span>. A version of GNU ma=
ke for windows is
available <a href=3D"http://q12.org/ode/bin/make.exe">here</a>.<p><b>Ste=
p 3:</b>
Edit the settings in the file <span class=3Dc>config/user-settings</span=
>.
The list of supported platforms is given in that file.<p><b>Step 4:</b>
Run GNU <span class=3Dc>make</span> to configure and build ODE and the g=
raphical test programs.
The configuration process creates the file <span class=3Dc>include/ode/c=
onfig.h</span>.<p><b>Step 5:</b>
To install the ODE library onto your system you should copy the <span cl=
ass=3Dc>lib/</span> and
<span class=3Dc>include/</span> directories to a suitable place, e.g. on=
 Unix:
<ul>
<li> <span class=3Dc>include/ode/  --&gt; /usr/local/include/ode/</span>=

<li> <span class=3Dc>lib/libode.a --&gt; /usr/local/lib/libode.a</span>
</ul><h3 class=3Dsection3><a name=3D"sec_2_1_1">2.1.1. Building and Runn=
ing ODE Tests on MacOS X</a></h3>ODE uses XWindows and OpenGL to render =
the scene being simulated.
In order to build the example you will need to install Apple X11
server and the X11SDK (as well as the normal developer tools).<p>These a=
re available from Apple. As of writing this can be found at:
<a href=3D"http://www.apple.com/macosx/x11">http://www.apple.com/macosx/=
x11</a>.
NOTE: there is a tiny link at the bottom right of the page for the SDK<p=
>Once the software is installed follow the normal build instructions.<p>=
Since ODE uses X11 you need to run the X11 server (which you should
have installed, it's in the Applications Folder).<p>If you run the test =
app in the XTerm that the X11 server opens by
default then they should run fine. If however you run them from a MacOS =
X
Terminal then you need to define the environment variable DISPLAY. If
DISPLAY is not defined then you will get a message saying:
"cannot open X11 display".<p>For example to run the boxstack test you wo=
uld type
<pre class=3Dcode>
    cd ode/test
    DISPLAY=3D:0.0 ./test_boxstack.exe</pre>
You can define this environment variable in your shell startup scripts
(for example in ~/.bashrc if you are using bash)<h2 class=3Dsection2><a =
name=3D"sec_2_2_0">2.2. Using ODE</a></h2>The best way to understand how=
 to use ODE is to look at the test/example
programs that come with it. Note the following things:
<ul>
<li>	Source files that use ODE only need to include a single header file=
:
<pre class=3Dcode>
 #include &lt;ode/ode.h&gt;</pre>
	The <span class=3Dc>ode</span> directory in this statement is actually =
the
	<span class=3Dc>include/ode</span> directory of the ODE distribution.
	This header file will include others in the <span class=3Dc>ode</span> =
directory,
	so you need to set the include path of your compiler,
	e.g. in linux
<pre class=3Dcode>
 gcc -c -I /home/username/ode/include myprogram.cpp</pre><p><li>	When OD=
E is used with the <a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep<=
/a> function, heavy use is made
	of the stack for storing temporary values.
	For very large systems several megabytes of stack can be used.
	If you experience unexplained out-of-memory errors or data
	corruption, especially on Windows, try increasing the stack size, or
	switching to <a class=3Dfunc href=3D"#func_dWorldQuickStep">dWorldQuick=
Step</a>.
</ul><h1 class=3Dsection1><a name=3D"sec_3_0_0">3. Concepts</a></h1><h2 =
class=3Dsection2><a name=3D"sec_3_1_0">3.1. Background</a></h2>[Here is =
where I will write some background information about rigid body
dynamics and simulation.
But in the meantime, please refer to Baraff's excellent
<a href=3D"http://www.cs.cmu.edu/~baraff/sigcourse/index.html">SIGGRAPH =
tutorial</a>].<h2 class=3Dsection2><a name=3D"sec_3_2_0">3.2. Rigid bodi=
es</a></h2>A rigid body has various properties from the point of view of=
 the simulation.
Some properties change over time:
<ul>
<li>	Position vector (x,y,z) of the body's point of reference.
	Currently the point of reference must correspond to the body's
	center of mass.
<li>	Linear velocity of the point of reference, a vector (vx,vy,vz).
<li>	Orientation of a body, represented by a quaternion (qs,qx,qy,qz) or=

	a 3x3 rotation matrix.
<li>	Angular velocity vector (wx,wy,wz) which describes how the orientat=
ion
	changes over time.<p></ul>
Other body properties are usually constant over time:
<ul>
<li>	Mass of the body.
<li>	Position of the center of mass with respect to the point of referen=
ce.
	In the current implementation the center of mass and the point of
	reference must coincide.
<li>	Inertia matrix. This is a 3x3 matrix that describes how the body's
	mass is distributed around the center of mass.
</ul>
Conceptually each body has an x-y-z coordinate frame embedded in it, tha=
t moves
and rotates with the body, as shown in figure 1.<p><center>
	<img border=3D1 src=3D"pix/body.jpg"><br><br>
	<b>Figure 1</b>: The body coordinate frame.
	</center><p>The origin of this coordinate frame is the body's point of =
reference.
Some values in ODE (vectors, matrices etc) are relative to the body
coordinate frame, and others are relative to the global coordinate frame=
.<p>Note that the <i>shape</i> of a rigid body is not a dynamical proper=
ty
(except insofar as it influences the various mass properties).
It is only <i>collision detection</i> that cares about the detailed shap=
e of
the body.<h3 class=3Dsection3><a name=3D"sec_3_2_1">3.2.1. Islands and D=
isabled Bodies</a></h3>Bodies are connected to each other with joints.
An ``island'' of bodies is a group that can not be pulled apart - in oth=
er
words each body is connected somehow to every other body in the island.<=
p>Each island in the world is treated separately when the simulation ste=
p is
taken.
This is useful to know: if there are <i>N</i> similar islands in the
simulation then the step computation time will be <i>O</i>(<i>N</i>).<p>=
Each body can be enabled or disabled.
Disabled bodies are effectively ``turned off'' and are not updated durin=
g a
simulation step.
Disabling bodies is an effective way to save computation time when it is=
 known
that the bodies are motionless or otherwise irrelevant to the simulation=
.<p>If there are any enabled bodies in an island then every body in the =
island
will be enabled at the next simulation step.
Thus to effectively disable an island of bodies, <i>every</i> body in th=
e
island must be disabled.
If a disabled island is touched by another enabled body then the entire
island will be enabled, as a contact joint will join the enabled body to=

the island.<h2 class=3Dsection2><a name=3D"sec_3_3_0">3.3. Integration</=
a></h2>The process of simulating the rigid body system through time is c=
alled
integration.
Each integration step advances the current time by a given step size,
adjusting the state of all the rigid bodies for the new time value.
There are two main issues to consider when working with any integrator:
<ul>
<li>	How accurate is it? That is, how closely does the behavior of the
	simulated system match what would happen in real life?
<li>	How stable is it? That is, will calculation errors ever cause
	completely non-physical behavior of the simulated system?
	(e.g. causing the system to "explode" for no reason).
</ul>
ODE's current integrator is very stable, but not particularly accurate
unless the step size is small.
For most uses of ODE this is not a problem -- ODE's behavior still looks=

perfectly physical in almost all cases.
However ODE should not be used for quantitative engineering until this a=
ccuracy
issue has been addressed in a future release.<h2 class=3Dsection2><a nam=
e=3D"sec_3_4_0">3.4. Force accumulators</a></h2>Between each integrator =
step the user can call functions to apply forces
to the rigid body.
These forces are added to "force accumulators" in the rigid body object.=

When the next integrator step happens, the sum of all the applied forces=

will be used to push the body around.
The forces accumulators are set to zero after each integrator step.<h2 c=
lass=3Dsection2><a name=3D"sec_3_5_0">3.5. Joints and constraints</a></h=
2>In real life a joint is something like a hinge, that is used to connec=
t two
objects.
In ODE a joint is very similar: It is a relationship that is enforced be=
tween
two bodies so that they can only have certain positions and orientations=

relative to each other.
This relationship is called a <i>constraint</i> -- the words <i>joint</i=
> and
<i>constraint</i> are often used interchangeably.
Figure 2 shows three different constraint types.<p><center>
	<img border=3D1 src=3D"pix/joints.jpg"><br><br>
	<b>Figure 2</b>: Three different constraint types.
	</center><p>The first is a ball and socket joint that constraints the `=
`ball'' of one
body to be in the same location as the ``socket'' of another body.
The second is a hinge joint that constraints the two parts of the
hinge to be in the same location and to line up along the hinge axle.
The third is a slider joint that constraints the ``piston'' and ``socket=
''
to line up, and additionally constraints the two bodies to have the same=

orientation.<p>Each time the integrator takes a step all the joints are =
allowed to apply
<i>constraint forces</i> to the bodies they affect.
These forces are calculated such that the bodies move in such a way to
preserve all the joint relationships.<p>Each joint has a number of param=
eters controlling its geometry.
An example is the position of the ball-and-socket point for a ball-and-s=
ocket
joint.
The functions to set joint parameters all take <i>global</i> coordinates=
,
not body-relative coordinates.
A consequence of this is that the rigid bodies that a joint connects mus=
t be
positioned correctly <i>before</i> the joint is attached.<h2 class=3Dsec=
tion2><a name=3D"sec_3_6_0">3.6. Joint groups</a></h2>A joint group is a=
 special container that holds joints in a world.
Joints can be added to a group, and then when those joints are no
longer needed the entire group of joints can be very quickly destroyed
with one function call.
However, individual joints in a group can not be destroyed before the en=
tire
group is emptied.<p>This is most useful with contact joints, which are a=
dded and remove from
the world in groups every time step.<h2 class=3Dsection2><a name=3D"sec_=
3_7_0">3.7. Joint error and the error reduction parameter (ERP)</a></h2>=
When a joint attaches two bodies, those bodies are required to have cert=
ain
positions and orientations relative to each other.
However, it is possible for the bodies to be in positions where the join=
t
constraints are not met.
This ``joint error'' can happen in two ways:
<ol>
<li>	If the user sets the position/orientation of one body without corre=
ctly
	setting the position/orientation of the other body.
<li>	During the simulation, errors can creep in that result in the bodie=
s
	drifting away from their required positions.
</ol>
Figure 3 shows an example of error in a ball and socket
joint (where the ball and socket do not line up).<p><center>
	<img border=3D1 src=3D"pix/ball-and-socket-bad.jpg"><br><br>
	<b>Figure 3</b>: An example of error in a ball and socket joint.
	</center><p>There is a mechanism to reduce joint error: during each sim=
ulation step each
joint applies a special force to bring its bodies back into correct alig=
nment.
This force is controlled by the <i>error reduction parameter</i> (ERP),
which has a value between 0 and 1.<p>The ERP specifies what proportion o=
f the joint error will be
fixed during the next simulation step.
If ERP=3D0 then no correcting force is applied and the bodies will event=
ually
drift apart as the simulation proceeds.
If ERP=3D1 then the simulation will attempt to fix all joint error durin=
g the
next time step.
However, setting ERP=3D1 is not recommended, as the joint error will not=
 be
completely fixed due to various internal approximations.
A value of ERP=3D0.1 to 0.8 is recommended (0.2 is the default).<p>A glo=
bal ERP value can be set that affects most joints in the simulation.
However some joints have local ERP values that control various aspects o=
f
the joint.<h2 class=3Dsection2><a name=3D"sec_3_8_0">3.8. Soft constrain=
t and constraint force mixing (CFM)</a></h2>Most constraints are by natu=
re ``hard''.
This means that the constraints represent conditions that are never viol=
ated.
For example, the ball must always be in the socket, and the two parts of=
 the
hinge must always be lined up.
In practice constraints can be violated by unintentional introduction of=

errors into the system, but the error reduction parameter can be set to
correct these errors.<p>Not all constraints are hard.
Some ``soft'' constraints are designed to be violated.
For example, the contact constraint that prevents colliding objects from=

penetrating is hard by default, so it acts as though the colliding surfa=
ces
are made of steel.
But it can be made into a soft constraint to simulate softer materials,
thereby allowing some natural penetration of the two objects when they a=
re
forced together.<p>There are two parameters that control the distinction=
 between hard and soft
constraints. The first is the error reduction parameter (ERP) that has a=
lready
been introduced.
The second is the constraint force mixing (CFM) value, that is described=
 below.<h3 class=3Dsection3><a name=3D"sec_3_8_1">3.8.1. Constraint Forc=
e Mixing (CFM)</a></h3>What follows is a somewhat technical description =
of the meaning of CFM.
If you just want to know how it is used in practice then skip to the nex=
t
section.<p>Traditionally the constraint equation for every joint has the=
 form<p><div class=3Dmath><i>J</i> * <i>v</i> =3D <i>c</i></div><p>where=
 <i>v</i> is a velocity vector for the bodies involved, <i>J</i> is a
``Jacobian'' matrix with one row for every degree of freedom the joint
removes from the system, and <i>c</i> is a right hand side vector.
At the next time step, a vector <i>lambda</i> is calculated (of the same=

size as <i>c</i>) such that the forces applied to the bodies to preserve=
 the
joint constraint are<p><div class=3Dmath><i>force</i> =3D <i>J</i><sup><=
i>T</i></sup> *  <i>lambda</i> </div><p>ODE adds a new twist.
ODE's constraint equation has the form<p><div class=3Dmath><i>J</i> * <i=
>v</i> =3D <i>c</i> + <i>CFM</i> *  <i>lambda</i> </div><p>where <i>CFM<=
/i> is a square diagonal matrix.
<i>CFM</i> mixes the resulting constraint force in with the constraint t=
hat
produces it.
A nonzero (positive) value of <i>CFM</i> allows the original constraint
equation to be violated by an amount proportional to CFM times the resto=
ring
force  <i>lambda</i>  that is needed to enforce the constraint.
Solving for  <i>lambda</i>  gives<p><div class=3Dmath>(<i>J</i> <i>M</i>=
<sup>-1</sup> <i>J</i><sup><i>T</i></sup> + <i>CFM</i>/<i>h</i>)  <i>lam=
bda</i>  =3D <i>c</i>/<i>h</i></div><p>Thus <i>CFM</i> simply adds to th=
e diagonal of the original system matrix.
Using a positive value of <i>CFM</i> has the additional benefit of takin=
g the
system away from any singularity and thus improving the factorizer accur=
acy.<h3 class=3Dsection3><a name=3D"sec_3_8_2">3.8.2. How To Use ERP and=
 CFM</a></h3>ERP and CFM can be independently set in many joints. They c=
an be set in
contact joints, in joint limits and various other places, to control the=

spongyness and springyness of the joint (or joint limit).<p>If CFM is se=
t to zero, the constraint will be hard.
If CFM is set to a positive value, it will be possible to violate the
constraint by ``pushing on it'' (for example, for contact constraints by=

forcing the two contacting objects together).
In other words the constraint will be soft, and the softness will increa=
se
as CFM increases.
What is actually happening here is that the constraint is allowed to be
violated by an amount proportional to CFM times the restoring force that=
 is
needed to enforce the constraint.
Note that setting CFM to a negative value can have undesirable bad effec=
ts,
such as instability. Don't do it.<p>By adjusting the values of ERP and C=
FM, you can achieve various effects.
For example you can simulate springy constraints, where the two bodies
oscillate as though connected by springs.
Or you can simulate more spongy constraints, without the oscillation.
In fact, ERP and CFM can be selected to have the same effect as any
desired spring and damper constants.
If you have a spring constant <i>k</i><sub><i>p</i></sub> and damping co=
nstant <i>k</i><sub><i>d</i></sub>,
then the corresponding ODE constants are:<p><div class=3Dmath><i>ERP</i>=
 =3D <i>h</i> <i>k</i><sub><i>p</i></sub> / (<i>h</i> <i>k</i><sub><i>p<=
/i></sub> + <i>k</i><sub><i>d</i></sub>)</div>
	<div class=3Dmath><i>CFM</i> =3D 1 / (<i>h</i> <i>k</i><sub><i>p</i></s=
ub> + <i>k</i><sub><i>d</i></sub>)</div><p>where <i>h</i> is the stepsiz=
e.
These values will give the same effect as a spring-and-damper system sim=
ulated
with implicit first order integration.<p>Increasing CFM, especially the =
global CFM, can reduce the numerical errors
in the simulation. If the system is near-singular, then this can markedl=
y
increase stability.
In fact, if the system is mis-behaving, one of the first things to try i=
s
to increase the global CFM.<h2 class=3Dsection2><a name=3D"sec_3_9_0">3.=
9. Collision handling</a></h2>[There is a lot that needs to be written a=
bout collision handling.]<p>Collisions between bodies or between bodies =
and the static environment are
handled as follows:
<ol>
<li>	Before each simulation step, the user calls collision detection
	functions to determine what is touching what.
	These functions return a list of contact points.
	Each contact point specifies a position in space, a surface normal
	vector, and a penetration depth.<p><li>	A special contact joint is crea=
ted for each contact point.
	The contact joint is given extra information about the contact,
	for example the friction present at the contact surface, how bouncy
	or soft it is, and various other properties.<p><li>	The contact joints =
are put in a joint "group", which allows them to be
	added to and removed from the system very quickly.
	The simulation speed goes down as the number of contacts goes up,
	so various strategies can be used to limit the number of contact
	points.<p><li>	A simulation step is taken.<p><li>	All contact joints ar=
e removed from the system.
</ol>
Note that the built-in collision functions do not have to be used -
other collision detection libraries can be used as long as they provide
the right kinds of contact point information.<h2 class=3Dsection2><a nam=
e=3D"sec_3_10_0">3.10. Typical simulation code</a></h2>A typical simulat=
ion will proceed like this:
<ol>
<li>	Create a dynamics world.
<li>	Create bodies in the dynamics world.
<li>	Set the state (position etc) of all bodies.
<li>	Create joints in the dynamics world.
<li>	Attach the joints to the bodies.
<li>	Set the parameters of all joints.
<li>	Create a collision world and collision geometry objects, as
	necessary.
<li>	Create a joint group to hold the contact joints.
<li>	Loop: <ol>
	<li>	Apply forces to the bodies as necessary.
	<li>	Adjust the joint parameters as necessary.
	<li>	Call collision detection.
	<li>	Create a contact joint for every collision point, and put it
		in the contact joint group.
	<li>	Take a simulation step.
	<li>	Remove all joints in the contact joint group.
	</ol>
<li>	Destroy the dynamics and collision worlds.
</ol><h2 class=3Dsection2><a name=3D"sec_3_11_0">3.11. Physics model</a>=
</h2>The various methods and approximations that are used in ODE are dis=
cussed
here.<h3 class=3Dsection3><a name=3D"sec_3_11_1">3.11.1. Friction Approx=
imation</a></h3>[We really need more pictures here.]<p>The Coulomb frict=
ion model is a simple, but effective way to model friction
at contact points.
It is a simple relationship between the normal and tangential forces pre=
sent
at a contact point (see the contact joint section for a description of t=
hese
forces). The rule is:<p><div class=3Dmath>| <i>f</i><sub><i>T</i></sub> =
| &lt;=3D  <i>mu</i>  * | <i>f</i><sub><i>N</i></sub> |</div><p>where <i=
>f</i><sub><i>N</i></sub> and <i>f</i><sub><i>T</i></sub> are the normal=
 and tangential force vectors
respectively, and  <i>mu</i>  is the friction coefficient (typically a n=
umber
around 1.0).
This equation defines a "friction cone" - imagine a cone with <i>f</i><s=
ub><i>N</i></sub> as the
axis and the contact point as the vertex.
If the total friction force vector is within the cone then the contact i=
s in
"sticking mode", and the friction force is enough to prevent the contact=
ing
surfaces from moving with respect to each other.
If the force vector is on the surface of the cone then the contact is in=

"sliding mode", and the friction force is typically not large enough to
prevent the contacting surfaces from sliding.
The parameter  <i>mu</i>  thus specifies the maximum ratio of tangential=
 to normal
force.<p>ODE's friction models are approximations to the friction cone, =
for reasons of
efficiency. There are currently two approximations to chose from:
<ol>
<li>	The meaning of  <i>mu</i>  is changed so that it specifies the
	maximum friction (tangential) force that can be present at a contact,
	in either of the tangential friction directions.
	This is rather non physical because it is independent of the normal
	force, but it can be useful and it is the computationally cheapest
	option. Note that in this case  <i>mu</i>  is a force limit an must be
	chosen appropriate to the simulation.
<li>	The friction cone is approximated by a friction pyramid aligned wit=
h
	the first and second friction directions [I really need a picture
	here].
	A further approximation is made: first ODE computes the normal forces
	assuming that all the contacts are frictionless. Then it computes the
	maximum limits <i>f</i><sub><i>m</i></sub> for the friction (tangential=
) forces from<p><div class=3Dmath><i>f</i><sub><i>m</i></sub> =3D  <i>mu=
</i>  * | <i>f</i><sub><i>N</i></sub> |</div><p>and then proceeds to sol=
ve for the entire system with these fixed
	limits (in a manner similar to approximation 1 above).
	This differs from a true friction pyramid in that the "effective"
	 <i>mu</i>  is not quite fixed.
	This approximation is easier to use as  <i>mu</i>  is a unit-less ratio=

	the same as the normal Coloumb friction coefficient, and thus can be
	set to a constant value around 1.0 without regard for the specific
	simulation.
</ol><h1 class=3Dsection1><a name=3D"sec_4_0_0">4. Data Types and Conven=
tions</a></h1><h2 class=3Dsection2><a name=3D"sec_4_1_0">4.1. The basic =
data types</a></h2>The ODE library can be built to use either single or =
double precision floating
point numbers.
Single precision is faster and uses less memory, but the simulation will=

have more numerical error that can result in visible problems.
You will get less accuracy and stability with single precision.<p>[must =
describe what factors influence accuracy and stability].<p>The floating =
point data type is <span class=3Dc>dReal</span>.
Other commonly used types are <span class=3Dc>dVector3</span>, <span cla=
ss=3Dc>dVector4</span>, <span class=3Dc>dMatrix3</span>,
<span class=3Dc>dMatrix4</span>, <span class=3Dc>dQuaternion</span>.<h2 =
class=3Dsection2><a name=3D"sec_4_2_0">4.2. Objects and IDs</a></h2>Ther=
e are various kinds of object that can be created:
<ul>
<li>	dWorld - a dynamics world.
<li>	dSpace - a collision space.
<li>	dBody - a rigid body.
<li>	dGeom - geometry (for collision).
<li>	dJoint - a joint
<li>	dJointGroup - a group of joints.
</ul>
Functions that deal with these objects take and return object IDs.
The object ID types are <span class=3Dc>dWorldID</span>, <span class=3Dc=
>dBodyID</span>, etc.<h2 class=3Dsection2><a name=3D"sec_4_3_0">4.3. Arg=
ument conventions</a></h2>All 3-vectors (x,y,z) supplied to ``set'' func=
tions are given as individual
x,y,z arguments.<p>All 3-vector result arguments to get() function are p=
ointers to arrays of
<span class=3Dc>dReal</span>.<p>Larger vectors are always supplied and r=
eturned as pointers to arrays of
<span class=3Dc>dReal</span>.<p>All coordinates are in the global frame =
except where otherwise specified.<h2 class=3Dsection2><a name=3D"sec_4_4=
_0">4.4. C versus C++</a></h2>The ODE library is written in C++, but its=
 public interface is made of simple
C functions, not classes. Why is this?
<ul>
<li>	Using a C interface only is simpler - the features of C++ features =
do
	not help much for ODE.
<li>	It prevents C++ mangling and runtime-support problems across multip=
le
	compilers.
<li>	The user doesn't have to be familiar with C++ quirks to use ODE.
</ul><h2 class=3Dsection2><a name=3D"sec_4_5_0">4.5. Debugging</a></h2>T=
he ODE library can be compiled in "debugging" or "release" mode.
Debugging mode is slower, but function arguments are checked and many
run-time tests are done to ensure internal consistency.
Release mode is faster, but no checking is done.<h1 class=3Dsection1><a =
name=3D"sec_5_0_0">5. World</a></h1>The world object is a container for =
rigid bodies and joints.
Objects in different worlds can not interact, for example rigid bodies f=
rom
two different worlds can not collide.<p>All the objects in a world exist=
 at the same point in time, thus one reason
to use separate worlds is to simulate systems at different rates.<p>Most=
 applications will only need one world.<p><a name=3D"func_dWorldCreate">=

<pre class=3Dfunc1>
dWorldID dWorldCreate();
</pre><div class=3Dfunc2>
Create a new, empty world and return its ID number.
</div><p><a name=3D"func_dWorldDestroy">
<pre class=3Dfunc1>
void dWorldDestroy (dWorldID);
</pre><div class=3Dfunc2>
Destroy a world and everything in it. This includes all bodies, and all
joints that are not part of a joint group.
Joints that are part of a joint group will be deactivated, and can be
destroyed by calling, for example, <a class=3Dfunc href=3D"#func_dJointG=
roupEmpty">dJointGroupEmpty</a>.
</div><p><a name=3D"func_dWorldSetGravity">
<a name=3D"func_dWorldGetGravity">
<pre class=3Dfunc1>
void dWorldSetGravity (dWorldID, dReal x, dReal y, dReal z);
void dWorldGetGravity (dWorldID, dVector3 gravity);
</pre><div class=3Dfunc2>
Set and get the world's global gravity vector. The units are m/s/s, so E=
arth's
gravity vector would be (0,0,-9.81), assuming that +z is up.
The default is no gravity, i.e. (0,0,0).
</div><p><a name=3D"func_dWorldSetERP">
<a name=3D"func_dWorldGetERP">
<pre class=3Dfunc1>
void dWorldSetERP (dWorldID, dReal erp);
dReal dWorldGetERP (dWorldID);
</pre><div class=3Dfunc2>
Set and get the global ERP value, that controls how much error correctio=
n is
performed in each time step.
Typical values are in the range 0.1--0.8.
The default is 0.2.
</div><p><a name=3D"func_dWorldSetCFM">
<a name=3D"func_dWorldGetCFM">
<pre class=3Dfunc1>
void dWorldSetCFM (dWorldID, dReal cfm);
dReal dWorldGetCFM (dWorldID);
</pre><div class=3Dfunc2>
Set and get the global CFM (constraint force mixing) value.
Typical values are in the range 10<sup>-9</sup> -- 1.
The default is 10<sup>-5</sup> if single precision is being used, or 10<=
sup>-10</sup> if double
precision is being used.
</div><p><a name=3D"func_dWorldSetAutoDisableFlag">
<a name=3D"func_dWorldGetAutoDisableFlag">
<a name=3D"func_dWorldSetAutoDisableLinearThreshold">
<a name=3D"func_dWorldGetAutoDisableLinearThreshold">
<a name=3D"func_dWorldSetAutoDisableAngularThreshold">
<a name=3D"func_dWorldGetAutoDisableAngularThreshold">
<a name=3D"func_dWorldSetAutoDisableSteps">
<a name=3D"func_dWorldGetAutoDisableSteps">
<a name=3D"func_dWorldSetAutoDisableTime">
<a name=3D"func_dWorldGetAutoDisableTime">
<pre class=3Dfunc1>
void  dWorldSetAutoDisableFlag (dWorldID, int do_auto_disable);
int   dWorldGetAutoDisableFlag (dWorldID);
void  dWorldSetAutoDisableLinearThreshold (dWorldID, dReal linear_thresh=
old);
dReal dWorldGetAutoDisableLinearThreshold (dWorldID);
void  dWorldSetAutoDisableAngularThreshold (dWorldID, dReal angular_thre=
shold);
dReal dWorldGetAutoDisableAngularThreshold (dWorldID);
void  dWorldSetAutoDisableSteps (dWorldID, int steps);
int   dWorldGetAutoDisableSteps (dWorldID);
void  dWorldSetAutoDisableTime (dWorldID, dReal time);
dReal dWorldGetAutoDisableTime (dWorldID);
</pre><div class=3Dfunc2>
Set and get the default auto-disable parameters for newly created bodies=
.
See <a href=3D"#sec_6_5_0">section 6.5</a> for a description of the auto=
-disable feature.
The default parameters are:
<ul>
<li>	AutoDisableFlag =3D disabled
<li>	AutoDisableLinearThreshold =3D 0.01
<li>	AutoDisableAngularThreshold =3D 0.01
<li>	AutoDisableSteps =3D 10
<li>	AutoDisableTime =3D 0
</ul>
</div><p><a name=3D"func_dWorldImpulseToForce">
<pre class=3Dfunc1>
void dWorldImpulseToForce (dWorldID, dReal stepsize,
			   dReal ix, dReal iy, dReal iz, dVector3 force);
</pre><div class=3Dfunc2>
If you want to apply a linear or angular impulse to a rigid body,
instead of a force or a torque, then you can use this function to conver=
t
the desired impulse into a force/torque vector before calling the
<span class=3Dc>dBodyAdd...</span> function.<p>This function is given th=
e desired impulse as (<span class=3Darg>ix</span>,<span class=3Darg>iy</=
span>,<span class=3Darg>iz</span>)
and puts the force vector in <span class=3Darg>force</span>.
The current algorithm simply scales the impulse by 1/<span class=3Darg>s=
tepsize</span>,
where <span class=3Darg>stepsize</span> is the step size for the <i>next=
</i> step that will
be taken.<p>This function is given a <span class=3Dc>dWorldID</span> bec=
ause, in the future, the force
computation may depend on integrator parameters that are set as
properties of the world.
</div><p><a name=3D"func_dCloseODE">
<pre class=3Dfunc1>
void dCloseODE();
</pre><div class=3Dfunc2>
This deallocates some extra memory used by ODE that can not be deallocat=
ed
using the normal destroy functions, e.g. <a class=3Dfunc href=3D"#func_d=
WorldDestroy">dWorldDestroy</a>.
You can use this function at the end of your application to prevent
memory leak checkers from complaining about ODE.
</div><h2 class=3Dsection2><a name=3D"sec_5_1_0">5.1. Stepping Functions=
</a></h2><a name=3D"func_dWorldStep">
<pre class=3Dfunc1>
void dWorldStep (dWorldID, dReal stepsize);
</pre><div class=3Dfunc2>
Step the world.
This uses a "big matrix" method that takes time on the order of <i>m</i>=
<sup>3</sup>
and memory on the order of <i>m</i><sup>2</sup>, where <i>m</i> is the t=
otal number of constraint rows.<p>For large systems this will use a lot =
of memory and can be very slow,
but this is currently the most accurate method.
</div><p><a name=3D"func_dWorldQuickStep">
<pre class=3Dfunc1>
void dWorldQuickStep (dWorldID, dReal stepsize);
</pre><div class=3Dfunc2>
Step the world.
This uses an iterative method that takes time on the order of <i>m</i>*<=
i>N</i>
and memory on the order of <i>m</i>, where <i>m</i> is the total number =
of constraint rows
and <i>N</i> is the number of iterations.<p>For large systems this is a =
lot faster than <a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</a>=
,
but it is less accurate.<p>QuickStep is great for stacks of objects espe=
cially when the auto-disable feature
is used as well.
However, it has poor accuracy for near-singular systems.
Near-singular systems can occur when using high-friction contacts, motor=
s,
or certain articulated structures. For example, a robot with multiple le=
gs
sitting on the ground may be near-singular.<p>There are ways to help ove=
rcome QuickStep's inaccuracy problems:
<ul>
<li>	Increase CFM.
<li>	Reduce the number of contacts in your system (e.g. use the minimum
	number of contacts for the feet of a robot or creature).
<li>	Don't use excessive friction in the contacts.
<li>	Use contact slip if appropriate
<li>	Avoid kinematic loops (however, kinematic loops are inevitable in
	legged creatures).
<li>	Don't use excessive motor strength.
<li>	Use force-based motors instead of velocity-based motors.
</ul>
Increasing the number of QuickStep iterations may help a little bit, but=

it is not going to help much if your system is really near singular.<p><=
/div><p><a name=3D"func_dWorldSetQuickStepNumIterations">
<a name=3D"func_dWorldGetQuickStepNumIterations">
<pre class=3Dfunc1>
void dWorldSetQuickStepNumIterations (dWorldID, int num);
int dWorldGetQuickStepNumIterations (dWorldID);
</pre><div class=3Dfunc2>
Set and get the number of iterations that the QuickStep method performs =
per step.
More iterations will give a more accurate solution, but will take longer=
 to compute.
The default is 20 iterations.
</div><h2 class=3Dsection2><a name=3D"sec_5_2_0">5.2. Contact Parameters=
</a></h2><a name=3D"func_dWorldSetContactMaxCorrectingVel">
<a name=3D"func_dWorldGetContactMaxCorrectingVel">
<pre class=3Dfunc1>
void dWorldSetContactMaxCorrectingVel (dWorldID, dReal vel);
dReal dWorldGetContactMaxCorrectingVel (dWorldID);
</pre><div class=3Dfunc2>
Set and get the maximum correcting velocity that contacts are allowed to=
 generate.
The default value is infinity (i.e. no limit).
Reducing this value can help prevent "popping" of deeply embedded object=
s.
</div><p><a name=3D"func_dWorldSetContactSurfaceLayer">
<a name=3D"func_dWorldGetContactSurfaceLayer">
<pre class=3Dfunc1>
void dWorldSetContactSurfaceLayer (dWorldID, dReal depth);
dReal dWorldGetContactSurfaceLayer (dWorldID);
</pre><div class=3Dfunc2>
Set and get the depth of the surface layer around all geometry objects.
Contacts are allowed to sink into the surface layer up to the given
depth before coming to rest.
The default value is zero.
Increasing this to some small value (e.g. 0.001) can help prevent jitter=
ing problems
due to contacts being repeatedly made and broken.
</div><h1 class=3Dsection1><a name=3D"sec_6_0_0">6. Rigid Body Functions=
</a></h1><h2 class=3Dsection2><a name=3D"sec_6_1_0">6.1. Creating and De=
stroying Bodies</a></h2><a name=3D"func_dBodyCreate">
<pre class=3Dfunc1>
dBodyID dBodyCreate (dWorldID);
</pre><div class=3Dfunc2>
Create a body in the given world with default mass parameters at
position (0,0,0).
Return its ID.
</div><p><a name=3D"func_dBodyDestroy">
<pre class=3Dfunc1>
void dBodyDestroy (dBodyID);
</pre><div class=3Dfunc2>
Destroy a body.
All joints that are attached to this body will be put into limbo
(i.e. unattached and not affecting the simulation, but they will NOT be
deleted).
</div><h2 class=3Dsection2><a name=3D"sec_6_2_0">6.2. Position and orien=
tation</a></h2><a name=3D"func_dBodySetPosition">
<a name=3D"func_dBodySetRotation">
<a name=3D"func_dBodySetQuaternion">
<a name=3D"func_dBodySetLinearVel">
<a name=3D"func_dBodySetAngularVel">
<a name=3D"func_dBodyGetPosition">
<a name=3D"func_dBodyGetRotation">
<a name=3D"func_dBodyGetQuaternion">
<a name=3D"func_dBodyGetLinearVel">
<a name=3D"func_dBodyGetAngularVel">
<pre class=3Dfunc1>
void dBodySetPosition   (dBodyID, dReal x, dReal y, dReal z);
void dBodySetRotation   (dBodyID, const dMatrix3 R);
void dBodySetQuaternion (dBodyID, const dQuaternion q);
void dBodySetLinearVel  (dBodyID, dReal x, dReal y, dReal z);
void dBodySetAngularVel (dBodyID, dReal x, dReal y, dReal z);
const dReal * dBodyGetPosition   (dBodyID);
const dReal * dBodyGetRotation   (dBodyID);
const dReal * dBodyGetQuaternion (dBodyID);
const dReal * dBodyGetLinearVel  (dBodyID);
const dReal * dBodyGetAngularVel (dBodyID);
</pre><div class=3Dfunc2>
These functions set and get the position, rotation, linear and angular
velocity of the body.
After setting a group of bodies, the outcome of the simulation is undefi=
ned
if the new configuration is inconsistent with the joints/constraints tha=
t are
present.
When getting, the returned values are pointers to internal data structur=
es,
so the vectors are valid until any changes are made to the rigid body sy=
stem
structure.<p>Hmmm. <span class=3Dc>dBodyGetRotation</span> returns a 4x3=
 rotation matrix.
</div><h2 class=3Dsection2><a name=3D"sec_6_3_0">6.3. Mass and force</a>=
</h2><a name=3D"func_dBodySetMass">
<a name=3D"func_dBodyGetMass">
<pre class=3Dfunc1>
void dBodySetMass (dBodyID, const dMass *mass);
void dBodyGetMass (dBodyID, dMass *mass);
</pre><div class=3Dfunc2>
Set/get the mass of the body (see the mass functions).
</div><p><a name=3D"func_dBodyAddForce">
<a name=3D"func_dBodyAddTorque">
<a name=3D"func_dBodyAddRelForce">
<a name=3D"func_dBodyAddRelTorque">
<a name=3D"func_dBodyAddForceAtPos">
<a name=3D"func_dBodyAddForceAtRelPos">
<a name=3D"func_dBodyAddRelForceAtPos">
<a name=3D"func_dBodyAddRelForceAtRelPos">
<pre class=3Dfunc1>
void dBodyAddForce            (dBodyID, dReal fx, dReal fy, dReal fz);
void dBodyAddTorque           (dBodyID, dReal fx, dReal fy, dReal fz);
void dBodyAddRelForce         (dBodyID, dReal fx, dReal fy, dReal fz);
void dBodyAddRelTorque        (dBodyID, dReal fx, dReal fy, dReal fz);
void dBodyAddForceAtPos       (dBodyID, dReal fx, dReal fy, dReal fz,
                                        dReal px, dReal py, dReal pz);
void dBodyAddForceAtRelPos    (dBodyID, dReal fx, dReal fy, dReal fz,
                                        dReal px, dReal py, dReal pz);
void dBodyAddRelForceAtPos    (dBodyID, dReal fx, dReal fy, dReal fz,
                                        dReal px, dReal py, dReal pz);
void dBodyAddRelForceAtRelPos (dBodyID, dReal fx, dReal fy, dReal fz,
                                        dReal px, dReal py, dReal pz);
</pre><div class=3Dfunc2>
Add forces to bodies (absolute or relative coordinates).
The forces are accumulated on to each body, and the accumulators are zer=
oed
after each time step.<p>The ...<span class=3Dc>RelForce</span> and ...<s=
pan class=3Dc>RelTorque</span> functions take force vectors that are
relative to the body's own frame of reference.<p>The ...<span class=3Dc>=
ForceAtPos</span> and ...<span class=3Dc>ForceAtRelPos</span> functions =
take an extra
position vector (in global or body-relative coordinates respectively)
that specifies the point at which the force is applied.
All other functions apply the force at the center of mass.
</div><p><a name=3D"func_dBodyGetForce">
<a name=3D"func_dBodyGetTorque">
<pre class=3Dfunc1>
const dReal * dBodyGetForce  (dBodyID);
const dReal * dBodyGetTorque (dBodyID);
</pre><div class=3Dfunc2>
Return the current accumulated force and torque vector.
The returned pointers point to an array of 3 <span class=3Dc>dReal</span=
>s.
The returned values are pointers to internal data structures, so the vec=
tors
are only valid until any changes are made to the rigid body system.
</div><p><a name=3D"func_dBodySetForce">
<a name=3D"func_dBodySetTorque">
<pre class=3Dfunc1>
void dBodySetForce  (dBodyID b, dReal x, dReal y, dReal z);
void dBodySetTorque (dBodyID b, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Set the body force and torque accumulation vectors.
This is mostly useful to zero the force and torque for deactivated bodie=
s
before they are reactivated, in the case where the force-adding function=
s
were called on them while they were deactivated.
</div><h2 class=3Dsection2><a name=3D"sec_6_4_0">6.4. Utility</a></h2><a=
 name=3D"func_dBodyGetRelPointPos">
<a name=3D"func_dBodyGetRelPointVel">
<a name=3D"func_dBodyGetPointVel">
<pre class=3Dfunc1>
void dBodyGetRelPointPos (dBodyID, dReal px, dReal py, dReal pz,
                          dVector3 result);
void dBodyGetRelPointVel (dBodyID, dReal px, dReal py, dReal pz,
                          dVector3 result);
void dBodyGetPointVel    (dBodyID, dReal px, dReal py, dReal pz,
                          dVector3 result);
</pre><div class=3Dfunc2>
Utility functions that take a point on a body (<span class=3Darg>px</spa=
n>,<span class=3Darg>py</span>,<span class=3Darg>pz</span>) and
return that point's position or velocity in global coordinates
(in <span class=3Darg>result</span>).
The <span class=3Dc>dBodyGetRelPointXXX</span> functions are given the p=
oint in body
relative coordinates, and the <span class=3Dc>dBodyGetPointVel</span> fu=
nction is given
the point in global coordinates.
</div><p><a name=3D"func_dBodyGetPosRelPoint">
<pre class=3Dfunc1>
void dBodyGetPosRelPoint (dBodyID, dReal px, dReal py, dReal pz,
                       	  dVector3 result);
</pre><div class=3Dfunc2>
This is the inverse of <a class=3Dfunc href=3D"#func_dBodyGetRelPointPos=
">dBodyGetRelPointPos</a>.
It takes a point in global coordinates (<span class=3Darg>x</span>,<span=
 class=3Darg>y</span>,<span class=3Darg>z</span>) and returns
the point's position in body-relative coordinates (<span class=3Darg>res=
ult</span>).
</div><p><a name=3D"func_dBodyVectorToWorld">
<a name=3D"func_dBodyVectorFromWorld">
<pre class=3Dfunc1>
void dBodyVectorToWorld   (dBodyID, dReal px, dReal py, dReal pz,
                           dVector3 result);
void dBodyVectorFromWorld (dBodyID, dReal px, dReal py, dReal pz,
                           dVector3 result);
</pre><div class=3Dfunc2>
Given a vector expressed in the body (or world) coordinate system
(<span class=3Darg>x</span>,<span class=3Darg>y</span>,<span class=3Darg=
>z</span>), rotate it to the world (or body) coordinate system
(<span class=3Darg>result</span>).
</div><h2 class=3Dsection2><a name=3D"sec_6_5_0">6.5. Automatic Enabling=
 and Disabling</a></h2>Every body can be enabled or disabled.
Enabled bodies participate in the simulation, while
disabled bodies are turned off and do not get updated during a simulatio=
n step.
New bodies are always created in the enabled state.<p>A disabled body th=
at is connected through a joint to an enabled body will
be automatically re-enabled at the next simulation step.<p>Disabled bodi=
es do not consume CPU time, therefore to speed up the simulation
bodies should be disabled when they come to rest.
This can be done automatically with the auto-disable feature.<p>If a bod=
y has its auto-disable flag turned on, it will automatically disable its=
elf
when
<ol>
<li>	It has been idle for a given number of simulation steps.
<li>	It has also been idle for a given amount of simulation time.
</ol>
A body is considered to be idle when the magnitudes of both its linear v=
elocity
and angular velocity are below given thresholds.<p>Thus, every body has =
five auto-disable parameters: an enabled flag, a idle step count,
an idle time, and linear/angular velocity thresholds.
Newly created bodies get these parameters from world.<p>The following fu=
nctions set and get the enable/disable parameters of a body.<p><a name=3D=
"func_dBodyEnable">
<a name=3D"func_dBodyDisable">
<pre class=3Dfunc1>
void dBodyEnable (dBodyID);
void dBodyDisable (dBodyID);
</pre><div class=3Dfunc2>
Manually enable and disable a body.
Note that a disabled body that is connected through a joint to an enable=
d body will
be automatically re-enabled at the next simulation step.
</div><p><a name=3D"func_dBodyIsEnabled">
<pre class=3Dfunc1>
int dBodyIsEnabled (dBodyID);
</pre><div class=3Dfunc2>
Return 1 if a body is currently enabled or 0 if it is disabled.
</div><p><a name=3D"func_dBodySetAutoDisableFlag">
<a name=3D"func_dBodyGetAutoDisableFlag">
<pre class=3Dfunc1>
void  dBodySetAutoDisableFlag (dBodyID, int do_auto_disable);
int   dBodyGetAutoDisableFlag (dBodyID);
</pre><div class=3Dfunc2>
Set and get the auto-disable flag of a body.
If the <span class=3Darg>do_auto_disable</span> is nonzero the body will=
 be automatically disabled when
it has been idle for long enough.
</div><p><a name=3D"func_dBodySetAutoDisableLinearThreshold">
<a name=3D"func_dBodyGetAutoDisableLinearThreshold">
<pre class=3Dfunc1>
void  dBodySetAutoDisableLinearThreshold (dBodyID, dReal linear_threshol=
d);
dReal dBodyGetAutoDisableLinearThreshold (dBodyID);
</pre><div class=3Dfunc2>
Set and get a body's linear velocity threshold for automatic disabling.
The body's linear velocity magnitude must be less than this threshold fo=
r it
to be considered idle.
Set the threshold to <span class=3Dc>dInfinity</span> to prevent the lin=
ear velocity from being considered.
</div><p><a name=3D"func_dBodySetAutoDisableAngularThreshold">
<a name=3D"func_dBodyGetAutoDisableAngularThreshold">
<pre class=3Dfunc1>
void  dBodySetAutoDisableAngularThreshold (dBodyID, dReal angular_thresh=
old);
dReal dBodyGetAutoDisableAngularThreshold (dBodyID);
</pre><div class=3Dfunc2>
Set and get a body's angular velocity threshold for automatic disabling.=

The body's linear angular magnitude must be less than this threshold for=
 it
to be considered idle.
Set the threshold to <span class=3Dc>dInfinity</span> to prevent the ang=
ular velocity from being considered.
</div><p><a name=3D"func_dBodySetAutoDisableSteps">
<a name=3D"func_dBodyGetAutoDisableSteps">
<pre class=3Dfunc1>
void  dBodySetAutoDisableSteps (dBodyID, int steps);
int   dBodyGetAutoDisableSteps (dBodyID);
</pre><div class=3Dfunc2>
Set and get the number of simulation steps that a body must be idle befo=
re it
is automatically disabled.
Set this to zero to disable consideration of the number of steps.
</div><p><a name=3D"func_dBodySetAutoDisableTime">
<a name=3D"func_dBodyGetAutoDisableTime">
<pre class=3Dfunc1>
void  dBodySetAutoDisableTime (dBodyID, dReal time);
dReal dBodyGetAutoDisableTime (dBodyID);
</pre><div class=3Dfunc2>
Set and get the amount of simulation time that a body must be idle befor=
e it
is automatically disabled.
Set this to zero to disable consideration of the amount of simulation ti=
me.
</div><p><a name=3D"func_dBodySetAutoDisableDefaults">
<pre class=3Dfunc1>
void  dBodySetAutoDisableDefaults (dBodyID);
</pre><div class=3Dfunc2>
Set the auto-disable parameters of the body to the default parameters th=
at have
been set on the world.
</div><h2 class=3Dsection2><a name=3D"sec_6_6_0">6.6. Miscellaneous Body=
 Functions</a></h2><a name=3D"func_dBodySetData">
<a name=3D"func_dBodyGetData">
<pre class=3Dfunc1>
void  dBodySetData (dBodyID, void *data);
void *dBodyGetData (dBodyID);
</pre><div class=3Dfunc2>
Get and set the body's user-data pointer.
</div><p><a name=3D"func_dBodySetFiniteRotationMode">
<pre class=3Dfunc1>
void dBodySetFiniteRotationMode (dBodyID, int mode);
</pre><div class=3Dfunc2>
This function controls the way a body's orientation is updated at each t=
ime
step. The <span class=3Darg>mode</span> argument can be:
<ul>
<li>	0: An ``infinitesimal'' orientation update is used.
	This is fast to compute, but it can occasionally cause inaccuracies
	for bodies that are rotating at high speed, especially when those
	bodies are joined to other bodies.
	This is the default for every new body that is created.
<li>	1: A ``finite'' orientation update is used.
	This is more costly to compute, but will be more accurate for high
	speed rotations.
	Note however that high speed rotations can result in many types of
	error in a simulation, and this mode will only fix one of those
	sources of error.
</ul>
</div><p><a name=3D"func_dBodyGetFiniteRotationMode">
<pre class=3Dfunc1>
int dBodyGetFiniteRotationMode (dBodyID);
</pre><div class=3Dfunc2>
Return the current finite rotation mode of a body (0 or 1).
</div><p><a name=3D"func_dBodySetFiniteRotationAxis">
<pre class=3Dfunc1>
void dBodySetFiniteRotationAxis (dBodyID, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
This sets the finite rotation axis for a body.
This is axis only has meaning when the finite rotation mode is set
(see <a class=3Dfunc href=3D"#func_dBodySetFiniteRotationMode">dBodySetF=
initeRotationMode</a>).<p>If this axis is zero (0,0,0), full finite rota=
tions are performed on the body.<p>If this axis is nonzero, the body is =
rotated by performing a partial finite
rotation along the axis direction followed by an infinitesimal rotation =
along
an orthogonal direction.<p>This can be useful to alleviate certain sourc=
es of error caused by quickly
spinning bodies. For example, if a car wheel is rotating at high speed
you can call this function with the wheel's hinge axis as the argument t=
o
try and improve its behavior.
</div><p><a name=3D"func_dBodyGetFiniteRotationAxis">
<pre class=3Dfunc1>
void dBodyGetFiniteRotationAxis (dBodyID, dVector3 result);
</pre><div class=3Dfunc2>
Return the current finite rotation axis of a body.
</div><p><a name=3D"func_dBodyGetNumJoints">
<pre class=3Dfunc1>
int dBodyGetNumJoints (dBodyID b);
</pre><div class=3Dfunc2>
Return the number of joints that are attached to this body.
</div><p><a name=3D"func_dBodyGetJoint">
<pre class=3Dfunc1>
dJointID dBodyGetJoint (dBodyID, int index);
</pre><div class=3Dfunc2>
Return a joint attached to this body, given by <span class=3Darg>index</=
span>.
Valid indexes are 0 to <i>n</i>-1 where <i>n</i> is the value returned b=
y
<a class=3Dfunc href=3D"#func_dBodyGetNumJoints">dBodyGetNumJoints</a>.
</div><p><a name=3D"func_dBodySetGravityMode">
<a name=3D"func_dBodyGetGravityMode">
<pre class=3Dfunc1>
void dBodySetGravityMode (dBodyID b, int mode);
int dBodyGetGravityMode (dBodyID b);
</pre><div class=3Dfunc2>
Set/get whether the body is influenced by the world's gravity or not.
If <span class=3Darg>mode</span> is nonzero it is, if <span class=3Darg>=
mode</span> is zero, it isn't.
Newly created bodies are always influenced by the world's gravity.
</div><h1 class=3Dsection1><a name=3D"sec_7_0_0">7. Joint Types and Join=
t Functions</a></h1><h2 class=3Dsection2><a name=3D"sec_7_1_0">7.1. Crea=
ting and Destroying Joints</a></h2><a name=3D"func_dJointCreateBall">
<a name=3D"func_dJointCreateHinge">
<a name=3D"func_dJointCreateSlider">
<a name=3D"func_dJointCreateContact">
<a name=3D"func_dJointCreateUniversal">
<a name=3D"func_dJointCreateHinge2">
<a name=3D"func_dJointCreateFixed">
<a name=3D"func_dJointCreateAMotor">
<pre class=3Dfunc1>
dJointID dJointCreateBall (dWorldID, dJointGroupID);
dJointID dJointCreateHinge (dWorldID, dJointGroupID);
dJointID dJointCreateSlider (dWorldID, dJointGroupID);
dJointID dJointCreateContact (dWorldID, dJointGroupID,
                              const dContact *);
dJointID dJointCreateUniversal (dWorldID, dJointGroupID);
dJointID dJointCreateHinge2 (dWorldID, dJointGroupID);
dJointID dJointCreateFixed (dWorldID, dJointGroupID);
dJointID dJointCreateAMotor (dWorldID, dJointGroupID);
</pre><div class=3Dfunc2>
Create a new joint of a given type.
The joint is initially in "limbo" (i.e. it has no effect on the simulati=
on)
because it does not connect to any bodies.
The joint group ID is 0 to allocate the joint normally.
If it is nonzero the joint is allocated in the given joint group.
The contact joint will be initialized with the given <span class=3Dc>dCo=
ntact</span>
structure.
</div><p><a name=3D"func_dJointDestroy">
<pre class=3Dfunc1>
void dJointDestroy (dJointID);
</pre><div class=3Dfunc2>
Destroy a joint, disconnecting it from its attached bodies and removing
it from the world.
However, if the joint is a member of a group then this function has no
effect - to destroy that joint the group must be emptied or destroyed.
</div><p><a name=3D"func_dJointGroupCreate">
<pre class=3Dfunc1>
dJointGroupID dJointGroupCreate (int max_size);
</pre><div class=3Dfunc2>
Create a joint group.
The <span class=3Darg>max_size</span> argument is now unused and should =
be set to 0.
It is kept for backwards compatibility.
</div><p><a name=3D"func_dJointGroupDestroy">
<pre class=3Dfunc1>
void dJointGroupDestroy (dJointGroupID);
</pre><div class=3Dfunc2>
Destroy a joint group. All joints in the joint group will be destroyed.
</div><p><a name=3D"func_dJointGroupEmpty">
<pre class=3Dfunc1>
void dJointGroupEmpty (dJointGroupID);
</pre><div class=3Dfunc2>
Empty a joint group. All joints in the joint group will be destroyed,
but the joint group itself will not be destroyed.
</div><h2 class=3Dsection2><a name=3D"sec_7_2_0">7.2. Miscellaneous Join=
t Functions</a></h2><a name=3D"func_dJointAttach">
<pre class=3Dfunc1>
void dJointAttach (dJointID, dBodyID body1, dBodyID body2);
</pre><div class=3Dfunc2>
Attach the joint to some new bodies.
If the joint is already attached, it will be detached from the old bodie=
s
first.
To attach this joint to only one body, set body1 or body2 to zero - a ze=
ro
body refers to the static environment.
Setting both bodies to zero puts the joint into "limbo", i.e. it will
have no effect on the simulation.<p>Some joints, like hinge-2 need to be=
 attached to two bodies to work.
</div><p><a name=3D"func_dJointSetData">
<a name=3D"func_dJointGetData">
<pre class=3Dfunc1>
void dJointSetData (dJointID, void *data);
void *dJointGetData (dJointID);
</pre><div class=3Dfunc2>
Get and set the joint's user-data pointer.
</div><p><a name=3D"func_dJointGetType">
<pre class=3Dfunc1>
int dJointGetType (dJointID);
</pre><div class=3Dfunc2>
Get the joint's type. One of the following constants will be returned:<p=
><center><table border=3D1 cellspacing=3D0 cellpadding=3D6 bgcolor=3D#ff=
ffc0><tr valign=3D"top"><td><a name=3D"const_dJointTypeBall"><span class=
=3Dconst>dJointTypeBall</span></td><td>A ball-and-socket joint.</td></tr=
><tr valign=3D"top"><td><a name=3D"const_dJointTypeHinge"><span class=3D=
const>dJointTypeHinge</span></td><td>A hinge joint.</td></tr><tr valign=3D=
"top"><td><a name=3D"const_dJointTypeSlider"><span class=3Dconst>dJointT=
ypeSlider</span></td><td>A slider joint.</td></tr><tr valign=3D"top"><td=
><a name=3D"const_dJointTypeContact"><span class=3Dconst>dJointTypeConta=
ct</span></td><td>A contact joint.</td></tr><tr valign=3D"top"><td><a na=
me=3D"const_dJointTypeUniversal"><span class=3Dconst>dJointTypeUniversal=
</span></td><td>A universal joint.</td></tr><tr valign=3D"top"><td><a na=
me=3D"const_dJointTypeHinge2"><span class=3Dconst>dJointTypeHinge2</span=
></td><td>A hinge-2 joint.</td></tr><tr valign=3D"top"><td><a name=3D"co=
nst_dJointTypeFixed"><span class=3Dconst>dJointTypeFixed</span></td><td>=
A fixed joint.</td></tr><tr valign=3D"top"><td><a name=3D"const_dJointTy=
peAMotor"><span class=3Dconst>dJointTypeAMotor</span></td><td>An angular=
 motor joint.</td></tr></table></center>
</div><p><a name=3D"func_dJointGetBody">
<pre class=3Dfunc1>
dBodyID dJointGetBody (dJointID, int index);
</pre><div class=3Dfunc2>
Return the bodies that this joint connects.
If <span class=3Darg>index</span> is 0 the ``first'' body will be return=
ed, corresponding to the <span class=3Dc>body1</span>
argument of <a class=3Dfunc href=3D"#func_dJointAttach">dJointAttach</a>=
.
If <span class=3Darg>index</span> is 1 the ``second'' body will be retur=
ned, corresponding to the <span class=3Dc>body2</span>
argument of <a class=3Dfunc href=3D"#func_dJointAttach">dJointAttach</a>=
.<p>If one of these returned body IDs is zero, the joint connects the ot=
her body
to the static environment.
If both body IDs are zero, the joint is in ``limbo'' and has no effect o=
n
the simulation.
</div><p><a name=3D"func_dJointSetFeedback">
<a name=3D"func_dJointGetFeedback">
<pre class=3Dfunc1>
void dJointSetFeedback (dJointID, dJointFeedback *);
dJointFeedback *dJointGetFeedback (dJointID);
</pre><div class=3Dfunc2>
During the world time step, the forces that are applied by each joint ar=
e
computed. These forces are added directly to the joined bodies, and the =
user
normally has no way of telling which joint contributed how much force.<p=
>If this information is desired then the user can allocate a <span class=
=3Dc>dJointFeedback</span>
structure and pass its pointer to the <span class=3Dc>dJointSetFeedback(=
)</span> function.
The feedback information structure is defined as follows:<p><pre class=3D=
code>
typedef struct dJointFeedback {
  dVector3 f1;       // force that joint applies to body 1
  dVector3 t1;       // torque that joint applies to body 1
  dVector3 f2;       // force that joint applies to body 2
  dVector3 t2;       // torque that joint applies to body 2
} dJointFeedback;</pre><p>During the time step any feedback structures t=
hat are attached to joints will
be filled in with the joint's force and torque information.
The <span class=3Dc>dJointGetFeedback()</span> function returns the curr=
ent feedback
structure pointer, or 0 if none is used (this is the default).
<span class=3Dc>dJointSetFeedback()</span> can be passed 0 to disable fe=
edback for that joint.<p>Now for some API design notes.
It might seem strange to require that users perform the allocation of
these structures. Why not just store the data statically in each
joint? The reason is that not all users will use the feedback
information, and even when it is used not all joints will need it.
It will waste memory to store it statically, especially as this
structure could grow to store a lot of extra information in the
future.<p>Why not have ODE allocate the structure itself, at the user's =
request?
The reason is that contact joints (which are created and destroyed
every time step) would require a lot of time to be spent in memory
allocation if feedback is required. Letting the user do the allocation
means that a better allocation strategy can be provided, e.g simply
allocating them out of a fixed array.<p>The alternative to this API is t=
o have a joint-force callback. This
would work of course, but it has a few problems. First, callbacks tend
to pollute APIs and sometimes require the user to go through unnatural
contortions to get the data to the right place. Second, this would
expose ODE to being changed in the middle of a step (which
would have bad consequences), and there would have to be some kind of
guard against this or a debugging check for it - which would complicate
things.
</div><p><a name=3D"func_dAreConnected">
<pre class=3Dfunc1>
int dAreConnected (dBodyID, dBodyID);
</pre><div class=3Dfunc2>
Utility function: return 1 if the two bodies are connected together by
a joint, otherwise return 0.
</div><p><a name=3D"func_dAreConnectedExcluding">
<pre class=3Dfunc1>
int dAreConnectedExcluding (dBodyID, dBodyID, int joint_type);
</pre><div class=3Dfunc2>
Utility function: return 1 if the two bodies are connected together by
a joint that does not have type <span class=3Darg>joint_type</span>, oth=
erwise return 0.
<span class=3Darg>joint_type</span> is a <span class=3Dc>dJointTypeXXX</=
span> constant.
This is useful for deciding whether to add contact joints between two bo=
dies:
if they are already connected by non-contact joints then it may not be
appropriate to add contacts, however it is okay to add more contact betw=
een-
bodies that already have contacts.
</div><h2 class=3Dsection2><a name=3D"sec_7_3_0">7.3. Joint parameter se=
tting functions</a></h2><h3 class=3Dsection3><a name=3D"sec_7_3_1">7.3.1=
. Ball and Socket</a></h3>A ball and socket joint is shown in figure 4.<=
p><center>
	<img border=3D1 src=3D"pix/ball-and-socket.jpg"><br><br>
	<b>Figure 4</b>: A ball and socket joint.
	</center><p><a name=3D"func_dJointSetBallAnchor">
<pre class=3Dfunc1>
void dJointSetBallAnchor (dJointID, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Set the joint anchor point.  The joint will try to keep this point on ea=
ch body
together.  The input is specified in world coordinates.
</div><p><a name=3D"func_dJointGetBallAnchor">
<pre class=3Dfunc1>
void dJointGetBallAnchor (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the joint anchor point, in world coordinates.  This returns the poin=
t on
body 1.  If the joint is perfectly satisfied, this will be the same as t=
he
point on body 2.
</div><p><a name=3D"func_dJointGetBallAnchor2">
<pre class=3Dfunc1>
void dJointGetBallAnchor2 (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the joint anchor point, in world coordinates.  This returns the poin=
t on
body 2.  You can think of a ball and socket joint as trying to keep the =
result
of dJointGetBallAnchor() and dJointGetBallAnchor2() the same.  If the jo=
int is
perfectly satisfied, this function will return the same value
as <a class=3Dfunc href=3D"#func_dJointGetBallAnchor">dJointGetBallAncho=
r</a> to within roundoff errors.  <a class=3Dfunc href=3D"#func_dJointGe=
tBallAnchor2">dJointGetBallAnchor2</a>
can be used, along with <a class=3Dfunc href=3D"#func_dJointGetBallAncho=
r">dJointGetBallAnchor</a>, to see how far the joint has come apart.
</div><h3 class=3Dsection3><a name=3D"sec_7_3_2">7.3.2. Hinge</a></h3>A =
hinge joint is shown in figure 5.<p><center>
	<img border=3D1 src=3D"pix/hinge.jpg"><br><br>
	<b>Figure 5</b>: A hinge joint.
	</center><p><a name=3D"func_dJointSetHingeAnchor">
<a name=3D"func_dJointSetHingeAxis">
<pre class=3Dfunc1>
void dJointSetHingeAnchor (dJointID, dReal x, dReal y, dReal z);
void dJointSetHingeAxis (dJointID, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Set hinge anchor and axis parameters.
</div><p><a name=3D"func_dJointGetHingeAnchor">
<pre class=3Dfunc1>
void dJointGetHingeAnchor (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the joint anchor point, in world coordinates.  This returns the poin=
t on
body 1.  If the joint is perfectly satisfied, this will be the same as t=
he
point on body 2.
</div><p><a name=3D"func_dJointGetHingeAnchor2">
<pre class=3Dfunc1>
void dJointGetHingeAnchor2 (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the joint anchor point, in world coordinates.  This returns the poin=
t on
body 2.  If the joint is perfectly satisfied, this will return the same =
value
as <a class=3Dfunc href=3D"#func_dJointGetHingeAnchor">dJointGetHingeAnc=
hor</a>.  If not, this value will be slightly different.
This can be used, for example, to see how far the joint has come apart.
</div><p><a name=3D"func_dJointGetHingeAxis">
<pre class=3Dfunc1>
void dJointGetHingeAxis (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get hinge axis parameter.
</div><p><a name=3D"func_dJointGetHingeAngle">
<a name=3D"func_dJointGetHingeAngleRate">
<pre class=3Dfunc1>
dReal dJointGetHingeAngle (dJointID);
dReal dJointGetHingeAngleRate (dJointID);
</pre><div class=3Dfunc2>
Get the hinge angle and the time derivative of this value.
The angle is measured between the two bodies, or between the body and
the static environment.
The angle will be between -pi..pi.<p>When the hinge anchor or axis is se=
t, the current position of the attached
bodies is examined and that position will be the zero angle.
</div><h3 class=3Dsection3><a name=3D"sec_7_3_3">7.3.3. Slider</a></h3>A=
 slider joint is shown in figure 6.<p><center>
	<img border=3D1 src=3D"pix/slider.jpg"><br><br>
	<b>Figure 6</b>: A slider joint.
	</center><p><a name=3D"func_dJointSetSliderAxis">
<pre class=3Dfunc1>
void dJointSetSliderAxis (dJointID, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Set the slider axis parameter.
</div><p><a name=3D"func_dJointGetSliderAxis">
<pre class=3Dfunc1>
void dJointGetSliderAxis (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the slider axis parameter.
</div><p><a name=3D"func_dJointGetSliderPosition">
<a name=3D"func_dJointGetSliderPositionRate">
<pre class=3Dfunc1>
dReal dJointGetSliderPosition (dJointID);
dReal dJointGetSliderPositionRate (dJointID);
</pre><div class=3Dfunc2>
Get the slider linear position (i.e. the slider's ``extension'') and the=
 time
derivative of this value.<p>When the axis is set, the current position o=
f the attached bodies is
examined and that position will be the zero position.
</div><h3 class=3Dsection3><a name=3D"sec_7_3_4">7.3.4. Universal</a></h=
3>A universal joint is shown in figure 7.<p><center>
	<img border=3D1 src=3D"pix/universal.jpg"><br><br>
	<b>Figure 7</b>: A universal joint.
	</center><p>A universal joint is like a ball and socket joint that cons=
trains an
extra degree of rotational freedom. Given axis 1 on body 1, and axis 2
on body 2 that is perpendicular to axis 1, it keeps them
perpendicular. In other words, rotation of the two bodies about the
direction perpendicular to the two axes will be equal.<p>In the picture,=
 the two bodies are joined together by a cross. Axis 1
is attached to body 1, and axis 2 is attached to body 2. The cross
keeps these axes at 90 degrees, so if you grab body 1 and twist it,
body 2 will twist as well.<p>A Universal joint is equivalent to a hinge-=
2 joint where the hinge-2's
axes are perpendicular to each other, and with a perfectly
rigid connection in place of the suspension.<p>Universal joints show up =
in cars, where the engine causes a shaft, the
drive shaft, to rotate along its own axis. At some point you'd like to
change the direction of the shaft. The problem is, if you just bend
the shaft, then the part after the bend won't rotate about its own
axis. So if you cut it at the bend location and insert a universal
joint, you can use the constraint to force the second shaft to rotate
about the same angle as the first shaft.<p>Another use of this joint is =
to attach the arms of a simple virtual
creature to its body. Imagine a person holding their arms straight
out. You may want the arm to be able to move up and down, and forward
and back, but not to rotate about its own axis.<p>Here are the universal=
 joint functions:<p><a name=3D"func_dJointSetUniversalAnchor">
<a name=3D"func_dJointSetUniversalAxis1">
<a name=3D"func_dJointSetUniversalAxis2">
<pre class=3Dfunc1>
void dJointSetUniversalAnchor (dJointID, dReal x, dReal y, dReal z);
void dJointSetUniversalAxis1 (dJointID, dReal x, dReal y, dReal z);
void dJointSetUniversalAxis2 (dJointID, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Set universal anchor and axis parameters.
Axis 1 and axis 2 should be perpendicular to each other.
</div><p><a name=3D"func_dJointGetUniversalAnchor">
<pre class=3Dfunc1>
void dJointGetUniversalAnchor (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the joint anchor point, in world coordinates.  This returns the poin=
t on
body 1.  If the joint is perfectly satisfied, this will be the same as t=
he
point on body 2.
</div><p><a name=3D"func_dJointGetUniversalAnchor2">
<pre class=3Dfunc1>
void dJointGetUniversalAnchor2 (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the joint anchor point, in world coordinates.  This returns the poin=
t on
body 2.  You can think of the ball and socket part of a universal joint =
as
trying to keep the result of dJointGetBallAnchor() and dJointGetBallAnch=
or2()
the same.  If the joint is
perfectly satisfied, this function will return the same value
as <a class=3Dfunc href=3D"#func_dJointGetUniversalAnchor">dJointGetUniv=
ersalAnchor</a> to within roundoff errors.  <a class=3Dfunc href=3D"#fun=
c_dJointGetUniversalAnchor2">dJointGetUniversalAnchor2</a>
can be used, along with <a class=3Dfunc href=3D"#func_dJointGetUniversal=
Anchor">dJointGetUniversalAnchor</a>, to see how far the joint has come =
apart.
</div><p><a name=3D"func_dJointGetUniversalAxis1">
<a name=3D"func_dJointGetUniversalAxis2">
<pre class=3Dfunc1>
void dJointGetUniversalAxis1 (dJointID, dVector3 result);
void dJointGetUniversalAxis2 (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get univeral axis parameters.
</div><p><a name=3D"func_dJointGetUniversalAngle1">
<a name=3D"func_dJointGetUniversalAngle2">
<a name=3D"func_dJointGetUniversalAngleRate1">
<a name=3D"func_dJointGetUniversalAngleRate2">
<pre class=3Dfunc1>
dReal dJointGetUniversalAngle1 (dJointID);
dReal dJointGetUniversalAngle2 (dJointID);
dReal dJointGetUniversalAngleRate1 (dJointID);
dReal dJointGetUniversalAngleRate2 (dJointID);
</pre><div class=3Dfunc2>
Get the universal angles and the time derivatives of these values.
The angle is measured between a body and the cross, or between the stati=
c environment and the cross.
The angle will be between -pi..pi.<p>When the universal anchor or axis i=
s set, the current position of the attached
bodies is examined and that position will be the zero angle.
</div><h3 class=3Dsection3><a name=3D"sec_7_3_5">7.3.5. Hinge-2</a></h3>=
A hinge-2 joint is shown in figure 8.<p><center>
	<img border=3D1 src=3D"pix/hinge2.jpg"><br><br>
	<b>Figure 8</b>: A hinge-2 joint.
	</center><p>The hinge-2 joint is the same as two hinges connected in se=
ries, with
different hinge axes.
An example, shown in the above picture is the steering wheel of a car,
where one axis allows the wheel to be steered and the other axis allows
the wheel to rotate.<p>The hinge-2 joint has an anchor point and two hin=
ge axes.
Axis 1 is specified relative to body 1 (this would be the steering axis =
if
body 1 is the chassis).
Axis 2 is specified relative to body 2 (this would be the wheel axis if
body 2 is the wheel).<p>Axis 1 can have joint limits and a motor, axis 2=
 can only have a motor.<p>Axis 1 can function as a suspension axis, i.e.=
 the constraint can be
compressible along that axis.<p>The hinge-2 joint where axis1 is perpend=
icular to axis 2 is equivalent to
a universal joint with added suspension.<p><a name=3D"func_dJointSetHing=
e2Anchor">
<a name=3D"func_dJointSetHinge2Axis1">
<a name=3D"func_dJointSetHinge2Axis2">
<pre class=3Dfunc1>
void dJointSetHinge2Anchor (dJointID, dReal x, dReal y, dReal z);
void dJointSetHinge2Axis1 (dJointID, dReal x, dReal y, dReal z);
void dJointSetHinge2Axis2 (dJointID, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Set hinge-2 anchor and axis parameters.
Axis 1 and axis 2 must not lie along the same line.
</div><p><a name=3D"func_dJointGetHinge2Anchor">
<pre class=3Dfunc1>
void dJointGetHinge2Anchor (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the joint anchor point, in world coordinates.  This returns the poin=
t on
body 1.  If the joint is perfectly satisfied, this will be the same as t=
he
point on body 2.
</div><p><a name=3D"func_dJointGetHinge2Anchor2">
<pre class=3Dfunc1>
void dJointGetHinge2Anchor2 (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get the joint anchor point, in world coordinates.  This returns the poin=
t on
body 2.  If the joint is perfectly satisfied, this will return the same =
value
as <a class=3Dfunc href=3D"#func_dJointGetHinge2Anchor">dJointGetHinge2A=
nchor</a>.  If not, this value will be slightly different.
This can be used, for example, to see how far the joint has come apart.
</div><p><a name=3D"func_dJointGetHinge2Axis1">
<a name=3D"func_dJointGetHinge2Axis2">
<pre class=3Dfunc1>
void dJointGetHinge2Axis1 (dJointID, dVector3 result);
void dJointGetHinge2Axis2 (dJointID, dVector3 result);
</pre><div class=3Dfunc2>
Get hinge-2 axis parameters.
</div><p><a name=3D"func_dJointGetHinge2Angle1">
<a name=3D"func_dJointGetHinge2Angle1Rate">
<a name=3D"func_dJointGetHinge2Angle2Rate">
<pre class=3Dfunc1>
dReal dJointGetHinge2Angle1 (dJointID);
dReal dJointGetHinge2Angle1Rate (dJointID);
dReal dJointGetHinge2Angle2Rate (dJointID);
</pre><div class=3Dfunc2>
Get the hinge-2 angles (around axis 1 and axis 2) and the time derivativ=
es
of these values.<p>When the anchor or axis is set, the current position =
of the attached
bodies is examined and that position will be the zero angle.
</div><h3 class=3Dsection3><a name=3D"sec_7_3_6">7.3.6. Fixed</a></h3>Th=
e fixed joint maintains a fixed relative position and orientation betwee=
n
two bodies, or between a body and the static environment.
Using this joint is almost never a good idea in practice, except when
debugging.
If you need two bodies to be glued together it is better to represent th=
at as
a single body.<p><a name=3D"func_dJointSetFixed">
<pre class=3Dfunc1>
void dJointSetFixed (dJointID);
</pre><div class=3Dfunc2>
Call this on the fixed joint after it has been attached to remember the
current desired relative offset and desired relative rotation between th=
e bodies.
</div><h3 class=3Dsection3><a name=3D"sec_7_3_7">7.3.7. Contact</a></h3>=
A contact joint is shown in figure 9.<p><center>
	<img border=3D1 src=3D"pix/contact.jpg"><br><br>
	<b>Figure 9</b>: A contact joint.
	</center><p>The contact joint prevents body 1 and body 2 from inter-pen=
etrating at the
contact point.
It does this by only allowing the bodies to have an ``outgoing'' velocit=
y
in the direction of the contact normal.
Contact joints typically have a lifetime of one time step.
They are created and deleted in response to collision detection.<p>Conta=
ct joints can simulate friction at the contact by applying special
forces in the two friction directions that are perpendicular to the
normal.<p>When a contact joint is created, a <span class=3Dc>dContact</s=
pan> structure must be supplied.
This has the following definition:
<pre class=3Dcode>
struct dContact {
  dSurfaceParameters surface;
  dContactGeom geom;
  dVector3 fdir1;
};</pre>
<span class=3Dc>geom</span> is a substructure that is set by the collisi=
on functions.
It is described in the collision section.<p><span class=3Dc>fdir1</span>=
 is a "first friction direction" vector that defines a direction
along which frictional force is applied.
It must be of unit length and perpendicular to the contact normal
(so it is typically tangential to the contact surface).
It should only be defined if the <a class=3Dconstref href=3D"#const_dCon=
tactFDir1">dContactFDir1</a> flag is set in
<span class=3Dc>surface.mode</span>.
The "second friction direction" is a vector computed to be perpendicular=
 to
both the contact normal and <span class=3Dc>fdir1</span>.<p><span class=3D=
c>surface</span> is a substructure that is set by the user.
Its members define the properties of the colliding surfaces.
It has the following members:
<ul>
<li>	<span class=3Dc>int mode</span> - Contact flags. This must always b=
e set.
	This is a combination of one or more of the following flags:<p><center>=
<table border=3D1 cellspacing=3D0 cellpadding=3D6 bgcolor=3D#ffffc0><tr =
valign=3D"top"><td><a name=3D"const_dContactMu2"><span class=3Dconst>dCo=
ntactMu2</span></td><td>If not set, use <span class=3Dc>mu</span> for bo=
th friction
		directions. If set, use <span class=3Dc>mu</span> for friction directi=
on 1,
		use <span class=3Dc>mu2</span> for friction direction 2.</td></tr><tr =
valign=3D"top"><td><a name=3D"const_dContactFDir1"><span class=3Dconst>d=
ContactFDir1</span></td><td>If set, take <span class=3Dc>fdir1</span> as=
 friction direction
		1, otherwise automatically compute friction direction 1 to be
		perpendicular to the contact normal (in which case its
		resulting orientation is unpredictable).</td></tr><tr valign=3D"top"><=
td><a name=3D"const_dContactBounce"><span class=3Dconst>dContactBounce</=
span></td><td>If set, the contact surface is bouncy,
		in other words the bodies will bounce off each other.
		The exact amount of bouncyness is controlled by the
		<span class=3Dc>bounce</span> parameter.</td></tr><tr valign=3D"top"><=
td><a name=3D"const_dContactSoftERP"><span class=3Dconst>dContactSoftERP=
</span></td><td>If set, the error reduction parameter of
		the contact normal can be set with the <span class=3Dc>soft_erp</span>=
 parameter.
		This is useful to make surfaces soft.</td></tr><tr valign=3D"top"><td>=
<a name=3D"const_dContactSoftCFM"><span class=3Dconst>dContactSoftCFM</s=
pan></td><td>If set, the constraint force mixing
		parameter of the contact normal can be set with the
		<span class=3Dc>soft_cfm</span> parameter. This is useful to make surf=
aces soft.</td></tr><tr valign=3D"top"><td><a name=3D"const_dContactMoti=
on1"><span class=3Dconst>dContactMotion1</span></td><td>If set, the cont=
act surface is assumed to
		be moving independently of the motion of the bodies.
		This is kind of like a conveyor belt running over the surface.
		When this flag is set, <span class=3Dc>motion1</span> defines the surf=
ace
		velocity in friction direction 1.</td></tr><tr valign=3D"top"><td><a n=
ame=3D"const_dContactMotion2"><span class=3Dconst>dContactMotion2</span>=
</td><td>The same thing as above, but for
		friction direction 2.</td></tr><tr valign=3D"top"><td><a name=3D"const=
_dContactSlip1"><span class=3Dconst>dContactSlip1</span></td><td>Force-d=
ependent-slip (FDS) in friction
		direction 1.</td></tr><tr valign=3D"top"><td><a name=3D"const_dContact=
Slip2"><span class=3Dconst>dContactSlip2</span></td><td>Force-dependent-=
slip (FDS) in friction
		direction 2.</td></tr><tr valign=3D"top"><td><a name=3D"const_dContact=
Approx1_1"><span class=3Dconst>dContactApprox1_1</span></td><td>Use the =
friction pyramid approximation
		for friction direction 1. If this is not specified then the
		constant-force-limit approximation is used (and <span class=3Dc>mu</sp=
an> is a
		force limit).</td></tr><tr valign=3D"top"><td><a name=3D"const_dContac=
tApprox1_2"><span class=3Dconst>dContactApprox1_2</span></td><td>Use the=
 friction pyramid approximation
		for friction direction 2. If this is not specified then the
		constant-force-limit approximation is used (and <span class=3Dc>mu</sp=
an> is a
		force limit).</td></tr><tr valign=3D"top"><td><a name=3D"const_dContac=
tApprox1"><span class=3Dconst>dContactApprox1</span></td><td>Equivalent =
to both <span class=3Dc>dContactApprox1_1</span>
		and <span class=3Dc>dContactApprox1_2</span>.</td></tr></table></cente=
r><p><li>	<span class=3Dc>dReal mu</span> : Coulomb friction coefficient=
.
	This must be in the range 0 to <span class=3Dc>dInfinity</span>. 0 resu=
lts in a
	frictionless contact, and <span class=3Dc>dInfinity</span> results in a=
 contact that
	never slips.
	Note that frictionless contacts are less time consuming to compute
	than ones with friction, and infinite friction contacts can be cheaper
	than contacts with finite friction.
	This must always be set.<p><li>	<span class=3Dc>dReal mu2</span> : Opti=
onal Coulomb friction coefficient for friction
		direction 2 (0..<span class=3Dc>dInfinity</span>). This is only set if=
 the
		corresponding flag is set in <span class=3Dc>mode</span>.<p><li>	<span=
 class=3Dc>dReal bounce</span> : Restitution parameter (0..1).
	0 means the surfaces are not bouncy at all, 1 is maximum bouncyness.
	This is only set if the corresponding flag is set in <span class=3Dc>mo=
de</span>.<p><li>	<span class=3Dc>dReal bounce_vel</span> : The minimum =
incoming velocity necessary for
	bounce. Incoming velocities below this will effectively have
	a bounce parameter of 0.
	This is only set if the corresponding flag is set in <span class=3Dc>mo=
de</span>.<p><li>	<span class=3Dc>dReal soft_erp</span> : Contact normal=
 ``softness'' parameter.
	This is only set if the corresponding flag is set in <span class=3Dc>mo=
de</span>.<p><li>	<span class=3Dc>dReal soft_cfm</span> : Contact normal=
 ``softness'' parameter.
	This is only set if the corresponding flag is set in <span class=3Dc>mo=
de</span>.<p><li>	<span class=3Dc>dReal motion1,motion2</span> : Surface=
 velocity in friction directions
	1 and 2.
	These are only set if the corresponding flags are set in <span class=3D=
c>mode</span>.<p><li>	<span class=3Dc>dReal slip1,slip2</span> : The coe=
fficients of force-dependent-slip (FDS)
	for friction directions 1 and 2.
	These are only set if the corresponding flags are set in <span class=3D=
c>mode</span>.<p>FDS is an effect that causes the contacting surfaces to=
 side past each
	other with a velocity that is proportional to the force that is
	being applied tangentially to that surface.<p>Consider a contact point =
where the coefficient of friction  <i>mu</i>  is
	infinite. Normally, if a force <i>f</i> is applied to the two contactin=
g
	surfaces, to try and get them to slide past each other, they will not
	move.
	However, if the FDS coefficient is set to a positive value <i>k</i>
	then the surfaces will slide past each other, building up to a
	steady velocity of <i>k</i>*<i>f</i> relative to each other.<p>Note tha=
t this is quite different from normal frictional effects:
	the force does not cause a constant <i>acceleration</i> of the surfaces=

	relative to each other - it causes a brief acceleration to achieve the
	steady velocity.<p>This is useful for modeling some situations, in part=
icular tires.
	For example consider a car at rest on a road.
	Pushing the car in its direction of travel will cause it to start
	moving (i.e. the tires will start rolling).
	Pushing the car in the perpendicular direction will have no effect, as
	the tires do not roll in that direction.
	However - if the car is moving at a velocity <i>v</i>, applying a force=

	<i>f</i> in the perpendicular direction will cause the tires to slip on=

	the road with a velocity proportional to <i>f</i>*<i>v</i> (Yes, this r=
eally
	happens).<p>To model this in ODE set the tire-road contact parameters a=
s follows:
	set friction direction 1 in the direction that the tire is rolling in,
	and set the FDS slip coefficient in friction direction 2 to <i>k</i>*<i=
>v</i>,
	where <i>v</i> is the tire rolling velocity and <i>k</i> is a tire para=
meter
	that you can chose based on experimentation.<p>Note that FDS is quite s=
eparate from the sticking/slipping effects of
	Coulomb friction - both modes can be used together at a single contact
	point.
</ul><h3 class=3Dsection3><a name=3D"sec_7_3_8">7.3.8. Angular Motor</a>=
</h3>An angular motor (AMotor) allows the relative angular velocities of=
 two
bodies to be controlled.
The angular velocity can be controlled on up to three axes, allowing
torque motors and stops to be set for rotation about those axes
(see the ``Stops and motor parameters'' section below).
This is mainly useful in conjunction will ball joints (which do not
constrain the angular degrees of freedom at all), but it can be used in
any situation where angular control is needed.
To use an AMotor with a ball joint, simply attach it to the same two bod=
ies
that the ball joint is attached to.<p>The AMotor can be used in differen=
t modes.
In <span class=3Dc>dAMotorUser</span> mode, the user directly sets the a=
xes that the AMotor
controls.
In <span class=3Dc>dAMotorEuler</span> mode, AMotor computes the <i>eule=
r angles</i>
corresponding to the relative rotation, allowing euler angle torque moto=
rs
and stops to be set.
An AMotor joint with euler angles is shown in figure 10.<p><center>
	<img border=3D1 src=3D"pix/amotor.jpg"><br><br>
	<b>Figure 10</b>: An AMotor joint with euler angles.
	</center><p>In this diagram, <i>a</i><sub>0</sub>, <i>a</i><sub>1</sub>=
 and <i>a</i><sub>2</sub> are the three axes along
which angular motion is controlled.
The green axes (including <i>a</i><sub>0</sub>) are anchored to body 1.
The blue axes (including <i>a</i><sub>2</sub>) are anchored to body 2.
To get the body 2 axes from the body 1 axes the following sequence of
rotations is performed:
<ul>
<li>	Rotate by  <i>theta</i> <sub>0</sub> about <i>a</i><sub>0</sub>.
<li>	Rotate by  <i>theta</i> <sub>1</sub> about <i>a</i><sub>1</sub> (<i=
>a</i><sub>1</sub> has been rotated from its
	original position).
<li>	Rotate by  <i>theta</i> <sub>2</sub> about <i>a</i><sub>2</sub> (<i=
>a</i><sub>2</sub> has been rotated twice
	from its original position).
</ul><p>There is an important restriction when using euler angles: the  =
<i>theta</i> <sub>1</sub>
angle must not be allowed to get outside the range - <i>pi</i> /2 ...  <=
i>pi</i> /2.
If this happens then the AMotor joint will become unstable (there is a
singularity at +/-  <i>pi</i> /2).
Thus you must set the appropriate stops on axis number 1.<p><a name=3D"f=
unc_dJointSetAMotorMode">
<a name=3D"func_dJointGetAMotorMode">
<pre class=3Dfunc1>
void dJointSetAMotorMode (dJointID, int mode);
int dJointGetAMotorMode (dJointID);
</pre><div class=3Dfunc2>
Set (and get) the angular motor mode. The <span class=3Darg>mode</span> =
parameter must be one
of the following constants:<p><center><table border=3D1 cellspacing=3D0 =
cellpadding=3D6 bgcolor=3D#ffffc0><tr valign=3D"top"><td><a name=3D"cons=
t_dAMotorUser"><span class=3Dconst>dAMotorUser</span></td><td>The AMotor=
 axes and joint angle settings are entirely
	controlled by the user.
	This is the default mode.</td></tr><tr valign=3D"top"><td><a name=3D"co=
nst_dAMotorEuler"><span class=3Dconst>dAMotorEuler</span></td><td>Euler =
angles are automatically computed.
	The axis <i>a</i><sub>1</sub> is also automatically computed.
	The AMotor axes must be set correctly when in this mode,
	as described below.
	When this mode is initially set the current relative orientations
	of the bodies will correspond to all euler angles at zero.
	</td></tr></table></center>
</div><p><a name=3D"func_dJointSetAMotorNumAxes">
<a name=3D"func_dJointGetAMotorNumAxes">
<pre class=3Dfunc1>
void dJointSetAMotorNumAxes (dJointID, int num);
int dJointGetAMotorNumAxes (dJointID);
</pre><div class=3Dfunc2>
Set (and get) the number of angular axes that will be controlled by the
AMotor.
The argument <span class=3Darg>num</span> can range from 0 (which effect=
ively deactivates the
joint) to 3.
This is automatically set to 3 in <span class=3Dc>dAMotorEuler</span> mo=
de.
</div><p><a name=3D"func_dJointSetAMotorAxis">
<a name=3D"func_dJointGetAMotorAxis">
<a name=3D"func_dJointGetAMotorAxisRel">
<pre class=3Dfunc1>
void dJointSetAMotorAxis (dJointID, int anum, int rel,
			  dReal x, dReal y, dReal z);
void dJointGetAMotorAxis (dJointID, int anum, dVector3 result);
int dJointGetAMotorAxisRel (dJointID, int anum);
</pre><div class=3Dfunc2>
Set (and get) the AMotor axes.
The <span class=3Darg>anum</span> argument selects the axis to change (0=
,1 or 2).
Each axis can have one of three ``relative orientation'' modes, selected=
 by
<span class=3Darg>rel</span>:
<ul>
<li> 0: The axis is anchored to the global frame.
<li> 1: The axis is anchored to the first body.
<li> 2: The axis is anchored to the second body.
</ul>
The axis vector (<span class=3Darg>x</span>,<span class=3Darg>y</span>,<=
span class=3Darg>z</span>) is always specified in global
coordinates regardless of the setting of <span class=3Darg>rel</span>.
There are two <span class=3Dc>GetAMotorAxis</span> functions, one to ret=
urn the axis and one to
return the relative mode.<p>For <span class=3Dc>dAMotorEuler</span> mode=
:
<ul>
<li>	Only axes 0 and 2 need to be set. Axis 1 will be determined
	automatically at each time step.
<li>	Axes 0 and 2 must be perpendicular to each other.
<li>	Axis 0 must be anchored to the first body, axis 2 must be anchored
	to the second body.
</ul>
</div><p><a name=3D"func_dJointSetAMotorAngle">
<pre class=3Dfunc1>
void dJointSetAMotorAngle (dJointID, int anum, dReal angle);
</pre><div class=3Dfunc2>
Tell the AMotor what the current angle is along axis <span class=3Darg>a=
num</span>.
This function should only be called in <span class=3Dc>dAMotorUser</span=
> mode, because in this
mode the AMotor has no other way of knowing the joint angles.
The angle information is needed if stops have been set along the axis,
but it is not needed for axis motors.
</div><p><a name=3D"func_dJointGetAMotorAngle">
<pre class=3Dfunc1>
dReal dJointGetAMotorAngle (dJointID, int anum);
</pre><div class=3Dfunc2>
Return the current angle for axis <span class=3Darg>anum</span>.
In <span class=3Dc>dAMotorUser</span> mode this is simply the value that=
 was set with
<a class=3Dfunc href=3D"#func_dJointSetAMotorAngle">dJointSetAMotorAngle=
</a>.
In <span class=3Dc>dAMotorEuler</span> mode this is the corresponding eu=
ler angle.
</div><p><a name=3D"func_dJointGetAMotorAngleRate">
<pre class=3Dfunc1>
dReal dJointGetAMotorAngleRate (dJointID, int anum);
</pre><div class=3Dfunc2>
Return the current angle rate for axis <span class=3Darg>anum</span>.
In <span class=3Dc>dAMotorUser</span> mode this is always zero, as not e=
nough information is
available.
In <span class=3Dc>dAMotorEuler</span> mode this is the corresponding eu=
ler angle rate.
</div><h2 class=3Dsection2><a name=3D"sec_7_4_0">7.4. General</a></h2>Th=
e joint geometry parameter setting functions should only be called after=

the joint has been attached to bodies, and those bodies have been correc=
tly
positioned, otherwise the joint may not be initialized correctly.
If the joint is not already attached, these functions will do nothing.<p=
>For the parameter getting functions, if the system is out of alignment
(i.e. there is some joint error) then the anchor/axis values will be cor=
rect
with respect to body 1 only (or body 2 if you specified body 1 as zero i=
n the
<a class=3Dfunc href=3D"#func_dJointAttach">dJointAttach</a> function).<=
p>The default anchor for all joints is (0,0,0).
The default axis for all joints is (1,0,0).<p>When an axis is set it wil=
l be normalized to unit length.
The adjusted axis is what the axis getting functions will return.<p>When=
 measuring a joint angle or position, a value of zero corresponds to the=

initial position of the bodies relative to each other.<p>Note that there=
 are no functions to set joint angles or positions (or their
rates) directly, instead you must set the corresponding body positions a=
nd
velocities.<h2 class=3Dsection2><a name=3D"sec_7_5_0">7.5. Stop and moto=
r parameters</a></h2>When a joint is first created there is nothing to p=
revent it from
moving through its entire range of motion.
For example a hinge will be able to move through its entire angle,
and a slider will slide to any length.<p>This range of motion can be lim=
ited by setting stops on the joint.
The joint angle (or position) will be prevented from going below the
low stop value, or from going above the high stop value.
Note that a joint angle (or position) of zero corresponds to the
initial body positions.<p>As well as stops, many joint types can have mo=
tors.
A motor applies a torque (or force) to a joint's degree(s) of freedom to=

get it to pivot (or slide) at a desired speed.
Motors have force limits, which means they can apply no more than a
given maximum force/torque to the joint.<p>Motors have two parameters: a=
 desired speed, and the maximum force that is
available to reach that speed.
This is a very simple model of real life motors, engines or servos.
However, is it quite useful when modeling a motor (or engine or servo) t=
hat
is geared down with a gearbox before being connected to the joint.
Such devices are often controlled by setting a desired speed, and can on=
ly
generate a maximum amount of power to achieve that speed (which correspo=
nds
to a certain amount of force available at the joint).<p>Motors can also =
be used to accurately model dry (or Coulomb) friction in
joints.
Simply set the desired velocity to zero and set the maximum force to som=
e
constant value - then all joint motion will be impeded by that force.<p>=
The alternative to using joint stops and motors is to simply apply force=
s
to the affected bodies yourself.
Applying motor forces is easy, and joint stops can be emulated with
restraining spring forces.
However applying forces directly is often not a good approach and can le=
ad
to severe stability problems if it is not done carefully.<p>Consider the=
 case of applying a force to a body to achieve a desired
velocity.
To calculate this force you use information about the current velocity,
something like this:<p><div class=3Dmath><i>force</i> =3D <i>k</i> * (<i=
>desired</i> <i>speed</i> - <i>current</i> <i>speed</i>)</div><p>This ha=
s several problems.
First, the parameter <i>k</i> must be tuned by hand.
If it is too low the body will take a long time to come up to speed.
If it is too high the simulation will become unstable.
Second, even if <i>k</i> is chosen well the body will still take a few t=
ime steps
to come up to speed.
Third, if any other ``external'' forces are being applied to the body, t=
he
desired velocity may never even be reached (a more complicated force equ=
ation
would be needed, which would have extra parameters and its own problems)=
.<p>Joint motors solve all these problems: they bring the body up to spe=
ed
in one time step, provided that does not take more force than is allowed=
.
Joint motors need no extra parameters because they are actually implemen=
ted as
constraints.
They can effectively see one time step into the future to work out the c=
orrect
force.
This makes joint motors more computationally expensive than computing th=
e
forces yourself, but they are much more robust and stable, and far less =
time
consuming to design with.
This is especially true with larger rigid body systems.<p>Similar argume=
nts apply to joint stops.<h3 class=3Dsection3><a name=3D"sec_7_5_1">7.5.=
1. Parameter Functions</a></h3>Here are the functions that set stop and =
motor parameters (as well as other
kinds of parameters) on a joint:<p><a name=3D"func_dJointSetHingeParam">=

<a name=3D"func_dJointSetSliderParam">
<a name=3D"func_dJointSetHinge2Param">
<a name=3D"func_dJointSetUniversalParam">
<a name=3D"func_dJointSetAMotorParam">
<a name=3D"func_dJointGetHingeParam">
<a name=3D"func_dJointGetSliderParam">
<a name=3D"func_dJointGetHinge2Param">
<a name=3D"func_dJointGetUniversalParam">
<a name=3D"func_dJointGetAMotorParam">
<pre class=3Dfunc1>
void dJointSetHingeParam (dJointID, int parameter, dReal value);
void dJointSetSliderParam (dJointID, int parameter, dReal value);
void dJointSetHinge2Param (dJointID, int parameter, dReal value);
void dJointSetUniversalParam (dJointID, int parameter, dReal value);
void dJointSetAMotorParam (dJointID, int parameter, dReal value);
dReal dJointGetHingeParam (dJointID, int parameter);
dReal dJointGetSliderParam (dJointID, int parameter);
dReal dJointGetHinge2Param (dJointID, int parameter);
dReal dJointGetUniversalParam (dJointID, int parameter);
dReal dJointGetAMotorParam (dJointID, int parameter);
</pre><div class=3Dfunc2>
Set/get limit/motor parameters for each joint type.
The parameter numbers are:<p><center><table border=3D1 cellspacing=3D0 c=
ellpadding=3D6 bgcolor=3D#ffffc0><tr valign=3D"top"><td><a name=3D"const=
_dParamLoStop"><span class=3Dconst>dParamLoStop</span></td><td>Low stop =
angle or position. Setting this to
	<span class=3Dc>-dInfinity</span> (the default value) turns off the low=
 stop.
	For rotational joints, this stop must be greater than - <i>pi</i>  to b=
e
	effective.</td></tr><tr valign=3D"top"><td><a name=3D"const_dParamHiSto=
p"><span class=3Dconst>dParamHiStop</span></td><td>High stop angle or po=
sition. Setting this to
	<span class=3Dc>dInfinity</span> (the default value) turns off the high=
 stop.
	For rotational joints, this stop must be less than  <i>pi</i>  to be
	effective.
	If the high stop is less than the low stop then both stops will
	be ineffective.</td></tr><tr valign=3D"top"><td><a name=3D"const_dParam=
Vel"><span class=3Dconst>dParamVel</span></td><td>Desired motor velocity=
 (this will be an angular or
	linear velocity).</td></tr><tr valign=3D"top"><td><a name=3D"const_dPar=
amFMax"><span class=3Dconst>dParamFMax</span></td><td>The maximum force =
or torque that the motor will use to
	achieve the desired velocity.
	This must always be greater than or equal to zero.
	Setting this to zero (the default value) turns off the motor.</td></tr>=
<tr valign=3D"top"><td><a name=3D"const_dParamFudgeFactor"><span class=3D=
const>dParamFudgeFactor</span></td><td>The current joint stop/motor impl=
ementation has
	a small problem:
	when the joint is at one stop and the motor is set to move it away
	from the stop, too much force may be applied for one time step,
	causing a ``jumping'' motion.
	This fudge factor is used to scale this excess force.
	It should have a value between zero and one (the default value).
	If the jumping motion is too visible in a joint, the value can be
	reduced.
	Making this value too small can prevent the motor from being able to
	move the joint away from a stop.</td></tr><tr valign=3D"top"><td><a nam=
e=3D"const_dParamBounce"><span class=3Dconst>dParamBounce</span></td><td=
>The bouncyness of the stops.
	This is a restitution parameter in the range 0..1.
	0 means the stops are not bouncy at all, 1 means maximum bouncyness.</t=
d></tr><tr valign=3D"top"><td><a name=3D"const_dParamCFM"><span class=3D=
const>dParamCFM</span></td><td>The constraint force mixing (CFM) value u=
sed when not
	at a stop.</td></tr><tr valign=3D"top"><td><a name=3D"const_dParamStopE=
RP"><span class=3Dconst>dParamStopERP</span></td><td>The error reduction=
 parameter (ERP) used by the
	stops.</td></tr><tr valign=3D"top"><td><a name=3D"const_dParamStopCFM">=
<span class=3Dconst>dParamStopCFM</span></td><td>The constraint force mi=
xing (CFM) value used by the
	stops. Together with the ERP value this can be used to get spongy or
	soft stops.
	Note that this is intended for unpowered joints, it does not really
	work as expected when a powered joint reaches its limit.</td></tr><tr v=
align=3D"top"><td><a name=3D"const_dParamSuspensionERP"><span class=3Dco=
nst>dParamSuspensionERP</span></td><td>Suspension error reduction parame=
ter (ERP).
	Currently this is only implemented on the hinge-2 joint.</td></tr><tr v=
align=3D"top"><td><a name=3D"const_dParamSuspensionCFM"><span class=3Dco=
nst>dParamSuspensionCFM</span></td><td>Suspension constraint force mixin=
g (CFM) value.
	Currently this is only implemented on the hinge-2 joint.</td></tr></tab=
le></center><p>If a particular parameter is not implemented by a given j=
oint, setting it
will have no effect.<p>These parameter names can be optionally followed =
by a digit (2 or 3)
to indicate the second or third set of parameters, e.g. for the second a=
xis
in a hinge-2 joint, or the third axis in an AMotor joint.
A constant <span class=3Dc>dParamGroup</span> is also defined such that:=

<span class=3Dc>dParamX</span><i>i</i> =3D <span class=3Dc>dParamX</span=
> + <span class=3Dc>dParamGroup</span> * (<i>i</i>-1)
</div><h2 class=3Dsection2><a name=3D"sec_7_6_0">7.6. Setting Joint Torq=
ues/Forces Directly</a></h2>Motors (see above) allow you to set joint ve=
locities directly.  However, you
may instead wish to set the torque or force at a joint instead.  These
functions do just that.  Note that they don't affect the motor, but simp=
ly
call <a class=3Dfunc href=3D"#func_dBodyAddForce">dBodyAddForce</a>/<a c=
lass=3Dfunc href=3D"#func_dBodyAddTorque">dBodyAddTorque</a> on the bodi=
es attached to
it.<p><a name=3D"func_dJointAddHingeTorque">
<pre class=3Dfunc1>
dJointAddHingeTorque(dJointID joint, dReal torque)
</pre><div class=3Dfunc2>
Applies the torque about the hinge axis.  That is, it applies a torque w=
ith
magnitude <span class=3Darg>torque</span>, in the direction of the hinge=
 axis, to body 1, and
with the same magnitude but in opposite direction to body 2.  This funct=
ion
is just a wrapper for <a class=3Dfunc href=3D"#func_dBodyAddTorque">dBod=
yAddTorque</a>
</div><p><a name=3D"func_dJointAddUniversalTorques">
<pre class=3Dfunc1>
dJointAddUniversalTorques(dJointID joint, dReal torque1, dReal torque2)
</pre><div class=3Dfunc2>
Applies <span class=3Darg>torque1</span> about the universal's axis 1, a=
nd <span class=3Darg>torque2</span> about the
universal's axis 2.  This function is just a wrapper for <a class=3Dfunc=
 href=3D"#func_dBodyAddTorque">dBodyAddTorque</a>.
</div><p><a name=3D"func_dJointAddSliderForce">
<pre class=3Dfunc1>
dJointAddSliderForce(dJointID joint, dReal force)
</pre><div class=3Dfunc2>
Applies the given force in the slider's direction.  That is, it applies =
a force
with magnitude <span class=3Darg>force</span>, in the direction slider's=
 axis, to body1, and with
the same magnitude but opposite direction to body2.  This function is ju=
st a
wrapper for <a class=3Dfunc href=3D"#func_dBodyAddForce">dBodyAddForce</=
a>.
</div><p><a name=3D"func_dJointAddHinge2Torques">
<pre class=3Dfunc1>
dJointAddHinge2Torques(dJointID joint, dReal torque1, dReal torque2)
</pre><div class=3Dfunc2>
Applies <span class=3Darg>torque1</span> about the hinge2's axis 1, and =
<span class=3Darg>torque2</span> about the
hinge2's axis 2.  This function is just a wrapper for <a class=3Dfunc hr=
ef=3D"#func_dBodyAddTorque">dBodyAddTorque</a>.
</div><p><a name=3D"func_dJointAddAMotorTorques">
<pre class=3Dfunc1>
dJointAddAMotorTorques(dJointID joint, dReal torque0, dReal torque1,
                       dReal torque2)
</pre><div class=3Dfunc2>
Applies <span class=3Darg>torque0</span> about the AMotor's axis 0, <spa=
n class=3Darg>torque1</span> about the
AMotor's axis 1, and <span class=3Darg>torque2</span> about the AMotor's=
 axis 2.  If the motor has
fewer than three axes, the higher torques are ignored.  This function is=
 just a
wrapper for <a class=3Dfunc href=3D"#func_dBodyAddTorque">dBodyAddTorque=
</a>.
</div><h1 class=3Dsection1><a name=3D"sec_8_0_0">8. StepFast</a></h1><b>=
NOTE: The StepFast algorithm has been superseded by the QuickStep algori=
thm:
see the <a class=3Dfunc href=3D"#func_dWorldQuickStep">dWorldQuickStep</=
a> function.
However, much of the following discussion also applies to QuickStep, exc=
ept for
the details of the method used.</b><p>ODE's <a class=3Dfunc href=3D"#fun=
c_dWorldStep">dWorldStep</a> function currently uses a "big matrix" meth=
od to
step the system. For some large systems this can be slow and can require=

a lot of memory.
The StepFast1 algorithm provides an alternative way to step the system,
that sacrifices some accuracy for a big gain in speed and memory.
To use it, you simply call <a class=3Dfunc href=3D"#func_dWorldStepFast1=
">dWorldStepFast1</a> instead of
<a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</a>.<p>The chart in=
 figure 11 illustrates this speed advantage over the standard
<a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</a> algorithm.<p><c=
enter>
	<img border=3D1 src=3D"pix/sf-graph1.jpg"><br><br>
	<b>Figure 11</b>: Speed advantage of StepFast.
	</center><p>The graph relates the number of Degrees Of Freedom (DOFs) r=
emoved from a
system to the running time of the step. You may be able to tell that the=

<a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</a> algorithm's run=
ning time is proportional to the cube of the
number of DOF's removed. The StepFast1 algorithm, however, is roughly
linear. So as islands increase in size (for example, when there is a lar=
ge
pile-up of cars, a pile of "ragdoll corpses", or a wall of bricks) the
StepFast1 algorithm scales better than <a class=3Dfunc href=3D"#func_dWo=
rldStep">dWorldStep</a>. All this means that
your application is more likely to keep a steady framerate, even in the
worst case scenario.<p>The graph of DOFs removed to memory looks quite s=
imilar (see figure 12).<p><center>
	<img border=3D1 src=3D"pix/sf-graph2.jpg"><br><br>
	<b>Figure 12</b>: Memory advantage of StepFast.
	</center><p><a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</a> re=
quires memory proportional only to the square of the
number of DOF's removed. StepFast1, though, is still linear, but it has
nothing to do with the number of iterations per step. So this means the
dreaded "There was a big pile-up and ODE crashed without an error messag=
e"
problems (usually stack overflows) won't happen with StepFast1. Or at
least that you'll be rendering at a minute per frame or slower before
they do.<h2 class=3Dsection2><a name=3D"sec_8_1_0">8.1. When to use Step=
Fast1</a></h2>As shown above, StepFast1 is quite good when it comes to s=
peed and memory
usage. All this power doesn't come for free, though; all optimizations a=
re
a trade-off of one kind or another. I've already mentioned that StepFast=
1
trades off accuracy for it's speed and memory advantages. You actually g=
et
to choose just how much accuracy you give away though, at the cost of sp=
eed,
by adjusting the number of iterations per step. Though you may never rea=
ch
the accuracy of <a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</a>=
 (or you may surpass it, depending on the
type of inaccuracy), you can be almost certain that a larger number of
iterations will give you more accurate results (more slowly). So StepFas=
t1
can be used in a good variety of situations.<p>The general answer to thi=
s question then, is: use StepFast1 when you don't
mind having a few more parameters to play with to get the system stable,=

and you want to take advantage of it's speed or memory advantages. If yo=
u
find yourself running into situations in your simulation where large num=
bers
of bodies come in contact, and <a class=3Dfunc href=3D"#func_dWorldStep"=
>dWorldStep</a> becomes too slow, try
switching to StepFast1. Many systems will work just fine with nothing mo=
re
than changing the <a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</=
a> function call to <a class=3Dfunc href=3D"#func_dWorldStepFast1">dWorl=
dStepFast1</a>.
Others will require a little tweaking to get them to work well with
StepFast1, usually in the masses of the bodies. When a joint connects tw=
o
bodies with a large mass ratio (i.e. one body has several times the mass=

of the other body) StepFast1 may have trouble solving it.<p>Another pros=
pect for StepFast1 is designing for it from the ground up.
If you know you are going to build large worlds with many physically bas=
ed
objects in them, then go ahead and plan to use StepFast1. Noting the mas=
s
ratio problem above, you might want to consider making the mass of every=

body in your system equal to 1.0. Or in a very small range, for example
between 0.5 and 1.5. Most of the other suggestions for speed and stabili=
ty
apply to StepFast1, except that the object is no longer to remove as man=
y
joints as possible from the equation. It can likely be shown that you wi=
ll
get a better performance to stability ratio by spreading out mass among
several bodies connected by fixed joints rather than trying to implement=

it as one massive body, especially if that one massive body means you ha=
ve
to switch back to <a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</=
a> to keep things stable.<p>A final prospect for StepFast1 is to use it =
only when you need to.
Since StepFast1 uses the body and world structures in exactly the same
way as <a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</a>, you can=
 actually switch back and forth between the two
solvers at will. A good heuristic for when to make this switch is to
simply count contact joints while you are running the collision detectio=
n.
Since collision detection is normally called before the step, using this=

method will ensure that the large island that would slow you down is nev=
er
sent to the <a class=3Dfunc href=3D"#func_dWorldStep">dWorldStep</a> sol=
ver (as opposed to waiting until after you've
already taken a step at 1 fps...). The only better solution would be a
hybrid island creation function, that sends small islands to <a class=3D=
func href=3D"#func_dWorldStep">dWorldStep</a>,
and large islands to <a class=3Dfunc href=3D"#func_dWorldStepFast1">dWor=
ldStepFast1</a>. This may make it in the source at
some point in the future.<h2 class=3Dsection2><a name=3D"sec_8_2_0">8.2.=
 When NOT to use StepFast1</a></h2>Though there are several specific sit=
uations when it as advisable not to
use StepFast1, I believe they can all be summed up in a single statement=
:
Don't use StepFast1 when accuracy is more important than speed or memory=

to you. You may still want to evaluate it in this case and see if the
inaccuracies are even noticeable, perhaps with a relatively large number=

of iterations (20+).<h2 class=3Dsection2><a name=3D"sec_8_3_0">8.3. How =
it works</a></h2>For any interested parties out there, here's a quick ru=
ndown of how the
StepFast1 algorithm works. The general problem that ODE tries to solve
is a system of linear (in)equalities in (<i>m</i> =3D constraints) unkno=
wns,
where one constraint constrains 1 Degree of Freedom in one joint.
For large islands of bodies with many joints between them, this can
take a rather large <i>O</i>(<i>m</i><sup>2</sup>) array, which takes <i=
>O</i>(<i>m</i><sup>3</sup>) time to solve.
StepFast1 completely avoids creating the large matrix by making an
assumption: at relatively small timesteps, the effect of any given joint=

is so localized that it can be calculated without respect to any other
joint in the system, and any conflicting joints will cancel each other
out before the body actually moves. So StepFast1 uses the same solution
method (LCP) to solve the same problem, only localized to a single joint=

(where m &lt;=3D 6). It gets away with this by sub-dividing the timestep=
 and
repeating the process over really small timesteps (i =3D maxiterations) =
times.
So the running time of StepFast1 is "roughly" <i>O</i>(<i>m</i> <i>i</i>=
). It's really closer
to <i>O</i>(<i>j</i> <i>i</i> (<i>m</i>/<i>j</i>)<sup>3</sup>) =3D <i>O<=
/i>(<i>m</i> <i>i</i> (<i>m</i>/<i>j</i>)<sup>2</sup>), where <i>j</i> =3D=
 joints, but (<i>m</i>/<i>j</i>)
is never &gt; 6, so (<i>m</i>/<i>j</i>)<sup>2</sup> is factored out as a=
 constant.<h2 class=3Dsection2><a name=3D"sec_8_4_0">8.4. Experimental U=
tilities included with StepFast1</a></h2>Several experimental functions =
have been added to ODE as part of the
StepFast1 flow of code, at least until they are validated. Most have to =
do
with the automatic disabling and enabling of bodies as yet another bit o=
f
optimization.  Here's the general idea:<p><ul>
<li>	The body is considered a candidate for disabling when it falls
	below a certain speed (linear and angular), called the
	AutoDisableThreshold. In the interest of speedy execution, the actual
	speed measured is the square of the speed of the body. So you may
	need to set a lower value than you expected. 0.003 works well in
	test_crash, and is the default.
<li>	When the body has remained a disable candidate for a certain number=

	of steps (AutoDisableSteps), it is disabled. This is almost completely
	for boxes, which like to land and bounce up on two points, and teeter
	motionless for a few steps before falling back down. Round items
	generally need a much lower (like 1) AutoDisableSteps than boxes do
	(10+), 10 is the default.
<li>	AutoDisabling is disabled by default, use
	dBodySetAutoDisableSF1(body, true) to enable it.
<li>	A body is automatically re-enabled when it comes in contact with
	another enabled body.
<li>	Enabled bodies only enable bodies within (AutoEnableDepth) bodies
	of them each step. This, in conjunction with AutoDisabling, causes a
	rim of bodies that are enabled and disabled each step to form,
	containing the enabled bodies to the smallest area allowed by the
	AutoDisable parameters. Setting AutoEnableDepth to a really large
	number will retain the current functionality. Setting it to 0 will
	give you a new functionality: disabled bodies will never be
	automatically re-enabled, acting like geoms only. 3 seems to be a
	good value for the wall in test_crash, but 1000 is the default to
	retain standard functionality.
</ul><p>Note that the functions pertaining to auto-disabling are not yet=
 implemented!<h2 class=3Dsection2><a name=3D"sec_8_5_0">8.5. API</a></h2=
><a name=3D"func_dWorldStepFast1">
<pre class=3Dfunc1>
void dWorldStepFast1(dWorldID, dReal stepsize, int maxiterations);
</pre><div class=3Dfunc2>
Step the world by <span class=3Darg>stepsize</span> seconds using the St=
epFast1 algorithm.
The number of iterations to perform is given by <span class=3Darg>maxite=
rations</span>.
</div><p><a name=3D"func_dWorldSetAutoEnableDepthSF1">
<a name=3D"func_dWorldGetAutoEnableDepthSF1">
<pre class=3Dfunc1>
void dWorldSetAutoEnableDepthSF1(dWorldID, int autoEnableDepth);
int dWorldGetAutoEnableDepthSF1(dWorldID);
</pre><div class=3Dfunc2>
Set and get the AutoEnableDepth parameter used by the StepFast1 algorith=
m.
</div><p><a name=3D"func_dBodySetAutoDisableThresholdSF1">
<a name=3D"func_dBodyGetAutoDisableThresholdSF1">
<pre class=3Dfunc1>
void dBodySetAutoDisableThresholdSF1(dBodyID, dReal autoDisableThreshold=
);
dReal dBodyGetAutoDisableThresholdSF1(dBodyID);
</pre><div class=3Dfunc2>
Set and get the per-body AutoDisableThreshold parameter used by the
StepFast1 algorithm.
</div><p><a name=3D"func_dBodySetAutoDisableStepsSF1">
<a name=3D"func_dBodyGetAutoDisableStepsSF1">
<pre class=3Dfunc1>
void dBodySetAutoDisableStepsSF1(dBodyID, int AutoDisableSteps);
int dBodyGetAutoDisableStepsSF1(dBodyID);
</pre><div class=3Dfunc2>
Set and get the per-body AutoDisableSteps parameter used by the StepFast=
1
algorithm.
</div><p><a name=3D"func_dBodySetAutoDisableSF1">
<a name=3D"func_dBodyGetAutoDisableSF1">
<pre class=3Dfunc1>
void dBodySetAutoDisableSF1(dBodyID, int doAutoDisable);
int dBodyGetAutoDisableSF1(dBodyID);
</pre><div class=3Dfunc2>
Set and get the per-body AutoDisable flag used by the StepFast1 algorith=
m.
If <span class=3Darg>doAutoDisable</span> is nonzero, auto-disabling is =
enabled.
If <span class=3Darg>doAutoDisable</span> is zero, auto-disabling is dis=
abled.
</div><h1 class=3Dsection1><a name=3D"sec_9_0_0">9. Support Functions</a=
></h1><h2 class=3Dsection2><a name=3D"sec_9_1_0">9.1. Rotation functions=
</a></h2>Rigid body orientations are represented with quaternions.
A quaternion is four numbers [<i>cos</i>( <i>theta</i> /2),<i>sin</i>( <=
i>theta</i> /2)*<i>u</i>]
where  <i>theta</i>  is a rotation angle and <i>u</i> is a unit length r=
otation
axis.<p>Every rigid body also has a 3x3 rotation matrix that is derived =
from
the quaternion.
The rotation matrix and the quaternion always match.<p>Some information =
about quaternions:
<ul>
<li>	q and -q represent the same rotation.
<li>	The inverse of a quaternion is [ <i>q</i>[0] -<i>q</i>[1] -<i>q</i>=
[2] -<i>q</i>[3] ].
</ul><p>The following are utility functions for dealing with rotation ma=
trices and
quaternions.<p><a name=3D"func_dRSetIdentity">
<pre class=3Dfunc1>
void dRSetIdentity (dMatrix3 R);
</pre><div class=3Dfunc2>
Set <span class=3Darg>R</span> to the identity matrix (i.e. no rotation)=
.
</div><p><a name=3D"func_dRFromAxisAndAngle">
<pre class=3Dfunc1>
void dRFromAxisAndAngle (dMatrix3 R,
                         dReal ax, dReal ay, dReal az, dReal angle);
</pre><div class=3Dfunc2>
Compute the rotation matrix <span class=3Darg>R</span> as a rotation of =
<span class=3Darg>angle</span> radians
along the axis (<span class=3Darg>ax</span>,<span class=3Darg>ay</span>,=
<span class=3Darg>az</span>).
</div><p><a name=3D"func_dRFromEulerAngles">
<pre class=3Dfunc1>
void dRFromEulerAngles (dMatrix3 R,
                        dReal phi, dReal theta, dReal psi);
</pre><div class=3Dfunc2>
Compute the rotation matrix <span class=3Darg>R</span> from the three Eu=
ler rotation angles.
</div><p><a name=3D"func_dRFrom2Axes">
<pre class=3Dfunc1>
void dRFrom2Axes (dMatrix3 R, dReal ax, dReal ay, dReal az,
                  dReal bx, dReal by, dReal bz);
</pre><div class=3Dfunc2>
Compute the rotation matrix <span class=3Darg>R</span> from the two vect=
ors `a'
(<span class=3Darg>ax</span>,<span class=3Darg>ay</span>,<span class=3Da=
rg>az</span>) and `b' (<span class=3Darg>bx</span>,<span class=3Darg>by<=
/span>,<span class=3Darg>bz</span>).
`a' and `b' are the desired x and y axes of the rotated coordinate syste=
m.
If necessary, `a' and `b' will be made unit length, and `b' will be
projected so that it is perpendicular to `a'.
The desired z axis is the cross product of `a' and `b'.
</div><p><a name=3D"func_dQSetIdentity">
<pre class=3Dfunc1>
void dQSetIdentity (dQuaternion q);
</pre><div class=3Dfunc2>
Set <span class=3Darg>q</span> to the identity rotation (i.e. no rotatio=
n).
</div><p><a name=3D"func_dQFromAxisAndAngle">
<pre class=3Dfunc1>
void dQFromAxisAndAngle (dQuaternion q, dReal ax, dReal ay, dReal az,
                         dReal angle);
</pre><div class=3Dfunc2>
Compute <span class=3Darg>q</span> as a rotation of <span class=3Darg>an=
gle</span> radians along the axis
(<span class=3Darg>ax</span>,<span class=3Darg>ay</span>,<span class=3Da=
rg>az</span>).
</div><p><a name=3D"func_dQMultiply0">
<a name=3D"func_dQMultiply1">
<a name=3D"func_dQMultiply2">
<a name=3D"func_dQMultiply3">
<pre class=3Dfunc1>
void dQMultiply0 (dQuaternion qa,
                  const dQuaternion qb, const dQuaternion qc);
void dQMultiply1 (dQuaternion qa,
                  const dQuaternion qb, const dQuaternion qc);
void dQMultiply2 (dQuaternion qa,
                  const dQuaternion qb, const dQuaternion qc);
void dQMultiply3 (dQuaternion qa,
                  const dQuaternion qb, const dQuaternion qc);
</pre><div class=3Dfunc2>
Set <span class=3Darg>qa</span> =3D <span class=3Darg>qb</span>*<span cl=
ass=3Darg>qc</span>.
This is that same as <span class=3Darg>qa</span> =3D rotation <span clas=
s=3Darg>qc</span> followed by rotation
<span class=3Darg>qb</span>.
The 0/1/2 versions are analogous to the multiply functions, i.e. 1 uses =
the
inverse of <span class=3Darg>qb</span>, and 2 uses the inverse of <span =
class=3Darg>qc</span>.
Option 3 uses the inverse of both.
</div><p><a name=3D"func_dQtoR">
<pre class=3Dfunc1>
void dQtoR (const dQuaternion q, dMatrix3 R);
</pre><div class=3Dfunc2>
Convert quaternion <span class=3Darg>q</span> to rotation matrix <span c=
lass=3Darg>R</span>.
</div><p><a name=3D"func_dRtoQ">
<pre class=3Dfunc1>
void dRtoQ (const dMatrix3 R, dQuaternion q);
</pre><div class=3Dfunc2>
Convert rotation matrix <span class=3Darg>R</span> to quaternion <span c=
lass=3Darg>q</span>.
</div><p><a name=3D"func_dWtoDQ">
<pre class=3Dfunc1>
void dWtoDQ (const dVector3 w, const dQuaternion q, dVector4 dq);
</pre><div class=3Dfunc2>
Given an existing orientation <span class=3Darg>q</span> and an angular =
velocity vector <span class=3Darg>w</span>,
return in <span class=3Darg>dq</span> the resulting dq/dt.
</div><h2 class=3Dsection2><a name=3D"sec_9_2_0">9.2. Mass functions</a>=
</h2>The mass parameters of a rigid body are described by a <span class=3D=
c>dMass</span> structure:
<pre class=3Dcode>
typedef struct dMass {
  dReal mass;   // total mass of the rigid body
  dVector4 c;   // center of gravity position in body frame (x,y,z)
  dMatrix3 I;   // 3x3 inertia tensor in body frame, about POR
} dMass;</pre><p>The following functions operate on this structure:<p><a=
 name=3D"func_dMassSetZero">
<pre class=3Dfunc1>
void dMassSetZero (dMass *);
</pre><div class=3Dfunc2>
Set all the mass parameters to zero.
</div><p><a name=3D"func_dMassSetParameters">
<pre class=3Dfunc1>
void dMassSetParameters (dMass *, dReal themass,
                         dReal cgx, dReal cgy, dReal cgz,
                         dReal I11, dReal I22, dReal I33,
                         dReal I12, dReal I13, dReal I23);
</pre><div class=3Dfunc2>
Set the mass parameters to the given values.
<span class=3Darg>themass</span> is the mass of the body.
(<span class=3Darg>cx</span>,<span class=3Darg>cy</span>,<span class=3Da=
rg>cz</span>) is the center of gravity position in the body
frame.
The <span class=3Dc>Ixx</span> values are the elements of the inertia ma=
trix:
<pre class=3Dcode>
    [ I11 I12 I13 ]
    [ I12 I22 I23 ]
    [ I13 I23 I33 ]</pre>
</div><p><a name=3D"func_dMassSetSphere">
<a name=3D"func_dMassSetSphereTotal">
<pre class=3Dfunc1>
void dMassSetSphere (dMass *, dReal density, dReal radius);
void dMassSetSphereTotal (dMass *, dReal total_mass, dReal radius);
</pre><div class=3Dfunc2>
Set the mass parameters to represent a sphere of the given radius and
density, with the center of mass at (0,0,0) relative to the body.  The
first function accepts the density of the sphere, the second accepts
the total mass of the sphere.
</div><p><a name=3D"func_dMassSetCappedCylinder">
<a name=3D"func_dMassSetCappedCylinderTotal">
<pre class=3Dfunc1>
void dMassSetCappedCylinder (dMass *, dReal density, int direction,
                             dReal radius, dReal length);
void dMassSetCappedCylinderTotal (dMass *, dReal total_mass,
                             int direction, dReal radius, dReal length);=

</pre><div class=3Dfunc2>
Set the mass parameters to represent a capped cylinder of the given para=
meters
and density, with the center of mass at (0,0,0) relative to the body.
The radius of the cylinder (and the spherical cap) is <span class=3Darg>=
radius</span>.
The length of the cylinder (not counting the spherical cap) is <span cla=
ss=3Darg>length</span>.
The cylinder's long axis is oriented along the body's x, y or z axis acc=
ording
to the value of <span class=3Darg>direction</span> (1=3Dx, 2=3Dy, 3=3Dz)=
.  The
first function accepts the density of the object, the second accepts
its total mass.
</div><p><a name=3D"func_dMassSetCylinder">
<a name=3D"func_dMassSetCylinderTotal">
<pre class=3Dfunc1>
void dMassSetCylinder (dMass *, dReal density, int direction,
		       dReal radius, dReal length);
void dMassSetCylinderTotal (dMass *, dReal total_mass, int direction,
		       dReal radius, dReal length);
</pre><div class=3Dfunc2>
Set the mass parameters to represent a flat-ended cylinder of the given
parameters and density, with the center of mass at (0,0,0) relative to t=
he
body.
The radius of the cylinder is <span class=3Darg>radius</span>.
The length of the cylinder is <span class=3Darg>length</span>.
The cylinder's long axis is oriented along the body's x, y or z axis acc=
ording
to the value of <span class=3Darg>direction</span> (1=3Dx, 2=3Dy, 3=3Dz)=
.  The
first function accepts the density of the object, the second accepts
its total mass.
</div><p><a name=3D"func_dMassSetBox">
<a name=3D"func_dMassSetBoxTotal">
<pre class=3Dfunc1>
void dMassSetBox (dMass *, dReal density,
                  dReal lx, dReal ly, dReal lz);
void dMassSetBoxTotal (dMass *, dReal total_mass,
                  dReal lx, dReal ly, dReal lz);
</pre><div class=3Dfunc2>
Set the mass parameters to represent a box of the given dimensions
and density, with the center of mass at (0,0,0) relative to the body.
The side lengths of the box along the x, y and z axes are <span class=3D=
arg>lx</span>, <span class=3Darg>ly</span>
and <span class=3Darg>lz</span>.  The
first function accepts the density of the object, the second accepts
its total mass.
</div><p><a name=3D"func_dMassAdjust">
<pre class=3Dfunc1>
void dMassAdjust (dMass *, dReal newmass);
</pre><div class=3Dfunc2>
Given mass parameters for some object, adjust them so the total mass is
now <span class=3Darg>newmass</span>.
This is useful when using the above functions to set the mass parameters=
 for
certain objects - they take the object density, not the total mass.
</div><p><a name=3D"func_dMassTranslate">
<pre class=3Dfunc1>
void dMassTranslate (dMass *, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Given mass parameters for some object, adjust them to represent the obje=
ct
displaced by (<span class=3Darg>x</span>,<span class=3Darg>y</span>,<spa=
n class=3Darg>z</span>) relative to the body frame.
</div><p><a name=3D"func_dMassRotate">
<pre class=3Dfunc1>
void dMassRotate (dMass *, const dMatrix3 R);
</pre><div class=3Dfunc2>
Given mass parameters for some object, adjust them to represent the obje=
ct
rotated by <span class=3Darg>R</span> relative to the body frame.
</div><p><a name=3D"func_dMassAdd">
<pre class=3Dfunc1>
void dMassAdd (dMass *a, const dMass *b);
</pre><div class=3Dfunc2>
Add the mass <span class=3Darg>b</span> to the mass <span class=3Darg>a<=
/span>.
</div><h2 class=3Dsection2><a name=3D"sec_9_3_0">9.3. Math functions</a>=
</h2>[There are quite a lot of these, but they're not standardized enoug=
h to
document yet].<h2 class=3Dsection2><a name=3D"sec_9_4_0">9.4. Error and =
memory functions</a></h2>[Document these later].<h1 class=3Dsection1><a =
name=3D"sec_10_0_0">10. Collision Detection</a></h1>ODE has two main com=
ponents: a dynamics simulation engine and a collision
detection engine.
The collision engine is given information about the <i>shape</i> of each=

body. At each time step it figures out which bodies touch each other and=

passes the resulting contact point information to the user.
The user in turn creates contact joints between bodies.<p>Using ODE's co=
llision detection is optional - an alternative collision
detection system can be used as long as it can supply the right kinds
of contact information.<h2 class=3Dsection2><a name=3D"sec_10_1_0">10.1.=
 Contact points</a></h2>If two bodies touch, or if a body touches a stat=
ic feature in its environment,
the contact is represented by one or more "contact points".
Each contact point has a corresponding <span class=3Dc>dContactGeom</spa=
n> structure:
<pre class=3Dcode>
struct dContactGeom {
  dVector3 pos;       // contact position
  dVector3 normal;    // normal vector
  dReal depth;        // penetration depth
  dGeomID g1,g2;      // the colliding geoms
};</pre>
<span class=3Darg>pos</span> records the contact position, in global coo=
rdinates.<p><span class=3Darg>depth</span> is the depth to which the two=
 bodies inter-penetrate each other.
If the depth is zero then the two bodies have a grazing contact, i.e. th=
ey
"only just" touch.
However, this is rare - the simulation is not perfectly accurate and wil=
l
often step the bodies too far so that the depth is nonzero.<p><span clas=
s=3Darg>normal</span> is a unit length vector that is, generally speakin=
g,
perpendicular to the contact surface.<p><span class=3Darg>g1</span> and =
<span class=3Darg>g2</span> are the geometry objects that collided.<p>Th=
e convention is that if body 1 is moved along the <span class=3Darg>norm=
al</span> vector by a
distance <span class=3Darg>depth</span> (or equivalently if body 2 is mo=
ved the same distance in
the opposite direction) then the contact depth will be reduced to zero.
This means that the normal vector points "in" to body 1.<p>In real life,=
 contact between two bodies is a complex thing.
Representing contacts by contact points is only an approximation.
Contact "patches" or "surfaces" might be more physically accurate, but
representing these things in high speed simulation software is a challen=
ge.<p>Each extra contact point added to the simulation will slow it down=
 some more,
so sometimes we are forced to ignore contact points in the interests of =
speed.
For example, when two boxes collide many contact points may be needed to=

properly represent the geometry of the situation, but we may choose to
keep only the best three. Thus we are piling approximation on top of
approximation.<h2 class=3Dsection2><a name=3D"sec_10_2_0">10.2. Geoms</a=
></h2>Geometry objects (or ``geoms'' for short) are the fundamental obje=
cts
in the collision system. A geom can represents a single rigid shape
(such as a sphere or box), or it can represents a group of
other geoms - this is a special kind of geom called a ``space''.<p>Any g=
eom can be collided against any other geom to yield zero or more
contact points. Spaces have the extra capability of being able to
collide their contained geoms together to yield internal contact
points.<p>Geoms can be placeable or non-placeable. A placeable geom has =
a
position vector and a 3*3 rotation matrix, just like a rigid body,
that can be changed during the simulation.
A non-placeable geom does not have this capability - for example, it
may represent some static feature of the environment that can not be
moved. Spaces are non-placeable geoms, because each contained geom may
have its own position and orientation but it does not make sense for
the space itself to have a position and orientation.<p>To use the collis=
ion engine in a rigid body simulation, placeable
geoms are associated with rigid body objects. This allows the
collision engine to get the position and orientation of the geoms from
the bodies. Note that geoms are distinct from rigid bodies in that a
geom has geometrical properties (size, shape, position and
orientation) but no dynamical properties (such as velocity or mass).
A body and a geom together represent all the properties of the
simulated object.<p>Every geom is an instance of a <i>class</i>, such as=
 sphere, plane, or
box. There are a number of built-in classes, described below, and you
can define your own classes as well.<p>The point of reference of a place=
able geoms is the point that is
controlled by its position vector. The point of reference for the
standard classes usually corresponds to the geom's center of
mass. This feature allows the standard classes to be easily connected
to dynamics bodies. If other points of reference are required, a
transformation object can be used to encapsulate a geom.<p>The concepts =
and functions that apply to all geoms will be described
below, followed by the various geometry classes and the functions that
manipulate them.<h2 class=3Dsection2><a name=3D"sec_10_3_0">10.3. Spaces=
</a></h2>A space is a non-placeable geom that can contain other geoms.
It is similar to the rigid body concept of the ``world'', except that
it applies to collision instead of dynamics.<p>Space objects exist to ma=
ke collision detection go faster.
Without spaces, you might generate contacts in your simulation by
calling <a class=3Dfunc href=3D"#func_dCollide">dCollide</a> to get cont=
act points for every single
pair of geoms.
For N geoms this is <i>O</i>(<i>N</i><sup>2</sup>) tests, which is too c=
omputationally
expensive if your environment has many objects.<p>A better approach is t=
o insert the geoms into a space and call
<a class=3Dfunc href=3D"#func_dSpaceCollide">dSpaceCollide</a>.
The space will then perform collision culling, which means
that it will quickly identify which pairs of geoms are <i>potentially</i=
>
intersecting.
Those pairs will be passed to a callback function, which can in turn
call <a class=3Dfunc href=3D"#func_dCollide">dCollide</a> on them.
This saves a lot of time that would have been spent in useless
<a class=3Dfunc href=3D"#func_dCollide">dCollide</a> tests, because the =
number of pairs passed to the
callback function will be a small fraction of every possible
object-object pair.<p>Spaces can contain other spaces. This is useful fo=
r dividing a
collision environment into several hierarchies to further optimize
collision detection speed. This will be described in more detail
below.<h2 class=3Dsection2><a name=3D"sec_10_4_0">10.4. General geom fun=
ctions</a></h2>The following functions can be applied to any geom.<p><a =
name=3D"func_dGeomDestroy">
<pre class=3Dfunc1>
void dGeomDestroy (dGeomID);
</pre><div class=3Dfunc2>
Destroy a geom, removing it from any space it is in first.  This one
function destroys a geom of any type, but to create a geom you must
call a creation function for that type.<p>When a space is destroyed, if =
its cleanup mode is 1 (the default) then
all the geoms in that space are automatically destroyed as well.
</div><p><a name=3D"func_dGeomSetData">
<a name=3D"func_dGeomGetData">
<pre class=3Dfunc1>
void dGeomSetData (dGeomID, void *);
void *dGeomGetData (dGeomID);
</pre><div class=3Dfunc2>
These functions set and get the user-defined data pointer stored in the
geom.
</div><p><a name=3D"func_dGeomSetBody">
<a name=3D"func_dGeomGetBody">
<pre class=3Dfunc1>
void dGeomSetBody (dGeomID, dBodyID);
dBodyID dGeomGetBody (dGeomID);
</pre><div class=3Dfunc2>
These functions set and get the body associated with a placeable geom.
Setting a body on a geom automatically combines the position vector
and rotation matrix of the body and geom, so that setting the position
or orientation of one will set the value for both objects.<p>Setting a b=
ody ID of zero gives the geom its own position and
rotation, independent from any body. If the geom was previously connecte=
d
to a body then its new independent position/rotation is set to the curre=
nt
position/rotation of the body.<p>Calling these functions on a non-placea=
ble geom results in a runtime
error in the debug build of ODE.
</div><p><a name=3D"func_dGeomSetPosition">
<a name=3D"func_dGeomSetRotation">
<a name=3D"func_dGeomSetQuaternion">
<pre class=3Dfunc1>
void dGeomSetPosition (dGeomID, dReal x, dReal y, dReal z);
void dGeomSetRotation (dGeomID, const dMatrix3 R);
void dGeomSetQuaternion (dGeomID, const dQuaternion);
</pre><div class=3Dfunc2>
Set the position vector, rotation matrix or quaternion of a placeable ge=
om.
These functions are analogous to <a class=3Dfunc href=3D"#func_dBodySetP=
osition">dBodySetPosition</a>,
<a class=3Dfunc href=3D"#func_dBodySetRotation">dBodySetRotation</a> and=
 <a class=3Dfunc href=3D"#func_dBodySetQuaternion">dBodySetQuaternion</a=
>.
If the geom is attached to a body, the body's position / rotation / quat=
ernion
will also be changed.<p>Calling these functions on a non-placeable geom =
results in a runtime
error in the debug build of ODE.
</div><p><a name=3D"func_dGeomGetPosition">
<a name=3D"func_dGeomGetRotation">
<a name=3D"func_dGeomGetQuaternion">
<pre class=3Dfunc1>
const dReal * dGeomGetPosition (dGeomID);
const dReal * dGeomGetRotation (dGeomID);
void dGeomGetQuaternion (dGeomID, dQuaternion result);
</pre><div class=3Dfunc2>
The first two return pointers to the geom's position vector and rotation=
 matrix.
The returned values are pointers to internal data structures, so the vec=
tors
are valid until any changes are made to the geom.
If the geom is attached to a body, the body's position / rotation
pointers will be returned, i.e. the result will be identical to calling
<a class=3Dfunc href=3D"#func_dBodyGetPosition">dBodyGetPosition</a> or =
<a class=3Dfunc href=3D"#func_dBodyGetRotation">dBodyGetRotation</a>.<p>=
<a class=3Dfunc href=3D"#func_dGeomGetQuaternion">dGeomGetQuaternion</a>=
 copies the geom's quaternion into the space provided.
If the geom is attached to a body, the body's quaternion will be returne=
d, i.e.
the resulting quaternion will be the same as the result of calling
<a class=3Dfunc href=3D"#func_dBodyGetQuaternion">dBodyGetQuaternion</a>=
.<p>Calling these functions on a non-placeable geom results in a runtime=

error in the debug build of ODE.
</div><p><a name=3D"func_dGeomGetAABB">
<pre class=3Dfunc1>
void dGeomGetAABB (dGeomID, dReal aabb[6]);
</pre><div class=3Dfunc2>
Return in <span class=3Darg>aabb</span> an axis aligned bounding box tha=
t surrounds the
given geom.
The <span class=3Darg>aabb</span> array has elements (<i>minx</i>, <i>ma=
xx</i>, <i>miny</i>, <i>maxy</i>, <i>minz</i>, <i>maxz</i>).
If the geom is a space, a bounding box that surrounds all contained
geoms is returned.<p>This function may return a pre-computed cached boun=
ding box, if it can
determine that the geom has not moved since the last time the bounding
box was computed.
</div><p><a name=3D"func_dGeomIsSpace">
<pre class=3Dfunc1>
int dGeomIsSpace (dGeomID);
</pre><div class=3Dfunc2>
Return 1 if the given geom is a space, or 0 if not.
</div><p><a name=3D"func_dGeomGetSpace">
<pre class=3Dfunc1>
dSpaceID dGeomGetSpace (dGeomID);
</pre><div class=3Dfunc2>
Return the space that the given geometry is contained in, or return 0 if=
 it is
not contained in any space.
</div><p><a name=3D"func_dGeomGetClass">
<pre class=3Dfunc1>
int dGeomGetClass (dGeomID);
</pre><div class=3Dfunc2>
Given a geom, this returns its class number.
The standard class numbers are:<p><center><table border=3D1 cellspacing=3D=
0 cellpadding=3D6 bgcolor=3D#ffffc0><tr valign=3D"top"><td><a name=3D"co=
nst_dSphereClass"><span class=3Dconst>dSphereClass</span></td><td>Sphere=
</td></tr><tr valign=3D"top"><td><a name=3D"const_dBoxClass"><span class=
=3Dconst>dBoxClass</span></td><td>Box</td></tr><tr valign=3D"top"><td><a=
 name=3D"const_dCCylinderClass"><span class=3Dconst>dCCylinderClass</spa=
n></td><td>Capped cylinder</td></tr><tr valign=3D"top"><td><a name=3D"co=
nst_dCylinderClass"><span class=3Dconst>dCylinderClass</span></td><td>Re=
gular flat-ended cylinder</td></tr><tr valign=3D"top"><td><a name=3D"con=
st_dPlaneClass"><span class=3Dconst>dPlaneClass</span></td><td>Infinite =
plane (non-placeable)</td></tr><tr valign=3D"top"><td><a name=3D"const_d=
GeomTransformClass"><span class=3Dconst>dGeomTransformClass</span></td><=
td>Geometry transform</td></tr><tr valign=3D"top"><td><a name=3D"const_d=
RayClass"><span class=3Dconst>dRayClass</span></td><td>Ray</td></tr><tr =
valign=3D"top"><td><a name=3D"const_dTriMeshClass"><span class=3Dconst>d=
TriMeshClass</span></td><td>Triangle mesh</td></tr><tr valign=3D"top"><t=
d><a name=3D"const_dSimpleSpaceClass"><span class=3Dconst>dSimpleSpaceCl=
ass</span></td><td>Simple space</td></tr><tr valign=3D"top"><td><a name=3D=
"const_dHashSpaceClass"><span class=3Dconst>dHashSpaceClass</span></td><=
td>Hash table based space</td></tr></table></center><p>User defined clas=
ses will return their own numbers.
</div><p><a name=3D"func_dGeomSetCategoryBits">
<a name=3D"func_dGeomSetCollideBits">
<a name=3D"func_dGeomGetCategoryBits">
<a name=3D"func_dGeomGetCollideBits">
<pre class=3Dfunc1>
void dGeomSetCategoryBits (dGeomID, unsigned long bits);
void dGeomSetCollideBits (dGeomID, unsigned long bits);
unsigned long dGeomGetCategoryBits (dGeomID);
unsigned long dGeomGetCollideBits (dGeomID);
</pre><div class=3Dfunc2>
Set and get the ``category'' and ``collide'' bitfields for the given geo=
m.
These bitfields are use by spaces to govern which geoms will interact
with each other.
The bit fields are guaranteed to be at least 32 bits wide.
The default category and collide values for newly created geoms have
all bits set.
</div><p><a name=3D"func_dGeomEnable">
<a name=3D"func_dGeomDisable">
<a name=3D"func_dGeomIsEnabled">
<pre class=3Dfunc1>
void dGeomEnable (dGeomID);
void dGeomDisable (dGeomID);
int dGeomIsEnabled (dGeomID);
</pre><div class=3Dfunc2>
Enable and disable a geom.
Disabled geoms are completely ignored by <a class=3Dfunc href=3D"#func_d=
SpaceCollide">dSpaceCollide</a> and
<a class=3Dfunc href=3D"#func_dSpaceCollide2">dSpaceCollide2</a>, althou=
gh they can still be members of a space.<p><span class=3Dc>dGeomIsEnable=
d()</span> returns 1 if a geom is enabled or 0 if it is disabled.
New geoms are created in the enabled state.
</div><h2 class=3Dsection2><a name=3D"sec_10_5_0">10.5. Collision detect=
ion</a></h2>A collision detection ``world'' is created by making a space=
 and then adding
geoms to that space.
At every time step we want to generate a list of contacts for all the ge=
oms
that intersect each other.
Three functions are used to do this:
<ul>
<li>	<a class=3Dfunc href=3D"#func_dCollide">dCollide</a> intersects two=
 geoms and generates contact points.<p><li>	<a class=3Dfunc href=3D"#fun=
c_dSpaceCollide">dSpaceCollide</a> determines which pairs of geoms in a =
space
	may potentially intersect, and calls a callback function with each
	candidate pair.
	This does not generate contact points directly, because the user may
	want to handle some pairs specially - for example by ignoring
	them or using different contact generating strategies.
	Such decisions are made in the callback function, which can choose
	whether or not to call <a class=3Dfunc href=3D"#func_dCollide">dCollide=
</a> for each pair.<p><li>	<a class=3Dfunc href=3D"#func_dSpaceCollide2"=
>dSpaceCollide2</a> determines which geoms from one space
	may potentially intersect with geoms from another space,
	and calls a callback function with each candidate pair.
	It can also test a single non-space geom against a space.
	This function is useful when there is a collision hierarchy, i.e.
	when there are spaces that contain other spaces.
</ul><p>The collision system has been designed to give the user maximum
flexibility to decide which objects will be tested against each other.
This is why are there are three collision functions instead of, for exam=
ple,
one function that just generates all the contact points.<p>Spaces may co=
ntain other spaces. These sub-spaces will typically
represent a collection of geoms (or other spaces) that are located
near each other.
This is useful for gaining extra collision performance by dividing the
collision world into hierarchies. Here is an example of where this is
useful:<p>Suppose you have two cars driving over some terrain. Each car =
is made
up of many geoms. If all these geoms were inserted into the same
space, the collision computation time between the two cars would
always be proportional to the total number of geoms (or even to the
square of this number, depending on which space type is used).<p>To spee=
d up collision a separate space is created to represent each
car. The car geoms are inserted into the car-spaces, and the
car-spaces are inserted into the top level space.  At each time step
<a class=3Dfunc href=3D"#func_dSpaceCollide">dSpaceCollide</a> is called=
 for the top level space. This will do
a single intersection test between the car-spaces (actually between
their bounding boxes) and call the callback if they touch.
The callback can then test the geoms in the car-spaces against each
other using <a class=3Dfunc href=3D"#func_dSpaceCollide2">dSpaceCollide2=
</a>. If the cars are not near each
other then the callback is not called and no time is wasted performing
unnecessary tests.<p>If space hierarchies are being used then the callba=
ck function may be
called recursively, e.g. if <a class=3Dfunc href=3D"#func_dSpaceCollide"=
>dSpaceCollide</a> calls the callback
which in turn calls <a class=3Dfunc href=3D"#func_dSpaceCollide">dSpaceC=
ollide</a> with the same callback function.
In this case the user must make sure that the callback function is
properly reentrant.<p>Here is a sample callback function that traverses =
through all spaces
and sub-spaces, generating all possible contact points for all
intersecting geoms:<p><pre class=3Dcode>
  void nearCallback (void *data, dGeomID o1, dGeomID o2)
  {
    if (dGeomIsSpace (o1) || dGeomIsSpace (o2)) {
      // colliding a space with something
      dSpaceCollide2 (o1,o2,data,&amp;nearCallback);
      // collide all geoms internal to the space(s)
      if (dGeomIsSpace (o1)) dSpaceCollide (o1,data,&amp;nearCallback);
      if (dGeomIsSpace (o2)) dSpaceCollide (o2,data,&amp;nearCallback);
    }
    else {
      // colliding two non-space geoms, so generate contact
      // points between o1 and o2
      int num_contact =3D dCollide (o1,o2,max_contacts,contact_array,ski=
p);
      // add these contact points to the simulation
      ...
    }
  }

  ...

  // collide all objects together
  dSpaceCollide (top_level_space,0,&amp;nearCallback);</pre><p>A space c=
allback function is not allowed to modify a space while that
space is being processed with <a class=3Dfunc href=3D"#func_dSpaceCollid=
e">dSpaceCollide</a> or
<a class=3Dfunc href=3D"#func_dSpaceCollide2">dSpaceCollide2</a>. For ex=
ample, you can not add or remove geoms
from a space, and you can not reposition the geoms within a space.
Doing so will trigger a runtime error in the debug build of ODE.<h3 clas=
s=3Dsection3><a name=3D"sec_10_5_1">10.5.1. Category and Collide Bitfiel=
ds</a></h3>Each geom has a ``category'' and ``collide'' bitfield that ca=
n be used
to assist the space algorithms in determining which geoms should
interact and which should not. Use of this feature is optional - by
default geoms are considered to be capable of colliding with any
other geom.<p>Each bit position in the bitfield represents a different c=
ategory of
object. The actual meaning of these categories (if any) is user defined.=

The category bitfield indicates which categories a geom is a member of.
The collide bitfield indicates which categories the geom will collide wi=
th
during collision detection.<p>A pair of geoms will be considered by <a c=
lass=3Dfunc href=3D"#func_dSpaceCollide">dSpaceCollide</a> and
<a class=3Dfunc href=3D"#func_dSpaceCollide2">dSpaceCollide2</a> for pas=
sing to the callback only if one of them
has a collide bit set that corresponds to a category bit in the other.
The exact test is as follows:<p><pre class=3Dcode>
  // test if geom o1 and geom o2 can collide
  cat1 =3D dGeomGetCategoryBits (o1);
  cat2 =3D dGeomGetCategoryBits (o2);
  col1 =3D dGeomGetCollideBits (o1);
  col2 =3D dGeomGetCollideBits (o2);
  if ((cat1 &amp; col2) || (cat2 &amp; col1)) {
    // call the callback with o1 and o2
  }
  else {
    // do nothing, o1 and o2 do not collide
  }</pre><p>Note that only <a class=3Dfunc href=3D"#func_dSpaceCollide">=
dSpaceCollide</a> and <a class=3Dfunc href=3D"#func_dSpaceCollide2">dSpa=
ceCollide2</a> use
these bitfields, they are ignored by <a class=3Dfunc href=3D"#func_dColl=
ide">dCollide</a>.<p>Typically a geom will belong only to a single categ=
ory, so only one bit will
be set in the category bitfield.
The bitfields are guaranteed to be at least 32 bits wide, so the user is=

able to specify an arbitrary pattern of interactions for up to 32 object=
s.
If there are more than 32 objects then some of them will obviously have
to have the same category.<p>Sometimes the category field will contain m=
ultiple bits set, e.g. if
the geom is a space them you may want to set the category to the union o=
f
all the geom categories that are contained.<p><b>Design note:</b> Why do=
n't we just have a single category bitfield and
use the test <span class=3Dc>(cat1 &amp; cat2)</span> ? This is simpler,=
 but a single field
requires more bits to represent some patterns of interaction.
For example, if 32 geoms have an interaction pattern that is a 5
dimensional hypercube, 80 bit are required in the simpler scheme.
The simpler scheme also makes it harder to determine what the
categories should be for some situations.<h3 class=3Dsection3><a name=3D=
"sec_10_5_2">10.5.2. Collision Detection Functions</a></h3><a name=3D"fu=
nc_dCollide">
<pre class=3Dfunc1>
int dCollide (dGeomID o1, dGeomID o2, int flags,
              dContactGeom *contact, int skip);
</pre><div class=3Dfunc2>
Given two geoms <span class=3Darg>o1</span> and <span class=3Darg>o2</sp=
an> that potentially intersect,
generate contact information for them.
Internally, this just calls the correct class-specific collision functio=
ns
for <span class=3Darg>o1</span> and <span class=3Darg>o2</span>.<p><span=
 class=3Darg>flags</span> specifies how contacts should be generated if =
the geoms touch.
The lower 16 bits of <span class=3Darg>flags</span> is an integer that s=
pecifies the maximum
number of contact points to generate.
Note that if this number is zero, this function just pretends that it
is one - in other words you can not ask for zero contacts.
All other bits in <span class=3Darg>flags</span> must be zero.
In the future the other bits may be used to select from different contac=
t
generation strategies.<p><span class=3Darg>contact</span> points to an a=
rray of <span class=3Dc>dContactGeom</span> structures.
The array must be able to hold at least the maximum number of contacts.
These <span class=3Dc>dContactGeom</span> structures may be embedded wit=
hin larger structures
in the array - the <span class=3Darg>skip</span> parameter is the byte o=
ffset from one
<span class=3Dc>dContactGeom</span> to the next in the array.
If <span class=3Darg>skip</span> is <span class=3Dc>sizeof(dContactGeom)=
</span> then <span class=3Darg>contact</span> points to a
normal (C-style) array.
It is an error for <span class=3Darg>skip</span> to be smaller than <spa=
n class=3Dc>sizeof(dContactGeom)</span>.<p>If the geoms intersect, this =
function returns the number of contact
points generated (and updates the <span class=3Darg>contact</span> array=
), otherwise it
returns 0 (and the <span class=3Darg>contact</span> array is not touched=
).<p>If a space is passed as <span class=3Darg>o1</span> or <span class=3D=
arg>o2</span> then this function will collide
all objects contained in <span class=3Darg>o1</span> with all objects co=
ntained in <span class=3Darg>o2</span>,
and return the resulting contact points.
This method for colliding spaces with geoms (or spaces with spaces) prov=
ides
no user control over the individual collisions.
To get that control, use <a class=3Dfunc href=3D"#func_dSpaceCollide">dS=
paceCollide</a> or <a class=3Dfunc href=3D"#func_dSpaceCollide2">dSpaceC=
ollide2</a>
instead.<p>If <span class=3Darg>o1</span> and <span class=3Darg>o2</span=
> are the same geom then this function will do
nothing and return 0. Technically speaking an object intersects with
itself, but it is not useful to find contact points in this case.<p>This=
 function does not care if <span class=3Darg>o1</span> and <span class=3D=
arg>o2</span> are in the same
space or not (or indeed if they are in any space at all).
</div><p><a name=3D"func_dSpaceCollide">
<pre class=3Dfunc1>
void dSpaceCollide (dSpaceID space,
                    void *data, dNearCallback *callback);
</pre><div class=3Dfunc2>
This determines which pairs of geoms in a space may potentially intersec=
t,
and calls the callback function with each candidate pair.
The <span class=3Darg>callback</span> function is of type <span class=3D=
c>dNearCallback</span>, which is defined as:
<pre class=3Dcode>
typedef void dNearCallback (void *data, dGeomID o1, dGeomID o2);</pre>
The <span class=3Darg>data</span> argument is passed from <a class=3Dfun=
c href=3D"#func_dSpaceCollide">dSpaceCollide</a> directly
to the callback function. Its meaning is user defined.
The <span class=3Darg>o1</span> and <span class=3Darg>o2</span> argument=
s are the geoms that may be near
each other.<p>The callback function can call <a class=3Dfunc href=3D"#fu=
nc_dCollide">dCollide</a> on <span class=3Darg>o1</span> and
<span class=3Darg>o2</span> to generate contact points between each pair=
.
Then these contact points may be added to the simulation as contact
joints.
The user's callback function can of course chose not to call
<a class=3Dfunc href=3D"#func_dCollide">dCollide</a> for any pair, e.g. =
if the user decides that
those pairs should not interact.<p>Other spaces that are contained withi=
n the colliding space are not
treated specially, i.e. they are not recursed into.
The callback function may be passed these contained spaces as one or
both geom arguments.<p><span class=3Dc>dSpaceCollide()</span> is guarant=
eed to pass all intersecting geom pairs
to the callback function, but it may also make mistakes and pass
non-intersecting pairs. The number of mistaken calls depends on the
internal algorithms used by the space.
Thus you should not expect that <a class=3Dfunc href=3D"#func_dCollide">=
dCollide</a> will return
contacts for every pair passed to the callback.
</div><p><a name=3D"func_dSpaceCollide2">
<pre class=3Dfunc1>
void dSpaceCollide2 (dGeomID o1, dGeomID o2,
                     void *data, dNearCallback *callback);
</pre><div class=3Dfunc2><p>This function is similar to <a class=3Dfunc =
href=3D"#func_dSpaceCollide">dSpaceCollide</a>, except that it is
passed two geoms (or spaces) as arguments.
It calls the callback for all potentially intersecting pairs that contai=
n
one geom from <span class=3Darg>o1</span> and one geom from <span class=3D=
arg>o2</span>.<p>The exact behavior depends on the types of <span class=3D=
arg>o1</span> and <span class=3Darg>o2</span>:
<ul>
<li>	If one argument is a non-space geom and the other is a space,
	the callback is called with all potential intersections between
	the geom and the objects in the space.
<li>	If both <span class=3Darg>o1</span> and <span class=3Darg>o2</span>=
 are spaces then this calls the
	callback for all potentially intersecting pairs that contain
	one geom from <span class=3Darg>o1</span> and one geom from <span class=
=3Darg>o2</span>.
	The algorithm that is used depends on what kinds of spaces are
	being collided. If no optimized algorithm can be selected then
	this function will resort to one of the following two strategies:
	<ol>
	<li>	All the geoms in <span class=3Darg>o1</span> are tested one-by-one=
 against
		<span class=3Darg>o2</span>.
	<li>	All the geoms in <span class=3Darg>o2</span> are tested one-by-one=
 against
		<span class=3Darg>o1</span>.
	</ol>
	The strategy used may depends on a number of rules, but in general
	the space with less objects has its geoms examined one-by-one.
<li>	If both arguments are the same space, this is equivalent to
	calling <a class=3Dfunc href=3D"#func_dSpaceCollide">dSpaceCollide</a> =
on that space.
<li>	If both arguments are non-space geoms, this simply calls the
	callback once with these arguments.
</ul>
If this function is given a space and an geom X in that same space,
this case is not treated specially. In this case the callback will
always be called with the pair (X,X), because an objects always
intersects with itself.
The user may either test for this case and ignore it, or just pass the
pair (X,X) to <a class=3Dfunc href=3D"#func_dCollide">dCollide</a> (whic=
h will be guaranteed to return 0).
</div><h2 class=3Dsection2><a name=3D"sec_10_6_0">10.6. Space functions<=
/a></h2>There are several kinds of spaces. Each kind uses different inte=
rnal
data structures to store the geoms, and different algorithms to
perform the collision culling:
<ul>
<li>	Simple space. This does not do any collision culling - it simply
	checks every possible pair of geoms for intersection, and reports
	the pairs whose AABBs overlap.
	The time required to do intersection testing for <i>n</i> objects is
	<i>O</i>(<i>n</i><sup>2</sup>).
	This should not be used for large numbers of objects, but it can be
	the preferred algorithm for a small number of objects.
	This is also useful for debugging potential problems with the
	collision system.<p><li>	Multi-resolution hash table space.
	This uses an internal data structure that records how each geom
	overlaps cells in one of several three dimensional grids.
	Each grid has cubical cells of side lengths 2<sup><i>i</i></sup>, where=
 <i>i</i>
	is an integer that ranges from a minimum to a maximum value.
	The time required to do intersection testing for <i>n</i> objects is
	<i>O</i>(<i>n</i>) (as long as those objects are not clustered together=
 too
	closely), as each object can be quickly paired with the objects
	around it.<p><li>	Quadtree space. This uses a pre-allocated hierarchica=
l grid-based
	AABB tree to quickly cull collision checks. It's exceptionally
	quick for large amounts of objects in landscape-shaped worlds.
	The amount of memory used is 4^depth * 32 bytes.
	Currently <a class=3Dfunc href=3D"#func_dSpaceGetGeom">dSpaceGetGeom</a=
> is not implemented for the quadtree
	space.
</ul><p>Here are the functions used for spaces:<p><a name=3D"func_dSimpl=
eSpaceCreate">
<a name=3D"func_dHashSpaceCreate">
<pre class=3Dfunc1>
dSpaceID dSimpleSpaceCreate (dSpaceID space);
dSpaceID dHashSpaceCreate (dSpaceID space);
</pre><div class=3Dfunc2>
Create a space, either of the simple or multi-resolution hash table kind=
.
If <span class=3Darg>space</span> is nonzero, insert the new space into =
that space.
</div><p><a name=3D"func_dQuadTreeSpaceCreate">
<pre class=3Dfunc1>
dSpaceID dQuadTreeSpaceCreate (dSpaceID space, dVector3 Center,
                               dVector3 Extents, int Depth);
</pre><div class=3Dfunc2>
Creates a quadtree space. <span class=3Darg>center</span> and <span clas=
s=3Darg>extents</span> define the size
of the root block. <span class=3Darg>depth</span> sets the depth of the =
tree - the number
of blocks that are created is 4^depth.
</div><p><a name=3D"func_dSpaceDestroy">
<pre class=3Dfunc1>
void dSpaceDestroy (dSpaceID);
</pre><div class=3Dfunc2>
This destroys a space. It functions exactly like <a class=3Dfunc href=3D=
"#func_dGeomDestroy">dGeomDestroy</a>
except that it takes a <span class=3Dc>dSpaceID</span> argument.
When a space is destroyed, if its cleanup mode is 1 (the default) then
all the geoms in that space are automatically destroyed as well.
</div><p><a name=3D"func_dHashSpaceSetLevels">
<a name=3D"func_dHashSpaceGetLevels">
<pre class=3Dfunc1>
void dHashSpaceSetLevels (dSpaceID space, int minlevel, int maxlevel);
void dHashSpaceGetLevels (dSpaceID space, int *minlevel, int *maxlevel);=

</pre><div class=3Dfunc2>
Sets and get some parameters for a multi-resolution hash table space.
The smallest and largest cell sizes used in the hash table will be
2^<span class=3Darg>minlevel</span> and 2^<span class=3Darg>maxlevel</sp=
an> respectively.
<span class=3Darg>minlevel</span> must be less than or equal to <span cl=
ass=3Darg>maxlevel</span>.<p>In <a class=3Dfunc href=3D"#func_dHashSpace=
GetLevels">dHashSpaceGetLevels</a> the minimum and maximum levels are re=
turned
through pointers. If a pointer is zero then it is ignored and no
argument is returned.
</div><p><a name=3D"func_dSpaceSetCleanup">
<a name=3D"func_dSpaceGetCleanup">
<pre class=3Dfunc1>
void dSpaceSetCleanup (dSpaceID space, int mode);
int dSpaceGetCleanup (dSpaceID space);
</pre><div class=3Dfunc2>
Set and get the clean-up mode of the space.
If the clean-up mode is 1, then the contained geoms will be destroyed wh=
en
the space is destroyed. If the clean-up mode is 0 this does not happen.
The default clean-up mode for new spaces is 1.
</div><p><a name=3D"func_dSpaceAdd">
<pre class=3Dfunc1>
void dSpaceAdd (dSpaceID, dGeomID);
</pre><div class=3Dfunc2>
Add a geom to a space.
This does nothing if the geom is already in the space.
This function can be called automatically if a <span class=3Darg>space</=
span> argument is
given to a geom creation function.
</div><p><a name=3D"func_dSpaceRemove">
<pre class=3Dfunc1>
void dSpaceRemove (dSpaceID, dGeomID);
</pre><div class=3Dfunc2>
Remove a geom from a space.
This does nothing if the geom is not actually in the space.
This function is called automatically by <a class=3Dfunc href=3D"#func_d=
GeomDestroy">dGeomDestroy</a> if the
geom is in a space.
</div><p><a name=3D"func_dSpaceQuery">
<pre class=3Dfunc1>
int dSpaceQuery (dSpaceID, dGeomID);
</pre><div class=3Dfunc2>
Return 1 if the given geom is in the given space, or return 0 if it is n=
ot.
</div><p><a name=3D"func_dSpaceGetNumGeoms">
<pre class=3Dfunc1>
int dSpaceGetNumGeoms (dSpaceID);
</pre><div class=3Dfunc2>
Return the number of geoms contained within a space.
</div><p><a name=3D"func_dSpaceGetGeom">
<pre class=3Dfunc1>
dGeomID dSpaceGetGeom (dSpaceID, int i);
</pre><div class=3Dfunc2>
Return the <span class=3Darg>i</span>'th geom contained within the space=
.
<span class=3Darg>i</span> must range from 0 to <span class=3Darg>dSpace=
GetNumGeoms()</span>-1.<p>If any change is made to the space (including =
adding and deleting geoms)
then no guarantee can be made about how the index number of any particul=
ar
geom will change.
Thus no space changes should be made while enumerating the geoms.<p>This=
 function is guaranteed to be fastest when the geoms are accessed in
the order 0,1,2,etc. Other non-sequential orders may result in slower ac=
cess,
depending on the internal implementation.
</div><h2 class=3Dsection2><a name=3D"sec_10_7_0">10.7. Geometry Classes=
</a></h2><h3 class=3Dsection3><a name=3D"sec_10_7_1">10.7.1. Sphere Clas=
s</a></h3><a name=3D"func_dCreateSphere">
<pre class=3Dfunc1>
dGeomID dCreateSphere (dSpaceID space, dReal radius);
</pre><div class=3Dfunc2>
Create a sphere geom of the given <span class=3Darg>radius</span>, and r=
eturn its ID.
If <span class=3Darg>space</span> is nonzero, insert it into that space.=

The point of reference for a sphere is its center.
</div><p><a name=3D"func_dGeomSphereSetRadius">
<pre class=3Dfunc1>
void dGeomSphereSetRadius (dGeomID sphere, dReal radius);
</pre><div class=3Dfunc2>
Set the radius of the given sphere.
</div><p><a name=3D"func_dGeomSphereGetRadius">
<pre class=3Dfunc1>
dReal dGeomSphereGetRadius (dGeomID sphere);
</pre><div class=3Dfunc2>
Return the radius of the given sphere.
</div><p><a name=3D"func_dGeomSpherePointDepth">
<pre class=3Dfunc1>
dReal dGeomSpherePointDepth (dGeomID sphere, dReal x, dReal y, dReal z);=

</pre><div class=3Dfunc2>
Return the depth of the point (<span class=3Darg>x</span>,<span class=3D=
arg>y</span>,<span class=3Darg>z</span>) in the given sphere.
Points inside the geom will have positive depth, points outside it will =
have
negative depth, and points on the surface will have zero depth.
</div><h3 class=3Dsection3><a name=3D"sec_10_7_2">10.7.2. Box Class</a><=
/h3><a name=3D"func_dCreateBox">
<pre class=3Dfunc1>
dGeomID dCreateBox (dSpaceID space, dReal lx, dReal ly, dReal lz);
</pre><div class=3Dfunc2>
Create a box geom of the given x/y/z side lengths
(<span class=3Darg>lx</span>,<span class=3Darg>ly</span>,<span class=3Da=
rg>lz</span>), and return its ID.
If <span class=3Darg>space</span> is nonzero, insert it into that space.=

The point of reference for a box is its center.
</div><p><a name=3D"func_dGeomBoxSetLengths">
<pre class=3Dfunc1>
void dGeomBoxSetLengths (dGeomID box, dReal lx, dReal ly, dReal lz);
</pre><div class=3Dfunc2>
Set the side lengths of the given <span class=3Darg>box</span>.
</div><p><a name=3D"func_dGeomBoxGetLengths">
<pre class=3Dfunc1>
void dGeomBoxGetLengths (dGeomID box, dVector3 result);
</pre><div class=3Dfunc2>
Return in <span class=3Darg>result</span> the side lengths of the given =
<span class=3Darg>box</span>.
</div><p><a name=3D"func_dGeomBoxPointDepth">
<pre class=3Dfunc1>
dReal dGeomBoxPointDepth (dGeomID box, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Return the depth of the point (<span class=3Darg>x</span>,<span class=3D=
arg>y</span>,<span class=3Darg>z</span>) in the given box.
Points inside the geom will have positive depth, points outside it will =
have
negative depth, and points on the surface will have zero depth.
</div><h3 class=3Dsection3><a name=3D"sec_10_7_3">10.7.3. Plane Class</a=
></h3><a name=3D"func_dCreatePlane">
<pre class=3Dfunc1>
dGeomID dCreatePlane (dSpaceID space,
                      dReal a, dReal b, dReal c, dReal d);
</pre><div class=3Dfunc2>
Create a plane geom of the given parameters, and return its ID.
If <span class=3Darg>space</span> is nonzero, insert it into that space.=

The plane equation is <div class=3Dmath><i>a</i>*<i>x</i>+<i>b</i>*<i>y<=
/i>+<i>c</i>*<i>z</i> =3D <i>d</i></div>
The plane's normal vector is (<i>a</i>,<i>b</i>,<i>c</i>), and it must h=
ave length 1.
Planes are non-placeable geoms. This means that, unlike placeable geoms,=

planes do not have an assigned position and rotation.
This means that the parameters (a,b,c,d) are always in global coordinate=
s.
In other words it is assumed that the plane is always part of the static=

environment and not tied to any movable object.
</div><p><a name=3D"func_dGeomPlaneSetParams">
<pre class=3Dfunc1>
void dGeomPlaneSetParams (dGeomID plane, dReal a, dReal b, dReal c, dRea=
l d);
</pre><div class=3Dfunc2>
Set the parameters of the given <span class=3Darg>plane</span>.
</div><p><a name=3D"func_dGeomPlaneGetParams">
<pre class=3Dfunc1>
void dGeomPlaneGetParams (dGeomID plane, dVector4 result);
</pre><div class=3Dfunc2>
Return in <span class=3Darg>result</span> the parameters of the given <s=
pan class=3Darg>plane</span>.
</div><p><a name=3D"func_dGeomPlanePointDepth">
<pre class=3Dfunc1>
dReal dGeomPlanePointDepth (dGeomID plane, dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Return the depth of the point (<span class=3Darg>x</span>,<span class=3D=
arg>y</span>,<span class=3Darg>z</span>) in the given plane.
Points inside the geom will have positive depth, points outside it will =
have
negative depth, and points on the surface will have zero depth.
</div><h3 class=3Dsection3><a name=3D"sec_10_7_4">10.7.4. Capped Cylinde=
r Class</a></h3><a name=3D"func_dCreateCCylinder">
<pre class=3Dfunc1>
dGeomID dCreateCCylinder (dSpaceID space, dReal radius, dReal length);
</pre><div class=3Dfunc2>
Create a capped cylinder geom of the given parameters, and return
its ID.
If <span class=3Darg>space</span> is nonzero, insert it into that space.=
<p>A capped cylinder is like a normal cylinder except it has half-sphere=
 caps
at its ends.
This feature makes the internal collision detection code particularly fa=
st
and accurate.
The cylinder's length, not counting the caps, is given by <span class=3D=
arg>length</span>.
The cylinder is aligned along the geom's local Z axis.
The radius of the caps, and of the cylinder itself, is given by <span cl=
ass=3Darg>radius</span>.
</div><p><a name=3D"func_dGeomCCylinderSetParams">
<pre class=3Dfunc1>
void dGeomCCylinderSetParams (dGeomID ccylinder,
                              dReal radius, dReal length);
</pre><div class=3Dfunc2>
Set the parameters of the given capped cylinder.
</div><p><a name=3D"func_dGeomCCylinderGetParams">
<pre class=3Dfunc1>
void dGeomCCylinderGetParams (dGeomID ccylinder,
                              dReal *radius, dReal *length);
</pre><div class=3Dfunc2>
Return in <span class=3Darg>radius</span> and <span class=3Darg>length</=
span> the parameters of the given capped
cylinder.
</div><p><a name=3D"func_dGeomCCylinderPointDepth">
<pre class=3Dfunc1>
dReal dGeomCCylinderPointDepth (dGeomID ccylinder,
                                dReal x, dReal y, dReal z);
</pre><div class=3Dfunc2>
Return the depth of the point (<span class=3Darg>x</span>,<span class=3D=
arg>y</span>,<span class=3Darg>z</span>) in the given capped
cylinder.
Points inside the geom will have positive depth, points outside it will =
have
negative depth, and points on the surface will have zero depth.
</div><h3 class=3Dsection3><a name=3D"sec_10_7_5">10.7.5. Ray Class</a><=
/h3>A ray is different from all the other geom classes in that it does n=
ot
represent a solid object. It is an infinitely thin line that starts from=

the geom's position and extends in the direction of the geom's local Z-a=
xis.<p>Calling <a class=3Dfunc href=3D"#func_dCollide">dCollide</a> betw=
een a ray and another geom will result in at
most one contact point.
Rays have their own conventions for the contact information in the
<span class=3Dc>dContactGeom</span> structure (thus it is not useful to =
create contact joints
from this information):<p><ul>
<li>	<span class=3Dc>pos</span> - This is the point at which the ray int=
ersects the surface of
	the other geom, regardless of whether the ray starts from inside or
	outside the geom.<p><li>	<span class=3Dc>normal</span> - This is the su=
rface normal of the other geom at the
	contact point.
	if <a class=3Dfunc href=3D"#func_dCollide">dCollide</a> is passed the r=
ay as its first geom then the
	normal will be oriented correctly for ray reflection from that surface
	(otherwise it will have the opposite sign).<p><li>	<span class=3Dc>dept=
h</span> - This is the distance from the start of the ray to the
	contact point.
</ul><p>Rays are useful for things like visibility testing, determining =
the
path of projectiles or light rays, and for object placement.<p><a name=3D=
"func_dCreateRay">
<pre class=3Dfunc1>
dGeomID dCreateRay (dSpaceID space, dReal length);
</pre><div class=3Dfunc2>
Create a ray geom of the given length, and return its ID.
If <span class=3Darg>space</span> is nonzero, insert it into that space.=

</div><p><a name=3D"func_dGeomRaySetLength">
<pre class=3Dfunc1>
void dGeomRaySetLength (dGeomID ray, dReal length);
</pre><div class=3Dfunc2>
Set the length of the given <span class=3Darg>ray</span>.
</div><p><a name=3D"func_dGeomRayGetLength">
<pre class=3Dfunc1>
dReal dGeomRayGetLength (dGeomID ray);
</pre><div class=3Dfunc2>
Get the length of the given <span class=3Darg>ray</span>.
</div><p><a name=3D"func_dGeomRaySet">
<pre class=3Dfunc1>
void dGeomRaySet (dGeomID ray, dReal px, dReal py, dReal pz,
                  dReal dx, dReal dy, dReal dz);
</pre><div class=3Dfunc2>
Set the starting position (<span class=3Darg>px</span>,<span class=3Darg=
>py</span>,<span class=3Darg>pz</span>) and direction
(<span class=3Darg>dx</span>,<span class=3Darg>dy</span>,<span class=3Da=
rg>dz</span>) of the given <span class=3Darg>ray</span>.
The ray's rotation matrix will be adjusted so that the local Z-axis is
aligned with the direction.
Note that this does not adjust the ray's length.
</div><p><a name=3D"func_dGeomRayGet">
<pre class=3Dfunc1>
void dGeomRayGet (dGeomID ray, dVector3 start, dVector3 dir);
</pre><div class=3Dfunc2>
Get the starting position (<span class=3Darg>start</span>) and direction=
 (<span class=3Darg>dir</span>) of the
ray. The returned direction will be a unit length vector.
</div><h3 class=3Dsection3><a name=3D"sec_10_7_6">10.7.6. Triangle Mesh =
Class</a></h3>A triangle mesh (TriMesh) represents an arbitrary collecti=
on of
triangles.
The triangle mesh collision system has the following features:
<ul>
<li>	Any triangle ``soup'' can be represented --- i.e. the triangles
	are not required to have any particular strip, fan or grid
	structure.
<li>	Triangle meshes can interact with spheres, boxes, rays and other tr=
iangle meshes.
<li>	It works well for relatively large triangles.
<li>	It uses temporal coherence to speed up collision tests.
	When a geom has its collision checked with a trimesh once,
	data is stored inside the trimesh.
	This data can be cleared with the <a class=3Dfunc href=3D"#func_dGeomTr=
iMeshClearTCCache">dGeomTriMeshClearTCCache</a>
	function.
	In the future it will be possible to disable this functionality.
</ul><p>Trimesh/Trimesh collisions, perform quite well, but there are th=
ree minor caveats:<p><ul>
<li> The stepsize you use will, in general, have to be reduced for
   accurate collision resolution.  Non-convex shape collision is much
   more dependent on the collision geometry than primitive collisions.
   Further, the local contact geometry will change more rapidly (and
   in a more complex fashion) for non-convex polytopes than it does
   for simple, convex polytopes such as spheres and cubes.<p><li> In ord=
er to efficiently resolve collisions, dCollideTTL needs
   the positions of the colliding trimeshes in the previous timestep.
   This is used to calculate an estimated velocity of each colliding
   triangle, which is used to find the direction of impact, contact
   normals, etc.  This requires
   the user to update these variables at every timestep.
   This update is performed outside of ODE, so it is not included
   in ODE itself.  The code to do this looks something like this:
<pre class=3Dcode>
  const double *DoubleArrayPtr =3D
    Bodies[BodyIndex].TransformationMatrix-&gt;GetArray();
  dGeomTriMeshDataSet( TriMeshData,
    TRIMESH_LAST_TRANSFORMATION,
    (void *) DoubleArrayPtr );</pre><p>The transformation matrix is the =
standard 4x4 homogeneous transform
   matrix, and the "DoubleArray" is the standard flattened array of
   the 16 matrix values.
</ul><p><b>NOTE: The triangle mesh class is not final, so in the future =
API changes
might be expected.</b><p><a name=3D"func_dGeomTriMeshDataCreate">
<a name=3D"func_dGeomTriMeshDataDestroy">
<pre class=3Dfunc1>
dTriMeshDataID dGeomTriMeshDataCreate();
void dGeomTriMeshDataDestroy (dTriMeshDataID g);
</pre><div class=3Dfunc2>
Creates and destroys a dTriMeshData object which is used to store
mesh data.
</div><p><a name=3D"func_dGeomTriMeshDataBuild">
<pre class=3Dfunc1>
void dGeomTriMeshDataBuild (dTriMeshDataID g, const void* Vertices,
                            int VertexStride, int VertexCount,
			    const void* Indices, int IndexCount,
                            int TriStride, const void* Normals);
</pre><div class=3Dfunc2>
Used for filling a <span class=3Dc>dTriMeshData</span> object with data.=
 No data is copied
here, so the pointers passed into this function must remain valid.
This is how the strided data works:<p><pre class=3Dcode>
struct StridedVertex {
  dVector3 Vertex;  // 4th component can be left out, reducing memory us=
age
  // Userdata
};
int VertexStride =3D sizeof (StridedVertex);

struct StridedTri {
  int Indices[3];
  // Userdata
};
int TriStride =3D sizeof (StridedTri);</pre><p>The <span class=3Dc>Norma=
ls</span> argument is optional: the normals of the faces of each trimesh=
 object.  For example,<p><pre class=3Dcode>
  dTriMeshDataID TriMeshData;
  TriMeshData =3D dGeomTriMeshGetTriMeshDataID (
        Bodies[BodyIndex].GeomID);

  // as long as dReal =3D=3D floats
  dGeomTriMeshDataBuildSingle (TriMeshData,
        // Vertices
        Bodies[BodyIndex].VertexPositions,
        3*sizeof(dReal), (int) numVertices,
        // Faces
        Bodies[BodyIndex].TriangleIndices,
        (int) NumTriangles, 3*sizeof(unsigned int),
        // Normals
        Bodies[BodyIndex].FaceNormals);</pre><p>This pre-calculation sav=
es some time during evaluation of the
contacts, but isn't necessary.  If you don't want to calculate
the face normals before construction (or if you have enormous
trimeshes and know that only very few faces will be touching
and want to save time), just pass a "NULL" for the <span class=3Dc>Norma=
ls</span> argument,
and dCollideTTL will take care of the normal calculations itself.
</div><p><a name=3D"func_dGeomTriMeshDataBuildSimple">
<pre class=3Dfunc1>
void dGeomTriMeshDataBuildSimple (dTriMeshDataID g, const dVector3*Verti=
ces,
                                  int VertexCount, const int* Indices,
                                  int IndexCount);
</pre><div class=3Dfunc2>
Simple build function provided for convenience.
</div><p><a name=3D"func_dTriCallback">
<a name=3D"func_dGeomTriMeshSetCallback">
<a name=3D"func_dGeomTriMeshGetCallback">
<pre class=3Dfunc1>
typedef int dTriCallback (dGeomID TriMesh, dGeomID RefObject, int Triang=
leIndex);
void dGeomTriMeshSetCallback (dGeomID g, dTriCallback *Callback);
dTriCallback* dGeomTriMeshGetCallback (dGeomID g);
</pre><div class=3Dfunc2>
Optional per triangle callback. Allows the user to say if collision with=
 a
particular triangle is wanted.
If the return value is zero no contact will be generated.
</div><p><a name=3D"func_dTriArrayCallback">
<a name=3D"func_dGeomTriMeshSetArrayCallback">
<a name=3D"func_dGeomTriMeshGetArrayCallback">
<pre class=3Dfunc1>
typedef void dTriArrayCallback (dGeomID TriMesh, dGeomID RefObject,
                                const int* TriIndices, int TriCount);
void dGeomTriMeshSetArrayCallback (dGeomID g, dTriArrayCallback* ArrayCa=
llback);
dTriArrayCallback *dGeomTriMeshGetArrayCallback (dGeomID g);
</pre><div class=3Dfunc2>
Optional per geom callback. Allows the user to get the list of all
intersecting triangles in one shot.
</div><p><a name=3D"func_dTriRayCallback">
<a name=3D"func_dGeomTriMeshSetRayCallback">
<a name=3D"func_dGeomTriMeshGetRayCallback">
<pre class=3Dfunc1>
typedef int dTriRayCallback (dGeomID TriMesh, dGeomID Ray, int TriangleI=
ndex,
                             dReal u, dReal v);
void dGeomTriMeshSetRayCallback (dGeomID g, dTriRayCallback* Callback);
dTriRayCallback *dGeomTriMeshGetRayCallback (dGeomID g);
</pre><div class=3Dfunc2>
Optional Ray callback. Allows the user to determine if a ray collides wi=
th
a triangle based on the barycentric coordinates of an intersection.
The user can for example sample a bitmap to determine if a collision
should occur.
</div><p><a name=3D"func_dCreateTriMesh">
<pre class=3Dfunc1>
dGeomID dCreateTriMesh (dSpaceID space, dTriMeshDataID Data,
                        dTriCallback *Callback,
                        dTriArrayCallback * ArrayCallback,
                        dTriRayCallback* RayCallback);
</pre><div class=3Dfunc2>
Constructor. The <span class=3Darg>Data</span> member defines the vertex=
 data the newly
created triangle mesh will use.
</div><p><a name=3D"func_dGeomTriMeshSetData">
<pre class=3Dfunc1>
void dGeomTriMeshSetData (dGeomID g, dTriMeshDataID Data);
</pre><div class=3Dfunc2>
Replaces the current data.
</div><p><a name=3D"func_dGeomTriMeshClearTCCache">
<pre class=3Dfunc1>
void dGeomTriMeshClearTCCache (dGeomID g);
</pre><div class=3Dfunc2>
Clears the internal temporal coherence caches.
</div><p><a name=3D"func_dGeomTriMeshGetTriangle">
<pre class=3Dfunc1>
void dGeomTriMeshGetTriangle (dGeomID g, int Index, dVector3 *v0,
                              dVector3 *v1, dVector3 *v2);
</pre><div class=3Dfunc2>
Retrieves a triangle in object space. The <span class=3Darg>v0</span>, <=
span class=3Darg>v1</span> and
<span class=3Darg>v2</span> arguments are optional.
</div><p><a name=3D"func_dGeomTriMeshGetPoint">
<pre class=3Dfunc1>
void dGeomTriMeshGetPoint (dGeomID g, int Index, dReal u, dReal v,
                           dVector3 Out);
</pre><div class=3Dfunc2>
Retrieves a position in object space based on the incoming data.
</div><p><a name=3D"func_dGeomTriMeshEnableTC">
<a name=3D"func_dGeomTriMeshIsTCEnabled">
<pre class=3Dfunc1>
void dGeomTriMeshEnableTC(dGeomID g, int geomClass, int enable);
int dGeomTriMeshIsTCEnabled(dGeomID g, int geomClass);
</pre><div class=3Dfunc2>
These functions can be used to enable/disable the use of temporal cohere=
nce
during tri-mesh collision checks. Temporal coherence can be enabled/disa=
bled
per tri-mesh instance/geom class pair, currently it works for spheres an=
d
boxes.  The default for spheres and boxes is 'false'.<p>The 'enable' par=
am should be 1 for true, 0 for false.<p>Temporal coherence is optional b=
ecause allowing it can cause subtle
efficiency problems in situations where a tri-mesh may collide with many=

different geoms during its lifespan.  If you enable temporal coherence o=
n
a tri-mesh then these problems can be eased by intermittently calling
 <a class=3Dfunc href=3D"#func_dGeomTriMeshClearTCCache">dGeomTriMeshCle=
arTCCache</a> for it.
</div><h3 class=3Dsection3><a name=3D"sec_10_7_7">10.7.7. Geometry Trans=
form Class</a></h3>A geometry transform `T' is a geom that encapsulates =
another geom `E',
allowing E to be positioned and rotated arbitrarily with respect to its
point of reference.<p>Most placeable geoms (like the sphere and box) hav=
e their point of reference
corresponding to their center of mass, allowing them to be easily connec=
ted
to dynamics objects.
Transform objects give you more flexibility - for example, you can
offset the center of a sphere, or rotate a cylinder so that its axis
is something other than the default.<p>T mimics the object E that it enc=
apsulates: T is inserted into a
space and attached to a body as though it was E.
E itself must <i>not</i> be inserted into a space or attached to a body.=

E's position and rotation are set to constant values that say how it
is transformed <i>relative</i> to T.
If E's position and rotation are left at their default values, T will
behave exactly like E would have if you had used it directly.<p><a name=3D=
"func_dCreateGeomTransform">
<pre class=3Dfunc1>
dGeomID dCreateGeomTransform (dSpaceID space);
</pre><div class=3Dfunc2>
Create a new geometry transform object, and return its ID.
If <span class=3Darg>space</span> is nonzero, insert it into that space.=

On creation the encapsulated geometry is set to 0.
</div><p><a name=3D"func_dGeomTransformSetGeom">
<pre class=3Dfunc1>
void dGeomTransformSetGeom (dGeomID g, dGeomID obj);
</pre><div class=3Dfunc2>
Set the geom that the geometry transform <span class=3Darg>g</span> enca=
psulates.
The object <span class=3Darg>obj</span> must not be inserted into any sp=
ace, and must not be
associated with any body.<p>If <span class=3Darg>g</span> has its clean-=
up mode turned on, and it already encapsulates
an object, the old object will be destroyed before it is replaced with t=
he
new one.
</div><p><a name=3D"func_dGeomTransformGetGeom">
<pre class=3Dfunc1>
dGeomID dGeomTransformGetGeom (dGeomID g);
</pre><div class=3Dfunc2>
Get the geom that the geometry transform <span class=3Darg>g</span> enca=
psulates.
</div><p><a name=3D"func_dGeomTransformSetCleanup">
<a name=3D"func_dGeomTransformGetCleanup">
<pre class=3Dfunc1>
void dGeomTransformSetCleanup (dGeomID g, int mode);
int dGeomTransformGetCleanup (dGeomID g);
</pre><div class=3Dfunc2>
Set and get the clean-up mode of geometry transform <span class=3Darg>g<=
/span>.
If the clean-up mode is 1, then the encapsulated object will be destroye=
d
when the geometry transform is destroyed.
If the clean-up mode is 0 this does not happen.
The default clean-up mode is 0.
</div><p><a name=3D"func_dGeomTransformSetInfo">
<a name=3D"func_dGeomTransformGetInfo">
<pre class=3Dfunc1>
void dGeomTransformSetInfo (dGeomID g, int mode);
int dGeomTransformGetInfo (dGeomID g);
</pre><div class=3Dfunc2>
Set and get the "information" mode of geometry transform <span class=3Da=
rg>g</span>.
The mode can be 0 or 1. The default mode is 0.<p>With mode 0, when a tra=
nsform object is collided with another object
(using <span class=3Dc>dCollide (tx_geom,other_geom,...)</span>), the <s=
pan class=3Dc>g1</span> field of the
<span class=3Dc>dContactGeom</span> structure is set to the geom that is=

<i>encapsulated</i> by the transform object. This value of <span class=3D=
c>g1</span> allows
the caller to interrogate the type of the geom that is transformed,
but it does not allow the caller to determine the position in global
coordinates or the associated body, as both of these properties are used=

differently for encapsulated geoms.<p>With mode 1, the <span class=3Dc>g=
1</span> field of the <span class=3Dc>dContactGeom</span> structure is s=
et
to the transform object itself.
This makes the object appear just like any other kind of geom,
as <a class=3Dfunc href=3D"#func_dGeomGetBody">dGeomGetBody</a> will ret=
urn the attached body,
and <a class=3Dfunc href=3D"#func_dGeomGetPosition">dGeomGetPosition</a>=
 will return the global position.
To get the actual type of the encapsulated geom in this case,
<a class=3Dfunc href=3D"#func_dGeomTransformGetGeom">dGeomTransformGetGe=
om</a> must be used.
</div><h2 class=3Dsection2><a name=3D"sec_10_8_0">10.8. User defined cla=
sses</a></h2>ODE's geometry classes are implemented internally as C++ cl=
asses.
If you want to define your own geometry classes you can do this in two w=
ays:
<ol>
<li>	Use the C functions in this section. This has the advantage of
	providing a clean separation between your code and ODE.
<li>	Add the classes directly to ODE's source code. This has the
	advantage that you can use C++ so the implementation will
	potentially be a bit cleaner. This is also the preferred method
	if your collision class is generally useful and you want to
	contribute it to the public source base.
</ol>
What follows is the C API for user defined geometry classes.<p>Every use=
r defined geometry class has a unique integer number.
A new geometry class (call it `X') must provide the following to ODE:
<ol>
<li>	Functions that will handle collision detection and contact generati=
on
	between X and one or more other classes.
	These functions must be of type <span class=3Dc>dColliderFn</span>, whi=
ch is defined as
	<pre class=3Dcode>
typedef int dColliderFn (dGeomID o1, dGeomID o2, int flags,
                         dContactGeom *contact, int skip);</pre>
	This has exactly the same interface as <a class=3Dfunc href=3D"#func_dC=
ollide">dCollide</a>.
	Each function will handle a specific collision case, where <span class=3D=
arg>o1</span>
	has type X and <span class=3Darg>o2</span> has some other known type.<p=
><li>	A "selector" function, of type <span class=3Dc>dGetColliderFnFn</s=
pan>, which is
	defined as
	<pre class=3Dcode>
typedef dColliderFn * dGetColliderFnFn (int num);</pre>
	This function takes a class number (<span class=3Darg>num</span>), and =
returns the
	collider function that can handle colliding X with class <span class=3D=
arg>num</span>.
	It should return 0 if X does not know how to collide with class
	<span class=3Darg>num</span>.
	Note that if classes X and Y are to collide, only <i>one</i> needs
	to provide a function to collide with the other.<p>This function is cal=
led infrequently - the return values are cached
	and reused.<p><li>	A function that will compute the axis aligned boundi=
ng box (AABB) of
	instances of this class.
	This function must be of type <span class=3Dc>dGetAABBFn</span>, which =
is defined as
	<pre class=3Dcode>
typedef void dGetAABBFn (dGeomID g, dReal aabb[6]);</pre>
	This function is given <span class=3Darg>g</span>, which has type X, an=
d returns the
	axis-aligned bounding box for <span class=3Darg>g</span>.
	The <span class=3Darg>aabb</span> array has elements
	(<i>minx</i>, <i>maxx</i>, <i>miny</i>, <i>maxy</i>, <i>minz</i>, <i>ma=
xz</i>).
	If you don't want to compute tight bounds for the AABB, you can just
	supply a pointer to <a class=3Dfunc href=3D"#func_dInfiniteAABB">dInfin=
iteAABB</a>, which returns +/- infinity
	in each direction.<p><li>	The number of bytes of "class data" that inst=
ances of this class
	need. For example a sphere stores its radius in the class data area,
	and a box stores its side lengths there.
</ol>
The following things are optional for a geometry class:
<ol>
<li>	A function that will destroy the class data. Most classes will not
	need this function, but some will want to deallocate heap memory
	or release other resources.
	This function must be of type <span class=3Dc>dGeomDtorFn</span>, which=
 is defined as
	<pre class=3Dcode>
typedef void dGeomDtorFn (dGeomID o);</pre>
	The argument <span class=3Darg>o</span> has type X.<p><li>	A function t=
hat will test whether a given AABB intersects with an
	instance of X.
	This is used as an early-exit test in the space collision functions.
	This function must be of type <span class=3Dc>dAABBTestFn</span>, which=
 is defined as
	<pre class=3Dcode>
typedef int dAABBTestFn (dGeomID o1, dGeomID o2, dReal aabb2[6]);</pre>
	The argument <span class=3Darg>o1</span> has type X.
	If this function is provided it is called by <a class=3Dfunc href=3D"#f=
unc_dSpaceCollide">dSpaceCollide</a>
	when <span class=3Darg>o1</span> intersects geom <span class=3Darg>o2</=
span>, which has an
	AABB given by <span class=3Darg>aabb2</span>.
	It returns 1 if <span class=3Darg>aabb2</span> intersects <span class=3D=
arg>o1</span>, or 0 if it does not.<p>This is useful, for example, for l=
arge terrains.
	Terrains typically have very large AABBs, which are not very useful to
	test intersections with other objects.
	This function can test another object's AABB against the terrain
	without going to the computational trouble of calling the specific
	collision function.
	This has an especially big savings when testing against GeomGroup
	objects.
</ol><p>Here are the functions used to manage custom classes:<p><a name=3D=
"func_dCreateGeomClass">
<pre class=3Dfunc1>
int dCreateGeomClass (const dGeomClass *classptr);
</pre><div class=3Dfunc2>
Register a new geometry class, defined by <span class=3Darg>classptr</sp=
an>.
The number of the new class is returned.
The convention used in ODE is to assign the class number to a global var=
iable
with the name <span class=3Dc>dXxxClass</span> where Xxx is the class na=
me
(e.g. <span class=3Dc>dSphereClass</span>).<p>Here is the definition of =
the <span class=3Dc>dGeomClass</span> structure:
<pre class=3Dcode>
struct dGeomClass {
  int bytes;                  // bytes of custom data needed
  dGetColliderFnFn *collider; // collider function
  dGetAABBFn *aabb;           // bounding box function
  dAABBTestFn *aabb_test;     // aabb tester, can be 0 for none
  dGeomDtorFn *dtor;          // destructor, can be 0 for none
};</pre>
</div><p><a name=3D"func_dGeomGetClassData">
<pre class=3Dfunc1>
void * dGeomGetClassData (dGeomID);
</pre><div class=3Dfunc2>
Given a geom, return a pointer to the class's custom data
(this will be a block of the required number of bytes).
</div><p><a name=3D"func_dCreateGeom">
<pre class=3Dfunc1>
dGeomID dCreateGeom (int classnum);
</pre><div class=3Dfunc2>
Create a geom of the given class number.
The custom data block will initially be set to 0.
This object can be added to a space using <a class=3Dfunc href=3D"#func_=
dSpaceAdd">dSpaceAdd</a>.
</div><p>When you implement a new class you will usually write a functio=
n that does
the following:
<ol>
<li>	If the class has not yet been created, create it.
	You should be careful to only ever create the class once.
<li>	Call <a class=3Dfunc href=3D"#func_dCreateGeom">dCreateGeom</a> to =
make an instance of the class.
<li>	Set up the custom data area.
</ol><h2 class=3Dsection2><a name=3D"sec_10_9_0">10.9. Composite objects=
</a></h2>Consider the following objects: <ul>
<li>	A table that is made out of a box for the top and a box for each le=
g.
<li>	A branch of a tree that is modeled from several cylinders
	joined together.
<li>	A molecule that has spheres representing each atom.
</ul>
If these objects are meant to be <i>rigid</i> then it is necessary to us=
e
a single rigid body to represent each of them.
But it might seem that performing collision detection is a problem,
because there is no single geometry class that can represent a
complex shape like a table or a molecule.
The solution is to use a <i>composite</i> collision object that is a
combination of several geoms.<p>No extra functions are needed to manage =
composite objects: simply
create each component geom and attach it to the same body. To move
and rotate the separate geoms with respect to each other in the same
object, geometry transforms can be used to encapsulate them. That's
all there is to it!<p>However there is one <i>caveat</i>: You should nev=
er create a composite
object that will result in collision points being generated very close
together.
For example, consider a table that is made up of a box for the top and f=
our
boxes for the legs.
If the legs are flush with the top, and the table is lying on the ground=
 on
its side, then the contact points generated for the boxes may coincide
where the legs join to the top.
ODE does not currently optimize away coincident contact points, so this
situation can lead to numerical errors and strange behavior.<p>In this e=
xample the table geometry should be adjusted so that the legs are
not flush with the sides, making it much more unlikely that coincident
contact points will be generated.
In general, avoid having different contact surfaces that overlap,
or that line up along their edges.<h2 class=3Dsection2><a name=3D"sec_10=
_10_0">10.10. Utility functions</a></h2><a name=3D"func_dClosestLineSegm=
entPoints">
<pre class=3Dfunc1>
void dClosestLineSegmentPoints (const dVector3 a1, const dVector3 a2,
				const dVector3 b1, const dVector3 b2,
				dVector3 cp1, dVector3 cp2);
</pre><div class=3Dfunc2>
Given two line segments A and B with endpoints <span class=3Darg>a1</spa=
n>-<span class=3Darg>a2</span> and
<span class=3Darg>b1</span>-<span class=3Darg>b2</span>, return the poin=
ts on A and B that are closest to each
other (in <span class=3Darg>cp1</span> and <span class=3Darg>cp2</span>)=
.
In the case of parallel lines where there are multiple solutions, a solu=
tion
involving the endpoint of at least one line will be returned.
This will work correctly for zero length lines, e.g. if <span class=3Dar=
g>a1</span>=3D=3D<span class=3Darg>a2</span>
and/or <span class=3Darg>b1</span>=3D=3D<span class=3Darg>b2</span>.
</div><p><a name=3D"func_dBoxTouchesBox">
<pre class=3Dfunc1>
int dBoxTouchesBox (const dVector3 _p1, const dMatrix3 R1,
                    const dVector3 side1, const dVector3 _p2,
                    const dMatrix3 R2, const dVector3 side2);
</pre><div class=3Dfunc2>
Given boxes (<span class=3Darg>p1</span>,<span class=3Darg>R1</span>,<sp=
an class=3Darg>side1</span>) and
(<span class=3Darg>p2</span>,<span class=3Darg>R2</span>,<span class=3Da=
rg>side2</span>), return 1 if they intersect or 0 if not.
<span class=3Darg>p</span> is the center of the box, <span class=3Darg>R=
</span> is the rotation matrix for
the box, and <span class=3Darg>side</span> is a vector of x/y/z side len=
gths.
</div><p><a name=3D"func_dInfiniteAABB">
<pre class=3Dfunc1>
void dInfiniteAABB (dGeomID geom, dReal aabb[6]);
</pre><div class=3Dfunc2>
This function can be used as the AABB-getting function in a geometry cla=
ss,
if you don't want to compute tight bounds for the AABB.
It returns +/- infinity in each direction.
</div><h2 class=3Dsection2><a name=3D"sec_10_11_0">10.11. Implementation=
 notes</a></h2><h3 class=3Dsection3><a name=3D"sec_10_11_1">10.11.1. Lar=
ge Environments</a></h3>Often the collision world will contain many obje=
cts that are part of
the static environment, that are not associated with rigid bodies.
ODE's collision detection is optimized to detect geoms that do not
move and to precompute as much information as possible about these
objects to save time.  For example, bounding boxes and internal
collision data structures are precomputed.<h3 class=3Dsection3><a name=3D=
"sec_10_11_2">10.11.2. Using a Different Collision Library</a></h3>Using=
 ODE's collision detection is optional - an alternative collision
library can be used as long as it can supply <span class=3Dc>dContactGeo=
m</span> structures
to initialize contact joints.<p>The dynamics core of ODE is mostly indep=
endent of the collision library
that is used, except for four points:
<ol>
<li>	The <span class=3Dc>dGeomID</span> type must be defined, as each bo=
dy can store a
	pointer to the first geometry object that it is associated with.<p><li>=
	The <span class=3Dc>dGeomMoved()</span> function must be defined, with =
the following
	prototype:<p><pre class=3Dcode>void dGeomMoved (dGeomID);</pre><p>This =
function is called by the dynamics code whenever a body moves:
	it indicates that the geometry object associated with the body is
	now in a new position.<p><li>	The <span class=3Dc>dGeomGetBodyNext()</s=
pan> function must be defined, with the following
	prototype:<p><pre class=3Dcode>dGeomID dGeomGetBodyNext (dGeomID);</pre=
><p>This function is called by the dynamics code to traverse the list of=

	geoms that are associated with each body. Given a geom attached to
	a body, it returns the next geom attached to that body, or 0 if there
	are no more geoms.<p><li>	The <span class=3Dc>dGeomSetBody()</span> fun=
ction must be defined, with the following
	prototype:<p><pre class=3Dcode>void dGeomSetBody (dGeomID, dBodyID);</p=
re><p>This function is called in the body destructor code (with the seco=
nd
	argument set to 0) to remove all references from the geom to the body.
</ol>
If you want an alternative collision library to get body-movement
notifications from ODE, you should define these types and functions
appropriately.<h1 class=3Dsection1><a name=3D"sec_11_0_0">11. How To Mak=
e Good Simulations</a></h1>[just notes for now]<h2 class=3Dsection2><a n=
ame=3D"sec_11_1_0">11.1. Integrator accuracy and stability</a></h2><ul>
<li>	integrator will not give exact solution
<li>	what is stabilty
<li>	integrator types (exp &amp; imp, order)
<li>	tradeoff between accuracy, stability and work
</ul><h2 class=3Dsection2><a name=3D"sec_11_2_0">11.2. Behavior may depe=
nd on step size</a></h2><ul>
<li>	smaller step =3D more accurate, more stable
<li>	10*0.1 not the same as 5*0.2
<li>	tweak at final frame rate
</ul><h2 class=3Dsection2><a name=3D"sec_11_3_0">11.3. Making things go =
faster</a></h2>What factors does execution speed depend on?
Each joint removes a number of degrees of freedom (DOFs) from the system=
.
For example the ball and socket removes three, and the hinge removes fiv=
e.
For each separate group of bodies connected by joints, where:
<ul>
<li>	<i>m</i><sub>1</sub> is the number of joints in the group,
<li>	<i>m</i><sub>2</sub> is the total number of DOFs removed by those j=
oints, and
<li>	<i>n</i> is the number of bodies in the group,
</ul>
then the computing time per step for the group is proportional to:
	<div class=3Dmath><i>k</i><sub>1</sub> <i>O</i>(<i>m</i><sub>1</sub>) +=
 <i>k</i><sub>2</sub> <i>O</i>(<i>m</i><sub>2</sub><sup>3</sup>) + <i>k<=
/i><sub>2</sub> <i>O</i>(<i>n</i>)</div><p>ODE currently relies on facto=
rization of a ``system'' matrix that has one
row/column for each DOF removed (this is where the <i>O</i>(<i>m</i><sub=
>2</sub><sup>3</sup>)
comes from).
In a 10 body chain that uses ball and socket joints, roughly 30-40% of t=
he
time is spent filling in this matrix, and 30-40% of the time is spent
factorizing it.<p>Thus, to speed up your simulation you might consider:
<ul>
<li>	Using less joints - often small bodies and their associated joints
	can be replaced by purely kinematic ``fakes'' without harming
	physical realism.
<li>	Replacing multiple joints with simpler alternatives.
	This will become easier as more specialized joint types are defined.
<li>	Using less contacts.
<li>	Preferring frictionless or viscous friction contacts (that remove o=
ne
	DOF) over Coulomb friction contacts (that remove three DOFs)
	where possible.
</ul>
In the future ODE will implement techniques that scale better with the n=
umber
of joints.<h2 class=3Dsection2><a name=3D"sec_11_4_0">11.4. Making thing=
s stable</a></h2><ul>
<li>	stiff springs / stiff forces are bad.
<li>	hard constraints are good.
<li>	dependence on integration timestep.
<li>	Use powered joint, joint limits, built-in springs as much as possib=
le,
	avoid explicit forces.
<li>	mass ratios - e.g. a whip. Joints that connect large and small mass=
es
	together will have a harder time keeping their error low.
<li>	if bodies move faster than is reasonable for the timestep
<li>	inertias with long axes
</ul><p>Increasing the global CFM will make the system more numerically =
robust and
less susceptible to stability problems.
It will also make the system look more ``spongy'', so a tradeoff has to =
be
found.<p>Redundant constraints (two or more constraints that ``try and d=
o the same
job'') will fight each other and cause stability problems.
The numerical cause of this problem is singularity in the system matrix.=

One example of this is if two contacts joints connect the same pair of
bodies at the same point.
Another example is if a virtual hinge joint is created between two bodie=
s
by connecting them with two ball joints, spaced apart along the hinge ax=
is
(this is bad because the two ball joints try to remove six degrees of fr=
eedom
from the system, but a real hinge joint would only remove five).<p>Redun=
dant constraints fight each other and generate strange forces in the
system that can swamp the normal forces.
For example, an affected body might fly around as though it has a life
of its own, with complete disregard for gravity.<h2 class=3Dsection2><a =
name=3D"sec_11_5_0">11.5. Using constraint force mixing (CFM)</a></h2><u=
l>
<li>	allow singular configurations
<li>	effects: jitter or strange forces due to error amplification,
	LCP solver may go slow
<li>	allow compliant joints (this may be unwanted also)
</ul><h2 class=3Dsection2><a name=3D"sec_11_6_0">11.6. Avoiding singular=
ities</a></h2><ul>
<li>	Singularity occurs when there are more joints than needed to constr=
ain
	the bodies motions.
<li>	Multiple (incompatible) joints between bodies, esp joint + contact
	(don't collide objects that are joined together).
<li>	increasing CFM
<li>	unintentional - box chain on floor, other assemblies
<li>	use minimum joints for correct behavior. use correct joints for des=
ired
	behavior
<li>	adding global CFM usually helps
</ul><h2 class=3Dsection2><a name=3D"sec_11_7_0">11.7. Other stuff</a></=
h2><ul>
<li>	contact jitter when pushed out too far - soln: use softness
<li>	keep lengths and masses around 1
<li>	LCP solver takes a variable number of iterations (only
	non-deterministic part). if it takes too long, increase global
	CFM, prevent multiple contacts (or similar), and limit high
	ratio of force magnitudes (tree grabbing problem)
<li>	hinge limits outside +/- pi
</ul><h1 class=3Dsection1><a name=3D"sec_12_0_0">12. FAQ</a></h1>This ch=
apter has some common questions and their answers.
For further information, you can check out the
<a href=3D"http://q12.org/cgi-bin/wiki.pl?ODE_Wiki_Area">ODE Wiki</a>,
a community-supported website.<h2 class=3Dsection2><a name=3D"sec_12_1_0=
">12.1. How do I connect a body to the static environment with a joint?<=
/a></h2>Use <a class=3Dfunc href=3D"#func_dJointAttach">dJointAttach</a>=
 with arguments <span class=3Dc>(body,0)</span> or <span class=3Dc>(0,bo=
dy)</span>.<h2 class=3Dsection2><a name=3D"sec_12_2_0">12.2. Does ODE ne=
ed or use graphics library X ?</a></h2>No. ODE is a computational engine=
, and is completely independent
of any graphics library.
However the examples that come with ODE use OpenGL,
and most interesting uses of ODE will need some graphics library to
make the simulation visible to the user.
But that's your problem.<h2 class=3Dsection2><a name=3D"sec_12_3_0">12.3=
. Why do my rigid bodies bounce or penetrate on collision?
My restitution is zero!</a></h2>Sometimes when rigid bodies collide with=
out restitution, they appear to
inter-penetrate slightly and then get pushed apart so that they only jus=
t
touch.
The problem gets worse as the time step gets larger.
What is going on?<p>The contact joint constraint is only applied after t=
he collision is detected.
If a fixed time step is being used, it is likely that the bodies have
already penetrated when this happens.
The error reduction mechanism will push the bodies apart, but this can
take a few time steps (depending on the value of the ERP parameter).<p>T=
his penetration and pushing apart sometimes makes the bodies look like t=
hey
are bouncing, although it is completely independent of whether restituti=
on
is on or not.<p>Some other simulators have individual rigid bodies take =
variable sized
timesteps to make sure bodies never penetrate much.
However ODE takes fixed size steps, as automatically choosing a
non-penetrating step size is problematic for an articulated rigid body
simulator (the entire ARB structure must be stepped to account for the
first penetration, which may result in very small steps).<p>There are th=
ree fixes for this problem:
<ul>
<li>	Take smaller time steps.
<li>	Increase ERP to make the problem less visible.
<li>	Do your own variable sized time stepping somehow.
</ul><h2 class=3Dsection2><a name=3D"sec_12_4_0">12.4. How can an immova=
ble body be created?</a></h2>In other words, how can you create a body t=
hat doesn't move, but that
interacts with other bodies?
The answer is to create a geom only, without the corresponding
rigid body object.
The geom is associated with a rigid body ID of zero.
Then in the contact callback when you detect a collision between two geo=
ms
with a nonzero body ID and a zero body ID, you can simply pass those
two IDs to the <a class=3Dfunc href=3D"#func_dJointAttach">dJointAttach<=
/a> function as normal.
This will create a contact between the rigid body and the static environ=
ment.<p>Don't try to get the same effect by setting a very high mass/ine=
rtia on the
``motionless'' body and then resetting it's position/orientation on each=

time step.
This can cause unexpected simulation errors.<h2 class=3Dsection2><a name=
=3D"sec_12_5_0">12.5. Why would you ever want to set ERP less than one?<=
/a></h2>From the definition of the ERP value, it seems than setting it t=
o one is the
best approach, because then all joint errors will be fully corrected at
each time step.
However, ODE uses various approximations in its integrator, so ERP=3D1 w=
ill not
usually fix 100% of the joint error.
ERP=3D1 can work in some cases, but it can also result in instability in=
 some
systems.
In these cases you have the option of reducing ERP to get a better behav=
ing
system.<h2 class=3Dsection2><a name=3D"sec_12_6_0">12.6. Is it advisable=
 to set body velocities directly, instead of
applying a force or torque?</a></h2>You should only set body velocities =
directly if you are setting the system
to some initial configuration.
If you are setting body velocities every time step (for example from mot=
ion
capture data) then you are probably abusing your physical model, i.e. fo=
rcing
the system to do what you want rather than letting it happen naturally.<=
p>The preferred method of setting body velocities during the simulation =
is to
use joint motors.
They can set body velocities to a desired value in one time step, provid=
ed
that the force/torque limit is high enough.<h2 class=3Dsection2><a name=3D=
"sec_12_7_0">12.7. Why, when I set a body's velocity directly, does it c=
ome up to speed
slower when joined to other bodies?</a></h2>What is likely happening is =
that you are setting the velocity of one
body without also setting the velocity of the bodies that it is joined t=
o.
When you do this, you cause error in the system in subsequent time steps=

as the bodies come apart at their joints.
The error reduction mechanism will eventually correct for this and pull =
the
other bodies along, but it may take a few time steps and it will cause a=

noticeable "drag" on the original body.<p>Setting the velocity of a body=
 will affect that body alone.
If it is joined to other bodies, you must set the velocity of each one
separately (and correctly) to prevent this behavior.<h2 class=3Dsection2=
><a name=3D"sec_12_8_0">12.8. Should I scale my units to be around 1.0 ?=
</a></h2>Say you need to simulate some behavior on the scale of a few mi=
llimeters
and a few grams.
These small lengths and masses will usually work in ODE with no problem.=

However occasionally you may experience stability problems that are caus=
ed
by lack of precision in the factorizer.
If this is the case, you can try scaling the lengths and masses in your
system to be around 0.1..10.
The time step should also be be scaled accordingly.
The same guideline applies when large lengths and masses are being used.=
<p>In general, length and mass values around 0.1..1.0 are better as the
factorizer may not lose so much precision.
This guideline is especially helpful when single precision is being used=
.<h2 class=3Dsection2><a name=3D"sec_12_9_0">12.9. I've made a car, but =
the wheels don't stay on properly!</a></h2>If you are building a car sim=
ulation, typically you create a chassis body
and attach four wheel bodies. However, you may discover that when you dr=
ive
it around the wheels rotate in incorrect directions, as though the joint=

was somehow becoming ineffective.
The problem is observed when the car is moving fast (so the wheels are
rotating fast), and the car tries to turn a corner.
The wheels appear to rotate off their proper constraints as though the
``axles'' had become bent.
If the wheels are rotating slowly, or the turn is made slowly, the probl=
em
is less apparent.<p>The problem is that numerical errors are being cause=
d by the high rotation
speed of the wheels.
Two functions are provided to fix this problem:
<a class=3Dfunc href=3D"#func_dBodySetFiniteRotationMode">dBodySetFinite=
RotationMode</a> and <a class=3Dfunc href=3D"#func_dBodySetFiniteRotatio=
nAxis">dBodySetFiniteRotationAxis</a>.
The wheel bodies should have their finite rotation mode set, and the
wheel's finite rotation axes should be set every time step to match thei=
r
hinge axes.
This will hopefully fix most of the problem.<h2 class=3Dsection2><a name=
=3D"sec_12_10_0">12.10. How do I make ``one way'' collision interaction<=
/a></h2>Suppose you need to have two bodies (A and B) collide.
The motion of A should affect the motion of B as usual, but B
should not influence A at all.
This might be necessary, for example, if B is a physically simulated cam=
era
in a VR environment.
The camera needs collision response so that it doesn't enter into any sc=
ene
objects by mistake, but the motion of the camera should not affect the
simulation.
How can this be achieved?<p>Here is a good solution: when the collision =
is detected, don't create a
contact joint between A and B as you normally would.
Instead, attach the contact joint between B and 0 (the static environmen=
t).
That way the body A will appear to B as though it is static and unmovabl=
e.
This approach may result in some penetration between A and B, but
this will not be a problem in many applications.<h2 class=3Dsection2><a =
name=3D"sec_12_11_0">12.11. The Windows version of ODE crashes with larg=
e systems</a></h2>ODE with <a class=3Dfunc href=3D"#func_dWorldStep">dWo=
rldStep</a> requires stack space roughly on the order of <i>O</i>(<i>n</=
i>)+<i>O</i>(<i>m</i><sup>2</sup>),
where <i>n</i> is the number of bodies and <i>m</i> is the sum of all th=
e joint
constraint dimensions.
If <i>m</i> is large, this can be a lot of space!<p>Unix-like operating =
systems typically allocate stack space as it is needed,
with an upper limit that might be in the hundreds of Mb.
Windows compilers normally allocate a much smaller stack.
If you experience crashes when running large systems, try increasing the=

stack size.
For example, the MS VC++ command line compiler accepts the <span class=3D=
c>/Stack:num</span>
flag to set the upper limit.<p>Another option is to switch to <a class=3D=
func href=3D"#func_dWorldQuickStep">dWorldQuickStep</a>.<h2 class=3Dsect=
ion2><a name=3D"sec_12_12_0">12.12. My simple rotating bodies are unstab=
le!</a></h2>If you have a box whose sides have different lengths, and yo=
u start it
rotating in free space, you should observe that it just tumbles at the s=
ame
speed forever.
But sometimes in ODE the box will gain speed by itself, spinning faster =
and
faster until it ``explodes'' (disappears off to infinity).
Here is the explanation:<p>ODE uses a first order semi-implicit integrat=
or.
The ``semi implicit'' means that some forces are calculated as though an=

implicit integrator is being used, and other forces are calculated as th=
ough
the integrator is explicit.
The constraint forces (applied to bodies to keep the constraints togethe=
r)
are implicit, and the "external" forces (applied by the user, and due to=

rotational effects) are explicit.
Now, inaccuracy in implicit integrators is manifested as a reduction in
energy - in other words the integrator damps the system for you.
Inaccuracy in explicit integrators has the opposite effect - it increase=
s the
system energy.
This is why systems simulated with explicit first order integrators can
explode.<p>So, a single body tumbling in space is effectively explicitly=
 integrated.
If the body's moments of inertia were equal (e.g. if it is a sphere) the=
n the
rotation axis will remain constant, and the integrator error will be sma=
ll.
If the body's moments of inertia are unequal then the rotation axis wobb=
les
as momentum is transferred between different rotation directions.
This is the correct physical behavior, but it results in higher integrat=
or
error.
The integrator in this case is explicit so the error increases the energ=
y,
which causes faster and faster rotation, causing more and more error -
leading to the explosion.
The problem is particularly evident with long thin objects, where the 3
moments of inertia are highly unequal.<p>To prevent this, do one or more=
 of the following:
<ul>
<li>	Make sure freely rotating bodies are dynamically symmetric (i.e. al=
l
	moments of inertia are the same - the inertia matrix is a constant
	times the identity matrix).
	Note that you can still render and collide with a long thin box even
	though it has the inertia of a sphere.
<li>	Make sure freely rotating bodies don't spin too fast (e.g. don't
	apply large torques, or supply extra damping forces).
<li>	Add extra damping elements to the environment, e.g. don't use bounc=
y
	collisions that can reflect energy.
<li>	Use smaller timesteps. This is bad for two reasons: it's slower,
	and ODE currently only has a first order integrator so the added
	accuracy is minimal.
<li>	Use a higher order integrator. This is not yet an option in ODE.
</ul><p>In the future I may add a feature to ODE to modify the rotationa=
l dynamics
of selected bodies so that they exhibit no rotational error with ODEs
integrator.<h2 class=3Dsection2><a name=3D"sec_12_13_0">12.13. My rollin=
g bodies (e.g. wheels) sometimes get stuck between geoms</a></h2>Conside=
r a system where rolling bodies roll over an environment made
up of multiple geometry objects. For example, this might be a car
driving over a terrain (the rolling bodies are the wheels).
If you find that the rolling bodies mysteriously come to a stop when
they roll from one geometry object to another, or when they receive
multiple contact points, then you may need to use a different contact
friction model. This section explains the problem and the solution.<h3 c=
lass=3Dsection3><a name=3D"sec_12_13_1">12.13.1. The Problem</a></h3>An =
example of such a system is shown in figure 13, which
shows a ball that has just rolled down a ramp and touched the ground.<p>=
<center>
	<img border=3D1 src=3D"pix/rollingcontact.jpg"><br><br>
	<b>Figure 13</b>: A problem with rolling contact.
	</center><p>Normally, the ball should continue rolling along the ground=
, towards
the right. However, if ODE's default contact friction mode is being used=

then the ball will come to a complete stop when it hits the ground.
Why?<p>ODE has two ways to approximate friction: the default way (called=
 the
constant-force-limit approximation, or ``box friction'') and an
improved way (called ``friction pyramid approximation 1'') which is
obtained by setting the <span class=3Dc>dContactApprox1</span> flag in t=
he contact
joint's surface mode field.<p>Consider the above picture. There are two =
contact points, one between
the ball and the ramp, the other between the ball and the ground.  If
the box friction mode is used in both contacts and the <span class=3Dc>m=
u</span> parameter
is set to <span class=3Dc>dInfinity</span> then the ball can not slip ag=
ainst the ramp or
ground at either contact.<p>If no slip is possible at a ball contact poi=
nt, then the center of the
ball <i>must</i> move along a path that is an arc around the contact
point. Thus the center of the ball is required to simultaneously move
along the path ``Arc 1'' and ``Arc 2''. The only way to satisfy both
paths at once is for the ball to stop moving altogether.<p>This is not a=
 bug in ODE - so what is going on here? Objects in real
life do not get stuck like this. The problem is that, in the simple
``box'' approximation of friction the tangential force available at a
contact constraint to stop it slipping is <i>independent</i> of the
normal force that prevents penetration. This is not real-life physics,
so we should not be surprised that non-real-life motion results.<p>Note =
that this problem does not occur if <span class=3Dc>mu</span> is set to =
zero,
but this is not a helpful solution because we need some amount of
friction to model the real world.<h3 class=3Dsection3><a name=3D"sec_12_=
13_2">12.13.2. The Solution</a></h3>The solution is to use the <span cla=
ss=3Dc>dContactApprox1</span> flag in the contact's
surface mode field, and set <span class=3Dc>mu</span> to some appropriat=
e value between 0
and infinity. This mode ensures that there will only be a tangential
anti-slipping force at the contact point if the contact normal force
is nonzero. In the above example it turns out that contact-1 will have
a zero normal force, so there will be no force applied at contact-1 at
all, and the problem is solved! (the ball will roll along the ground
properly.)<p>The <span class=3Dc>dContactApprox1</span> mode may not be =
appropriate in all situations,
which is why it is optional. It is important to remember that,
although it is a better friction approximation, it is not true Coulomb
friction. Thus it is still possible that you may encounter some
examples of non-physical behavior.<h1 class=3Dsection1><a name=3D"sec_13=
_0_0">13. Known Issues</a></h1><ul>
<li>	When assigning a mass to a rigid body, the center of mass must be
	(0,0,0) relative to the body's position.
	But in fact this limitation has been in ODE from the start, so
	we can now regard it as a ``feature'' :)
</ul><h1 class=3Dsection1><a name=3D"sec_14_0_0">14. ODE Internals</a></=
h1>[only notes for now]<p><ul><p><li>	Internally, all 6x1 spatial veloci=
ties and accelerations are split
	into 3x1 position and angular components, which are stored as
	contiguous 4x1 vectors.<p><li>	Lagrange multiplier velocity based model=
 due to Trinkle and Stewart.
<li>	Friction due to Baraff.<p><li>	Stability over accuracy.<p><li>	Talk=
 about the different methods possible.
	Say how realtime constraints make the problem much more difficult.<p><l=
i>	Factorizer.<p><li>	LCP solver.<p><li>	Equations of motion.<p><li>	Fri=
ction model and approximations.
</ul><p>Why don't I implement a proper friction pyramid or friction cone=

(e.g. Baraff's version) ?
	Because I have to factor non-symmetric (and possibly indefinite)
	matrices, for either static or dynamic friction.
	Speed was considered more important - the current friction
	approximation only needs a symmetric factorization, which is twice
	as fast.<h2 class=3Dsection2><a name=3D"sec_14_1_0">14.1. Matrix storag=
e conventions</a></h2>Matrix operations like factorization are expensive=
, so we must store the data
in a way that is most useful to the matrix code.
I want to do 4-way SIMD optimizations later, so the format is this: stor=
e
the matrix by rows, and each row is rounded up to a multiple of 4 elemen=
ts.
The extra "padding" elements at the end of each row/column must be set
to 0.
This is called the "standard format".
Hopefully this decision will remain good in the future, as more and
more processors have 4-way SIMD (especially for fast 3D graphics).<p>The=
 exception: matrices that have only one column or row (vectors), are alw=
ays
stored as consecutive elements in standard row format, i.e. there is no
interior padding, only padding at the end.<p>Thus: all 3x1 floating poin=
t vectors are stored as 4x1 vectors: (x,x,x,0).<h2 class=3Dsection2><a n=
ame=3D"sec_14_2_0">14.2. Internals FAQ</a></h2><h3 class=3Dsection3><a n=
ame=3D"sec_14_2_1">14.2.1. Why do some structures have a <span class=3Dc=
>dx</span> prefix and some have a
<span class=3Dc>d</span> prefix?</a></h3>The <span class=3Dc>dx</span> p=
refix is used for internal structures that should never be
visible externally.
The <span class=3Dc>d</span> prefix is used for structures that are part=
 of the public
interface.<h3 class=3Dsection3><a name=3D"sec_14_2_2">14.2.2. Returned V=
ectors</a></h3>There seem to be 2 ways of returning vectors in ODE, e.g.=
:
<pre class=3Dcode>
    const dReal* dBodyGetPosition (dxBodyID);
    void dWorldGetGravity (dxWorldID, dVector3);</pre>
Why?
The second way is the 'official' way.
The first way returns pointers to volatile internal data structures and =
is
less clean API-wise.
For a stable API I feel that filling in vectors is cleaner than returnin=
g
pointers to vectors, for two reasons:
<ol>
<li>	The returned vector values may have to be calculated somehow, so
	there is no internal ``cache'' to return a pointer to.
<li>	The internal data structures may be moved, which is a problem if
	the user keeps the returned pointer and uses it later.
</ol>
As it happens these two cases don't currently happen in ODE - most retur=
ned
vector data is cached and always at the same address.
But having the freedom to change things in the future is useful.
The current API shouldn't slow you down because the cases where you need=
 to
be fast (i.e. getting body transforms) return pointers anyway - breaking=
 my
own rule.


</body>
</html>


------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=body.jpg
Content-Type: image/jpeg; name=body.jpg
Content-Location: http://www.ode.org/pix/body.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIASwB9AMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APf6KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooqK6uEtLSa5kOI4Y2kb6AZNACwzpOrFDkK7IfqDg1JXOe
D7h5dMAlP7x1Eze5bk10dVKPK7GNCqqtNTQUUUVJsFFFFABRRRQAUUUUAFFFFABR
RRQAUUUUAFFFFABRRRQAUUUUAFFIWAYKSMnoPWloAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACuY8f3v2PwlcRg4e6dLdffcfm/8dDV09ebfEq883WNH0tTwu65
cfX5V/8AZ6qCvJGOInyUpM3PD0n2e4s06B4vL/8AHc/+y11tcMkv2dIZh/yxKOfo
Dz+ldz1GRWtdapnBlNS9OUez/MKKKKwPVCiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKAMrxE0kGkPew58y0In47qPvf+OlqsadqMd9AjBhuKhhj+Ieo
q3IiyxtG6hkYFWB7g1534cuZLOe70aV2E+nzMiN3KA/KfyIP41rBKS5TgxVWVCSq
rbZno1FU7G+W6XY2BMoyQO49R7VcrNpp2Z2U6kakVKL0YUUUUiwooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACvFtdvP7U+I2oSA5jt3W2T22D5v/Hi1exXt1HY2NxdynEcETSv9
FGT/ACrwTw2ZLm6NzNzLPIZXPqzHJ/U1rSWpwZhO1O3c9IK7oSnrHius0e4+06Pa
yk5bywrH3HB/UVyin5lH+zW14Um3WdzbE8wzHA9m5/nmtq691M8zKalq8o9zfooo
rkPogooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigArzHxqG0PxvZ
arHxHexbX93TAP8A46V/KvTq4/4l6ab7wfNcxrmawdblceg4b/x0k/hVQdncwxNP
2lJxJIJxIkU8L7c/Mjj+E+n0roLC+W8QqwCTp99P6j2rznwfqourMWztnj5TXUK0
gcSRNsuYvun1HofY11TgprzPBw2KlhZ2fws6qiqun3ovrYS7GjcHa6HsfY9xVquR
q2jPo4yU4qUdmFFFFIoKKKKACiisvUdestPyhfzZh/yzj5I+p7Um0twNSoBe2pfY
LiPdnGN3f0rkzqN/rUpVm8m2HVIzjPsT3qHVblLW38iMDJGMDtVQi57HRSw7mrs7
misPwvqp1HTfLlbNxB8j56sOx/z6VuUmraGEk4uzCiiigQUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUVT1DVbLSofMvLhYwfur1ZvoBya47UvF99
e5j09DZwnjzHwZG+nZf1P0qowlLYuFOU9kdZqmt6fpCZu5wHIysS/M7fQf16Vy03
jfUJJt1tZwRw9llyzH6kEAfTn61ziwZkaRyzyMcs7nLMfcnrVlI8oK6o4dJe8dtP
CxXxam5ceK4NT064sNU02TyLiNopDBJkkEYOM4x+def6hc2Hhi/tI7CO81COZWYr
sVHjwRgHJAbOe3pXSeVXLeJk26zp/wD1zk/mtN0lDVHFmWDpKg6ltUdHonik61rd
tp8ejajbiVtpnnEYReM9mOa9J0zSItNaaRXZ5JsbyeBxnGB+JrxqRnTTd0bsjggh
lOCPoadZ+KvEVhgQ6tO6j+GfEo/8eyaUqc5rRnmZVg4VE60VqnY90orhNM8Zao1p
FJeWkErEc7Mxn+tbMHjCxfAuILiA9yV3D9Of0rndKa3R6sqFRbo6KiqNvrOm3RAh
vYWY/wAJba35Hmr1ZmTVgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAC
o7iCO6tpbeZQ0UqFHU9wRgipKKAPn7SpZPDmp31tcMwGnO6yvg8Ip+8fbHNN1H4p
atrd2kHgzTTIiOBLe3K4RuegB6D3PPsOte9mws2Fzm1h/wBKGJ/kH70Yx83rxxzX
hV5ox8FeI5dGC7bJv3to3rGT0+oPB/PvW8Zt6HlV8JCmnUtf8j3HSr2PUdMguY1C
B1+ZB/A3cfgauV574O1n7LefZZW/cXBAGf4X7H8en5V6FWc48rO3C1lVpp9eoUUV
R1DV7LTF/wBIlG/HEa8sfwrNu250F6s7UdbstNBWWTdL2iTlv/rfjXLah4nvb3Md
t/o0J/un5z+Pb8KyEiJOTyT1JqHNvYtQbNW/8RX2oZSM/Z4T/Ch5P1NUrSzaeUIo
69TToYC7BVGSa6O0tEsrfc33j1NXTpOT1OiFJdSJxHp1pgcYFcxdSNPIzt1NamoX
BuJDg/KKy5FrvUUkd0Y2Q7RtSOk6tHcEnyW+SUf7J7/h1r00EMAQQQeQRXkkq13H
g/VPtenmzlbM1twM907fl0/KsK0epxYqn9tHSUUUVgcYUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFQ3d5bWFs9xdzxwQpy0kjBQPxNcJqvxIV2aHRbZpF6G6mG
1f8AgK9T9Tj6GrhCU3aKKhCU3aKO5vL610+AzXc6Qx+rHqfQDufYVyWoeL7q6zHp
cJgj6faJlyx/3V7fj+VcdJrElxObi6V7ic/xyPnHsBjAHsKmj1hCQJIGUeqnNdkM
G1rI7qeES1mWzC0kzTTO80zfekkbcx/Gn+XSC/syM+cPyNOF7Zn/AJbrXQoW0SOt
RSVkKY8LViKL92KrteWmf+PiP86twXVqYgftEf8A31Q4uxVhvl1yHi1dutad/wBc
pP5rXZi4tT/y8Rf99iuO8YPG+t6d5bq2InztOe61nUXunDmi/wBkn8vzGyc6co9x
Wxo2notmkrxqZHO4EjkDtWXFEZ4IYl6u4ArsYYRGFRRwowKIfCcOQr9xL/E/yRCI
cCl8r2q55dJ5dVY92xSa2R/vKD+FOhE9t/x7XM0PsjkD8ulW/Lo8upcU9xOEXuiW
HXdYg6zRzj0lj/qMVfh8WuuBc2DD/ahcH9Dj+dZfl0nl1m6EH0MJYWm+h0sPiXS5
sBpzC3pKhX9en61pw3ENwu6GaORfVGBH6VwxhB6gU1NPWSUGNNr/AN5eCPxrJ4bs
zCWC7M7+iubt2udMh817uWVFGWSVt2R7E8iujBDAEdDzXPKDi9TknTcNxaKKKkzC
iiigAooooAKKKKACiiigAooooAK5Tx94ZPiPQC1sgOo2ZM1se7H+JP8AgQ/UCurq
te6haafF5l1Osa9gep+g70XtqKUVJWZ4Zo2oC4gUkkMOGB4Ir1G08a6bbaIk+qXS
pcJ8hjAy8p7FVHJz+Wa8n8Q3cMXjC6vrG0mt9PupOsgwDL/EQOwPX65rTh23JgkA
BkibK/Q8H9K3bU4XR5FPmw2I5ejO0vPGF5fxgWcTWkbDq+PM/wABWOEZ3LuSzE5J
JyTT44qspHXIoN6s+hhSI0iqwkftVm2spZz8i8f3j0rZtNOigYM/zsPXpXRGkbqK
juM02wEKedIPmPT2qPUbndmNT9a07pswEIMHHasCTJJJ6100o6XNKK5veZSkFVZF
q84qrItaM6ChKtLpt++lanDdpkhTh1H8SnqKfKtVJFqJK6sZzipKzPXIpEmiSWNg
yOoZWHcGnVyXgrVfNt302Vvnh+aLPdO4/A/zrra4mrOzPJnFxdmFFFFIkKKKKACi
iigAoqKS6t4SBJNGhJAALDJPpUtAk09gooooGFFFNkdYo3kbhVBY/QUAJLLHBE0s
sixxqMsznAA9zXL6j4yXmLSYPPb/AJ7yAiMfQdW/Qe9ZO+XWyt7qEjSK/wA8Vvn5
Ih2GO596WW3j3AKdvHSu2GEf2j0KeCdrzMS/0+XWLgXGqXk9zIOVDMAif7q4wKkG
gQ7RiRxx6CtVLYlx0I9qseXjtXZCPIrI7IU1FWSMA+Hx2nP4r/8AXqWLQIVOZJGf
2HFbeyl2Vd2XYyf7EtP7jD/gVKNCtOTh/wDvqtbZSsvGKLsdjDOhWpPWT86twaBa
mIfNL+Y/wq9sq3Av7upk3Yl6GN/wj9t/z0k/T/Cub8R6JDBqFpIkj52N1x6iu+21
y3iof6Za/wC438xWNaT5DlxiUqLTKWixj7fboeQMn9DXWonzVzGhrnVIfo38jXXK
vNKmtDLL6cKdJqKtqN20m2pttG2tDv5iHZRsqbbRto0DmIdlGypttTQ2zSn0WpbS
1YnNJXZWitmlbAHHrWikcVpFk4HqakdorSLJwMVzuo6g9wSoJCfzrK7l6GN5VX5E
Guam91G0EDbQ3yg+pNehAAAAdBXl8KGfVLGIDIa5jBHtuGf0zXqNc1fdI48XbmSQ
UUUVgcgUUUUAFFFFABRRRQAUUUUAFRzzxW0LzTOqRoMszHgUy7vILG2e4uZAka9S
e/sPevOdb1y41qfHMdoh+SPPX3Pv/KolK2nUaVzX1TxrJIWi0yPYOnnSDn8B/j+V
ctc3DMzXN7cMzHq8jZJ9v/rVXWZpW8uzQSEcGQ/cX8e/4VdttNVJBNMxmm/vt0X6
DtSUG9ZGsabZnz2D61bGCWMw2rEHLD52wcggfw1dtrSO0jEMabQvHqTW3bWMs5+R
OP7x6VS8W2VzpWiHUbX94YT+/AHRPUfT+X0rV0ZSSsXOikua2qJ9PjNzL5Cld+Mj
J7V0NtpcUWC/zt+leN2niK5ivIbyGTMkbBgCeD6g+x6V7Rpmow6pp0N5bn93Kucd
we4PuDxXa8P7OK6hQr865V0LYAUYFOzTaWpNhx+YVkXkPlyZHQ1rA1FcxCWMjv2p
wdmXTlyyOfcVWkFXZFIJB6iqzitjqKMq1TkFaEq8VTkWpZLILS7l06/hu4fvxNnH
qO4/EV6xa3MV5axXELbo5FDKfrXkUgrrfA+q4aTS5W9ZIc/+PD+v51zVo/aOPFU7
rmR2tQXF5bWmPPmVCegPU/hTri4htYWmuJUijUZLO2AK5O41rTdevylq8m2FOZWT
ar89s8/pWVOHM7M8fF4h0ablGzfY25PENkn3BLJ/urj+eKrN4hmkOILQfVmz+grC
utS0vT1Jdw7DtXG698R1to3W3KxqO4ro9nTieR9cxlV2Tt6I9Cvdfntoy91ew2y+
igZ/rXIt4yvte1M6V4ctptQuv45ZnIihH95uwH6nsDXI+G/DfiL4kXIu5ZZbHRN3
zXbD5pvURg9f97oPfpXuug+H9M8NaYmn6VarBCvLHq0jd2ZupPuaylUS0ijto4Kc
/eryb8rlPQPDI0sC6v7k32pEfNMwwseeqxr0Ue/U9/St+iism29z0owjBcsVZBRR
RSKCmugkjZG6MCDTqKAPMtGdl0m2UnlUCn8OKuyNkFj2FVLRfKe7h/55XcyfgJGx
Vh/9W30r346pM+lhrBPyHQSjzBg1cEnrzWRC2JV+taAp1I6k2uWQVPtS7R2NVwxF
PElZOLE4sm2+1NIyaUSYUnNN8wdxU6k2YYq1AP3dVgymrtspMWRUzehFR2QzbXKe
Kx/ptr/uN/MV1+2uS8Wj/T7X/rm386wqO6OPEv8Adsg0Ef8AEzi/3W/lXXKOa5Tw
+P8AiZx/7jfyrr0HNaLRCwj/AHfzE20bakxRilc6Lke2jbUgXPSrMNv/ABNSckhS
mkRQWpY5bpU888drHkkUlzdJbpx19Kwrmd5nLMfwqVFz1exMISqO8thl5dvcOSTh
ewrMlarEjYFUpGq2dD0VkWdDiE/iSwU9Fcv+Skj9a9Jrz/wknmeJAf8AnnA7fqB/
WvQK4az988rEu9QKKKKyOcKKKKACiiigAooooAKqahqNvplq1xcvhRwqjqx9AKq6
94gsPD1ibi9lAJ4jjB+Zz7CvK73U9Y8VXhncta23RT32+ijt9aTvsioxbNLW/EEu
qXYMuTj/AFVtHzgev/1zVOOxlucNdnCdoUPH/Aj3/lV3TtJWCPbBHgfxO3Un3Na8
drFEMt87fpWtLDSlqvvOylh5SKlrZFtqRoFXoOwFb9to8USh5P3h/SqErnCkcfSt
bTrvz4vLY/MOK7Hh+SPMdU6DhDmRZACjA6egpsiJNE8UiB43UqysMgg9QaUjBxRU
mB4Lr+iv4Y8QzWBybZ/3ls57oe31HT9e9db8P9e+yXp02d8QXBzHk/dk9Px/mB61
0/jnw3/wkWhN5Cg39rmW3Pcnun4j9cV47Y3DEKwJV1P0KkV0Umpx5GebVi6FTmWx
9F0tYvhnWP7Y0eKVyPtCDZKB/e9fx61s1zyTi7M74yUldC07qKZTgakbMy/g2t5g
HB61mOK6OaMSRlT3rBnjMblT1Fawd0dNKXMrFCQVTkFT3t9bWgPmyDd/dHJrnbvX
HkJEKhF9Tyamc4x3FUqwhuzQkHNLarNb3MdxE5SSNgykdjWReeJtPsYd7SBmxyM4
wa5ibxPq+vO0Wj2skkecGQfLGv1Y8f1qXJHzdXH4vFNwox5V+J3mr69Adz6jeGZv
7u7gf4Vyx8X3WpXg07QbCa6mP/LO2jLED1JHQe54qx4Q8CWur60kfim9luN4Jjt7
dykZYfws33jxnpivc9L0fTtEs1tNMsYLSAfwQoFBPqcdT7msZ1GtEZwyzld6r1Pl
vXtfvYNQk0+SKb7ashiMGCX35xtx3Oa9B8CfBya8eLWPGak9Hi0vPA9DKf8A2X8/
SvW/+Ea0X/hIP7eOmWx1XZ5f2op8+P8AHHGeuOOlatZOTZ10qEKew2ONIo1jjRUj
QBVVRgADoAKdRRUmwUUUUAFFFFABRRRQB51Mvla7q8PTbdFv++lVv/ZqeeVP0p+r
r5fi3UR/z0WKT/x3b/7LTBXu0XenF+R9FhnejH0KUZxIv1rRBrLHD/Q1qCt6nQqA
8GlxmminKe9YMbEfIwKbuIp2cmmlaY0LvrW01wYDzWNWjYH90azrRvEyrxTgXcg1
wnjm+W11iyjI4aFj+tdTqGp2ulWrXN5OIogcZPJJ9AO5ryrxTryeItXgmhtpYooY
yitJjL85zgdK5+VXSPLxclGDV9TsfC8yT36sp/5ZmuzQc15h4a1D+zrqOVonkTYV
YL1HvXo+n3sF7GZIJAy9COhB9xWtSDWqWhngqqdNxvqW8UoXJwBS8GrMSqBmudys
dUpWQkUIUZPWo7q7WJdq8tTbq7CDanWst2LEknJpwpuWsh06Tk+aQyaRnYljk1Vc
1M5qrK2BW7OzYrytVSQ1NIaqyGs2Zs6HwRHu1O9l7JEq9PUk/wDstdxXIeA4/wBx
fzf3pFT8hn/2auvrz6jvNnkVneowoooqDIKKKKACiiigArG1/X49FtsIgmvHH7qH
OB9WPYUmueIItMHkQ7ZbxhwnZfdv8K4r5p5mubpzLK5yS1aU6NSq7QXzN6VCdTbY
orplzq2oNqOpSG6um/iYYSMeijsBW3FZxQjLfO36UQz7kK/3fSn7ia9Gng4w31Z6
1LCxgtSQycY7egpmSaSgV1WsdVkhzcp9KLeYwTBx+NA5BFRmi11ZhZNWZ0yuJog6
02s3S7rY3lMeD0rUcYPHQ1wThySsebODhLlErx74haB/YuuDVLdMWd8x3gdEl6n/
AL66/XNewVyvxAurVfDcljNGJJbw7IVP8JGDv/Dj8cUk2ndHLiIxdN8xx3hHXjpt
8jOSYX+SQDnjsfw/xr0lPEVg54MuPXyzivPdA021tEQt+8lxyx/pXY2kkCY3oMfS
u2VKMo8zWp4sMbUp+7TWnmdDb3UF0m6CVXA64PI+o7VNnFchq11HZ4u7NvLlTuO/
sfUVzGreK7u7DC4ufLi/55pwP/r/AI1g8O909Duhj7x96Op3+oeJ9O08FPM86Ufw
R8/melchq3iG5v1ZoyIF/uoeSPrXBXPiLfOLezjknuHOFSNS7MfYCuh0HwL4p1aV
bnU5E0y1POx/nlYf7o4H4nPtUydOCaWrFCrXqSutEU5JskknJPrVu10m9u8N5flx
n+KTj9K7OLw7ZaTJiOLfIOksnLH/AA/CllHNciwzlrNnpQwvWTPMbzwzZ2/i+Fbs
faIpxlVk+4G/3fqO/rXS+W1phEUIoGAoGBiofGUXl29reIQJIZcD+f8AStQMl3ax
ygZSRQw/EV1ckYxVkbxhGGkUVIbkpKkkbFJUYMpHYjpXr+jakmraXDdpgMww6j+F
h1FeNz25Q5XkV0fgXXDY6r9gnf8AcXRwpP8ADJ2/Pp+Vc1aF1dHNiad1zI9Qooor
mOEKKKKACiiigAooooAKKKKAOH8Sps8WK+OJLJR9Srt/8UKqitDxiu3W9KlH8cUy
H8ChH9azQa9rCu9FHvYF3ooovxKw9zWkpyoPtWbNxO/1rQiOYkPsK6p7I2juyUUp
OF+tIBk8UjHmsSwpc02imFh3Bq/ZYWFiTgDJJNZ1JqMjx+F9VaMZdbWUj67DWdXS
JjX0g2eb6rrD+IdYkuGLfZUYrboegX1+p6//AKq3dIsYJlH7tT9RXH6a6iNeRXca
HcRIoDEVWHgrX6nylW9STbZtQaNE2FCBfoKZNbTaHdLdRZKdJFH8S1P/AGksbgq1
VtW1dZ7bYcEngVt+8btLYyjem7p6o6mOXeqspypGQakeVhGcccVzOj69ax2cNvcu
0booXcRkH8R/Wt4TxT25eGVJF9UYEVwShZ2Z9DTqQqWcWQscmomNPNROa0O5ETmq
UrZNWJmwKpualktkMhqrIetTSGqkrcGs2QzvPA8e3QXf/npOzfoB/SulrF8JR+X4
Zs+OWDN+bE1tV50nds8abvJsKKKKRIUUUUAFFFFAHmFjGZJJ7i4YvdNK/m7uocEg
j8DTrhWWT2PIra8UacdOvf7YgX/R5iEu1H8LdFk/kD+B9aoMqyqM9O1e5h6ilBNH
v4acalJcpUtXCuVP8VXRVOaII/HQ9KtQt5ie461tLudCfQfSijBoqBir1pjDBIp4
602QfNQtxLcarFWDDqK6CznFzAP7wrnzViyuDbzjn5T1qK0OaOm5nXp88dN0bnfF
eU/EO9c+LIbfJCxWy4HuScn+X5V6u2GUOO9eT/FewkttRsdZRSYZE+zykfwsCSuf
qCfyriTs7s8bFRcqTINHu1jkBc5Fb91q8KxfKwzXPeG9O863F1dL8pGVU+nrWNru
owRalJDbthQM4znFem58kFJniqzbijV1XWS1pMN/Gw9/asXwLoKeNtavINRvJ47e
1RXKQ4BkycYJPT8q5zUNUYxsu7g16Z8FNLlt9Kv9YmUgXkgjiz3VM5P0JOP+A159
es6kkkdmEo3lqj0TRvDmkeH4fK0uwht8jDOBl3/3mPJ/E1rKe1MVg3SnAVlax6lr
aFPULfzIiwHzLzXPyjmuubbs5Nc5qMPlTEqPlbkVpB3VjelK6scd4vtjPorMoyYn
D/h0/rWR4U1EywyWEjZMY3R5/u9x/n1rsbmJZ4ZIpBlHUqR7GvN9PV9M8TRRPwVl
MR9weP8ACto6xaLZ2cgqnJH8wZCVcHII7GtCRapyEKeTXO1oRJaanq/hvVv7Y0aK
dyPPT93MP9od/wAev41r1xnw6ib+zr64OdrzhFH+6o5/8e/Suzrhe+h5U0lJpBRR
RSJCiiigAooooAKKKKAOU8bpgaTN6XRjP/Ao2P8A7KKxQa6Dxwn/ABI4Zv8Anjdx
N+Z2/wDs1c8vNevgXel8z2svf7przKdzxcH3xV+1BeBPpVG9BWYZ7rSJdypGqIwA
HtXc05RVjpvZs2lAUVAepotZvOiDHr0NI33jWKTTLiLmkzSU5VLnAFMoBknAqLUd
UtNLsJILhTPPOpVLZTywPHPoPeqGp64tm7WdgFmvejMeVi+vqfb86oW1ktvvvb6U
vK/zM7nljSVN1F5Hk47HxivZw1Zm6F4ZitIhLcc4HLP2qnqd9a2+pMtkcIAMgHgG
t8QXniFHWGQ2lkAQsu3JY+w7j3ribrwZ4gspGWER3q5J3rIFY/UNj+ZpVKnIlGnH
Q8qGErSjz23NdNYyuS/61ltrdzf6vHaWMMlw5B2qg5OOSfpTrHwN4k1Fwkwgsoj9
55JQxx7Bc5/SvRvDfg2y8NwMYGM91IMSXDjBb2A7D2rCWIqT02NaOAk5e/ojgjq7
Wsnk3kMtvJ/dlQqf1re02+jkj3xSYb1Bwa7a4s4rmIw3VvHNGeqSIGB/A1iz+EdL
jDSWiPase0THb/3yf6YqnUna25rLLXGXNBlN9dubRQSyyr6P/jViHxNazDEqNEfX
7wrJvtAv1X9zIk6jt90/rx+tYc0VxattnheM/wC0MVxzryi9VY0VSvS0f4ndC7hu
BmKVX+h5qJzXELOwOQa6e1jlNtGRcFmIycnNVCspk1s0p0EnVW/YmkaqkzYU1M4m
X7yA/wC7/hVOdsgrghjwARiqb0NKWYYasv3c1f7meu6LH5OhWEfcW6Z+u0VepkUY
ihSMdEUKPwqKe+tbaaOGedI3k+6GOM1525wyklq2WKKKKBhRRRQAUUUUARzQxXME
kEyLJFIpV0YZDA8EGvPZLWTR9Rk0uZmZVG+2kb/lpH/iOh/A969GrI8RaP8A2vp+
ISFvID5lu57N/dPsRwfz7V0Yat7OWuzOnC1/Yzv0e5yciCRCp/CqkcjQS89uCKnt
bj7RDuKlHUlXRuqMOCD7g026iyN46jrXtRfQ956q6LauGAI6GncGqNpN/wAs2P0q
4KhqzEP2+lJIpwDQDTicpSDUgpKk4NIV9Kq5SZq6Zdb08pzyKyfF8sMlh/ZTxpK1
1jcrDIVAc7vrkcf/AFqY9yLFGuXOFjGT7+1Yr3Ek0s+pXnEj8hT/AAjso+lRDDqV
Tm6HiZpUVFWjvIztavV0zThBCpMrgKqKMknsAK8llsPENxqcsn9j6iZJONn2Z8gd
u1ex+EdPbXvEEmsXC5tLNtsIPRpfX/gI/Uj0r0WThRXNipOrOyeiOLCYS8OaXU8G
8MfCjVtXuI7nXg1jZA5MOf3sg9Mfwj68+1e42ttDZWsVrbRLFBEgSNFHCgdBUlFZ
Rgonp06UYKyHBsHIqQyk9OKi604KTVNIppdRQeeagvLbz4CMc9RUktxBbjMjis6f
XR92FPxNVGEnsi4QnJ3ijJmXYTv4x61574y2WmowX0QyWI3Y/vL0/T+Vd1qiyzHz
cnB6+lcxrtiL3SZogMuo3p9RV/BIuonF2LjXLTIrg4VhkYqtIeCTUGkTefo9q/fy
wp+o4/pU8kbylYY/vysEX6k4H865al1e5zzelz1jwZa/ZPCdgpGGlQzH/gZLD9CK
3qjghS3t44YxhI1CKPYDAqSuM8wKKKKACiiigAooooAKKKKAMLxjH5nhS9x/Bsk/
75dW/pXNRqFUGuw8Qxef4b1SIDJa0lA+u04rhluMWCzeqAj8q9PAO8Wj1cufuyRX
vphJcYHRRjNQA1EDnmng16i00Ou93c1tN/1TH/aqZ/vGmWS7LZPU80t1LBZQvc3c
gihXqT39h6n2rCTSk2zVSUVeQ9VyCzEKgGSx6AVz+oa5LesbPSSyQnh7odW9k/x/
L1p4S98TyhGje304HiH+KT3f/D+daGqT6doliLZFEl02FjVRk7uwFZxmnL3tj5nG
54p1PY0NV3/yMiKG10e23y43AZxU9nps+ryLdagGS26xwHgv7t6D2qXTdGkeVb3U
8PNnKQ9Vj9z6n+Va80+3Kr19fStpzc9I7Hdg8vt79X7v8xzyrCgRABgYAA4Aqqcu
3qTQoLtgck1chhEYyeW9aWkEevsVdkiH7rD6VZhluVPGSPep6Woc77oTZct7lcYl
GTS3axPENh6mqi9aJjhBWHIubQxcFzXRWlhYdOapTKGUq6gg9QRVxpmA9aqS3Cls
EYolFjaOW8TWdlb6TcTKnlSsNiGM45Pt0rCtbXxDaWUNzFNFOrqG2ElGA7e38q1/
ErjUdVstLjOQW3yY7f5GfzrbdQqhQBtAwBWUqcYrazZxV8HRr6TiczF4vntCE1K1
kh7ZkXj/AL66Vt22t6ZfoPnUE/iKr3NuCDtGQeqmqWkeFtO1fxBaWjRvbiZjua3b
YcBSenTt3FZSvFXPExORwScqcvvOgFxr0Lq2kas8aA/LEuGX/vlsiusubO4ukV7p
1lnKAOwGATjnA7CuR1zwVe+EbR9Wt9b8+xgZd0c6bZBkgDDDg8kdhVbT/HciYDyB
19DUwlF6o8XE0K0YqnN6Ha2d/f6UQikzW4/5ZSHoP9k9v5V0lhqtrqIxE+2UD5on
4Yf4/hXDW3jHTrkBZ12k9xV9H0+8KvbXSBxyuGwQfanKnGWq0DD42vh/dl70fxO4
orn7XVrq0wl6hmi7SqPmH1Hf/PWtyC4iuYhJDIroe4rmlBx3PcoYqlXXuPXt1JKK
KKg6AooooA4zxTp39n3n9swL/o8xCXaj+E9Fk/kD+B9aoggj1BrvpoY7iCSGZFeK
RSrowyGB4INeeyWkmj6i+lzMzIBvtpG/jj9M+q9D+B716eDrcy9m91setgMRdeyl
8ipPGYZMjoeQauwS+bHnuOtEsYljKnr2qjFIYJufoRXofEj0HozUBp3VSKYCCAR0
NOXk1kwYykzUN7eQ2MXmTHGW2qo6sfQVYtraW8tS2fJdx8vG7HvQ5pbnFi8zwuDa
VaVm+m7/AAKBB1C+EY/1EDZb/af/AOt/P6VheLL97q8tdFscG4nkEa+2epPsBz+F
dNqUX/CO6JJMBuVRy47e5rivC1vJeXkmvXGd0p2W4PZM8t+J/Qe9TG89Is+WwsKu
aY51Z6L8l2PUNL0y30bSrexth+6iTGe7Hux9ycmrMnK1DY3Angwx5HWnS3MMAO9h
XJytOx9KoOL5bbCAE0jyxxDMjgD61zmseIbi2DfZ4cp/z0J4rlzdX+sXHltMTnkj
OABXRGg3udCou+p2F94qs7XKRHzH9E5qCLVr2eIu48rf0XuBWVZaVDaEOf3kv949
B9K0UiLcngVuqcY9DphRjHViFmkbJJYn1qVIQOX/ACp6qqDCj8aM1RqOdRJEUPQi
ueuIzHIyHtW+GqhqcG5BMo5HWsKsLq5hXp3V0czYwfZVntwMIspZP91uf5k1s+HL
b7Z4r02LGVWXzW9tgLD9QKpMBnPeum+Hlt5uu3t0RxBAIx9XOf5J+tefWeh5dd2g
z0iiiiuQ88KKKKACiiigAooooAKKKKAGTRiaCSI9HUqfxFeOWd60+lW0eMBUAPqS
OK9mrxdLdrZ7qMjCx3c0QH+67CvRy5+9JHdgZNNomBqjqmsJpgiRYzNcSnEcQOM+
pJ7CrE06W1tJcSnbHGMsf896q+HNFn1a/bVLxCGf7in+Bewrur1XBWjuyM0zBYOl
dfE9jotHvtQuod8unpnblQkmOew5ptto97q979r1bA8s/JCPuRfT1PvXV2lkkMYA
GAKxfF32xLJX0yVUkLbJVY4BU/xfUH9Ca5YycpJbnyrzDG4xKlUlu9Ol/Ipax4hh
0xRp+mJ5t0/AC/54HvVbQ9IKzNqN8/nXbcBj91PUL/jVHTNNS3fAYyTycyTN1P8A
gPauhMgCCNOEAx9a7PZcq13PrMtyiGEipz1n+XoTSyKcqv51CsIY4GaEUu2BVxFC
DApN8q0PX2CKBIxx17mpNgpM0uaybbIdxdg9aXYPWkzS1ItRyIM9abcrhQM09Kju
zwtJbk/aKMgwOtY+pXSWVnNcuchBkD1PYVqzthTXFeNLrZZwW4PMjFj9B/8Arq0r
uwTMrw7NLe+IZrmY7nMbMT6cgV1juw75rnvCVoY7Wa7Yf607V+g/+v8Ayrckaoqv
3jIZI+a3/A2nPc679vCfurZWBfsWIxj8iT/+usXTtNuNZ1FLK24J5d8cIvcmvW9O
0+30uxitLZNscY/EnuT7muCtP7KOPEVdOVEWtaPZ6/o9xpd+rNbXCgOEbaeCCCD6
5Argn+CHh3/ljqOsQnttnQj9Ur0yiua5wuKe6PLH+CsCf8e3iO/T/rrEj/yxTP8A
hUmrQHNt4pQ+0lkR+oevVqKrmZm6FN7xPNbfwd41sCBb63p8qjtJvUH8MGtWzsvF
tpLvmtNPd+721yylvqGUA12tFV7SRi8FRbulZ+RUsZ7uaP8A0u0aBx33KQfyJq3R
RWbOqKsrXCiiigYVkeIdH/tfTtsRCXkJ8y3kPZvQ+xHB/PtWvRTjJxd0OMnF3R5x
a3H2iHcVKSKSkkbdUYcEH3Bpl3FkeYvUda2PFWnHT7z+2YF/cSkJeKOx6LJ/IH8D
2NUAQw9Qa9yjVU4qaPoaFZVqfN1K1nP/AMsmP0rSiXHJrFmjMEoK8Dqpqw2pyfLt
RQMc571rODl8JTvsZ+rR/bPFtnbjlIYTIR7scf8Asv612tnCEQccKK5TRFN/4hvr
wrwpWJfwUZ/UmtrxFrUOi6ccuA5FefPdn5zmk/a4+ct+V2MvxdrsEVrLattZGUq6
noQe1ZWlzRXOm20luoWMoAqr0GOMD8q8yv8AUNU8X6w9jpSNJg5lmP3Il9WP9O9e
qaLp6afp1vaoxZIIwgY9WIHJ/Gt8G3dy6H0/DmFq0uepPaRumQ29vuU4Yis53Z2J
ZiT71JcTeYVA6AVVmlWGF5G6KM11RjZXZ9PCNldmPrdzukW3U8Ly31qzodqVgM2P
mk6fSs2C1kvbsFzgyNk11kaLFGsaDCqMAUXM46y5hFiC8nk08mkzSZoNBSaQmkJp
uaB2HZoOHQqehFMJpM80rDa0MK6iMMrIe3Su5+HVt5eh3F0RzcXLEH/ZUBf5hq5P
WFAtTN0KDmvRvDFobHwxp0BGGECs4/2m+Y/qTXk4yPI7Hg46PI+U1qKKK4zzwooo
oAKKKKACiiigAooooAK8tv4D/bGq2wHS9dif94B//Zq9SrgPF2mzNrix6bKomv1z
cDB3RAALvB9wAB7jPrXXg6ip1LvsbUcTDD3qVHpY5VLFvEGqrawj/iX2r/O3aWQf
0H8816DaWcNhbqCAqqKyWudI8I6akTyIhUYC55JrmdQ1rWtcLC2j+xWv/PSYYJHs
vX88V0e9Ulpqz5mosTmWIdSMb9uyOi1vxbaafGwEi5HvXEHxLc6xdZiVxbjkyEYB
9h61mfZrNZN1yz3M5Od83IH0XoKvqwIG0gj2rto4NpqU38j3cDkKpzVWvK8lrY2t
JuWa4ZHOSV4NbkaGQ8dO5rD0m0dG+0PwCMKP610VvkRc+tb1nrdH061J0ARcCnZp
maUGuVhYfmnZpgNLmpFYfmjNNBpaQrEqGobw8rUiVXvWww+lJbkdTOuG4xXnniVn
1DxClpFyVCxj6nk/z/Su9uHAySeAM1xmgQG81K71WQcF2EefU9f04q4u12RJm7DC
lrbRwRjCRqFFNCS3NxHb26GSaVtqKO5pZpAozXf+EPDh02D7feJ/psy8Kf8Alkvp
9T3/ACrirVOVeZy1qvIvM0vDuhRaFp4iGHuJPmmk/vH0HsO1a9FFcB5zd9WFFFFA
gooooAKKKKACiiigAooooAKKKKAGSxRzwvDKivHIpV1YZDA8EGvPXs5NH1N9KlLN
HjfayN/HH6E+q9D+B716LWVr+kf2tYbYiqXcJ8y3kPZvQ+xHB/8ArV0Yet7KWuzO
nC13Rnfo9zlbiBZLZlPUDIPvWLmti2uftUBJQpIpKSRt1RhwQfoaxXU/Mm4KemT2
r26T0Z7MpJR5jW0aaDRfDj6ndsEVy0vPGckkV55Nbax8R9QecO9poqtg3BHzSj0j
Hf8A3un16V0GrW7eILmKO63R6TbALBadPNx/FJ7f7P5+ldJpjqLRY1AVY/lCgYAH
auP6vKS5p7HzWWZO3L6xiVq9bevcx7HSrLRrZNO06BYYF5IHVz3LHqTV+4lFrakj
r0FW5rUibzQOCKyb397Phj8q9h613Qs0ktkfXQtZKJHZTSM/ltyp7+lJqsirtgHJ
+839KBIsQB6KvpWe7vc3BPVnbiiY6jtoaWkw/enb/dX+tamaihjEMKRjooxTs0kh
xjZDs0hNQzXMUA/eOAfTvVRtWhHRHNA7pF/NJmsqTW40GfLx9Wplpqd7qknl6ZYS
3bA4PkoWUH3bhV/E0m0ldkyqwirtmuTVee8gtkLTSqgHUk1pWngzXb/Dahew6fEf
+WcA82T/AL6Pyg/99V0em+CtC051l+yfargc+ddnzWz6gHhT9AK5amNpR21OGrmV
KOkNTgreyvPFc0NrY28q2DuPtF26FUEYPIUn7xI4GM+9eugAAADAHaiivNr13Wld
qx5GIxEq8uaQUUUVgYBRRRQAUUUUAFFFFABRRRQAyaTyoWcIzkDhVGST6VzaaNqV
3LLLJMto05zLKAGlI7Ko6KAOmc+4rp6KqMnHYxq0I1bc+y6GHD4R0OKF0lsI7p5B
88t0PNdvxPT8MViap8P/ANzJ/YmoPbFgQILnMsf4H7y/mfpXb0VUKs4O8WdFOTpf
BofPWsaFregszatp0iRA/wDH1D+8hPvuH3f+BAVa0XT2nC3JIKHlQDwfc172RkYP
Suc1DwVpN47TWyvp9weTJakKCfdPun8s+9ejSzJ7VF9x2U8Xr76OUgYIB5g3H1q8
siN0IqC88P67peWMC6jAP+WlqNsgHvGT/wCgk/SqFvewXDMiPiRTho2G11PoVPIr
sjUp1dYs9KlXhNe6zZDD1FOBrNBp6sR0JFN0zW5oZpc1BFLvGD1qXNZtWAfmlzTc
0uakViVDVO/bEg+lW46z9RbEx+lT1M3uc/rczR6bceXzI48tAO5bgfzqC0t00+wi
tx0ReT6nuatXKCV42b7sbb8e+OP51peHtDbXr8vKCLCBv3h/56H+6P6+31rKrUUI
nNVqKCuzR8HeHjdSpq94n7pTm2jYfeP98+3p+fpXfUiqqIqIoVVGAAMAClry5Scn
dnlTm5O7CiiikSFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHH+KNP/s+7/tq
Bf3EmEvFHbssn8gfbB7GuWndHndozlScg16tLFHPC8UqK8bqVZWGQwPBBrya/wBM
k8P6w+lyFmt2Bks5G53R/wB0n1XofbB7162X10/3cvkelg8Rdezl8gzWjpRLSOnq
AazM1r6PHtZpD3WvRq6QZ6Fy7qUnkWRI+8OlctJMqKzu2AOSa372UTOyfw4xXH6v
J5VoyscfNg5qaMbROimuSF2RSaibqZYkXbHuzk9TirMMjpMjR8vnjjNc7b6jbx3H
3t5AP3f8a0bbWAki7Rmd+I4o1LufoB1/KiT11MHUTd2zs2kVEDSMF45yay7zVguV
hIUd3P8ASiy8K+KtbYObVbCE/wDLW9b58eyDJ/A7a6nTfhfpUJEmq3VxqUo5KsfK
i/75U5P4k1zVMZSh1v6GVXMKcdI6nnq3xu7kwWcU17c944EMjfjjp9TXQaf4E8S6
nhrpoNKhPZz5sv8A3ypwP++vwr1OzsLTTrcW9law20K9I4UCL+QqxXDUx838Ksed
Ux1SXw6HI6Z8OdBsSJLqOTUZhzuu23L/AN8DC/mDXWRxRwxrHEipGowqqMAD2FOo
rjlOU3eTuckpSk7yYUUUVJIUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAVnanoWmawoF9aRyuowsg+WRfowwR+daNFNNrVAnbY4e88GajaZfS71bqM
f8sLvhh9JAOfxH41iSTyWcwg1C2mspicBZh8rH/ZYfK34GvU6jmghuYWhniSWJhh
kdQwP1BrspY6pDSWqOuljKkN9UecK3cGrUU27g9f51t3fgy25fTLh7Jv+eRHmRH/
AICTkfgQPasK6stQ03JvrBjGP+Xi1zIn4jG5fxGPeu2GKpVNNmejSxdOel7PzLGa
XNQW9xFcRB4ZVkQ9GU5qXNaWOqxPHWTqb/v2rVjNYOoedc6kLW2QyTyttRR6/wCF
ZTaim2YVGoptkNjYXGtaitlbHaPvSyY4jX1+voK9SsbKDTrKK0tk2RRjAHc+59zV
PQdFh0TTxAhDzP8ANNLjl2/wHatSvKq1HOVzxa1V1JeQUUUVmZBRRRQAUUUUAFFF
FABRRRQAUUUUAFFFFABRRRQAUUUUAFZPiHRhrOnbEKpdwt5ttIf4XA6H2I4P19q1
qKcZOLuhxbi7o8nVBMykRtG+4pLE3WNwcEH8a0Zb6CwszuJDnj610OueGJbu8e/0
ySGK5kAEsc2QkhHAbIyQccdDnA9Kwk+HN9qUwk1vWNkY6W9iuPzdh/JR9a9hY2lK
Ccnr2PXjjaXJd79jlr7xNBbj7yJngbjkn8KzZPCnirxbMrWlhJBbE58+9JiX8FI3
H8BXsmj+E9C0Ih9P06FJh/y3f55D/wADbJ/WtquepmEnpBWOatj5zVkeWaJ8FbC2
Ky61qU97J3hg/cx/Qn7x/AivQ9L0PS9Fi8vTbCC1U/eMaAM31bqfxrQorinVnP4m
cUpyluwooorMkKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAKKKKACiiigAooooAyNQ8NaZqEjTGE29yf8AlvbnY5Pv2b/gQNYN
1oOsWGWh8vUYR/dxHKB9D8rfmPpXa0VtTr1IbM2p4ipT+FnnDapHG3kmG5F12tzA
/mE/7uM103hrQmsA9/eIPt8/UZz5S/3R7+v/ANauhoqq2IdRWtYutipVVZ6BRRRX
OcwUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFAH//2Q==

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=joints.jpg
Content-Type: image/jpeg; name=joints.jpg
Content-Location: http://www.ode.org/pix/joints.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIAHECUgMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APXttLtqXbS7aAIdtLtqC41G2t8gvvb+6nNZk2q3M52Qr5YPZeT+dF7Abe2l
21hQQXed3mumf9rk1caKaUASOzAetctTF046LUpRZo7KXZVCOCWP7jsv0NWEe4Xq
Q31FTHGwe6DlZY2UbKaszfxR/kakWaJphDuAlKlghPJHrj05reFenPSLFZjdlLsq
fZS7K1EV9lG2rGyjZQBX20bKsbKNlAFfZSbKsbKY7xJ96RF+rAUARbKNlI17Zp1u
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
L6b4X09bWxhAbGHkI+Zv/rVtVpGKiI8Vi1/xNoziN7u7jI/guVLfowrbs/iXqMeB
d2UE49UJQ/1H6V6ZLFHMhSWNJEPVWGRWLeeD9CvclrBImP8AFCSn6Dj9KoDGh8d+
H7/AvrSSFj1LxhwPxHP6V0Wk3mj3kDRaZNBIg+ZkXr9SDzXMXnw0t2ybK/kT0WZA
36jH8qkTwDPZASabrU9vNgbsAgMfwI4/OgDqZtH0+fO+1jB9UG3+VZ83ha1fmGaS
M++GFZG3xxpnRrfUIx9M/wDsp/nSr45ubMhdW0W4gPdlzz9AwH86AMDx5pMuk6Za
yNKjo9yFGMg/cY1xKT+9dd8RfE2n6zpVhFZyPvWcuyOhBA2kfTvXALL710U3oSzX
Wf3qVZ/eshZj61Ks9aXEawn96cJvessT+9PE/vTuI0/O965nx5feT4YlQHmVlX9c
1qif3rjfHckl42m6dD80k8uFX1JwB/OpnK0WNHp/gez+w+CdJhxgm3EpHu/z/wDs
1ekeFIcQ3E5H3mCD8Of6iuTt4EtraKBOEjQIv0AxXe6FD5GkQAjlwXP4/wD1sVyF
mjRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABRRRQBRvNF0y/ybqxt5WP8AEUG78+tWoIIrWBIII1jiQYVF
GABUlFABRRRQAUUUUAVZtMsLibzp7K2ll/vvEpP5kVaAAGAMAUUUAFFFFABRRRQA
UUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFIyhlKsAQeo
NLRQB5J8X7Wzsv7Ja3toYpJTMWaNAu7Gzrj615mste0fFHwpqXiay09tKVftFq7k
l+QVYDIxkHqo556dOa8ZvdA8SaSxW90eRgP4oGz/AOOtg/lmtYSSVhND1lqQS1jH
UoYpBHcb7aT+5cIYz+tW0nDAFWBHqDWiZJoiWnCWqAlpwlp3Aveb71jWNqdb+KGm
QEZitF89/bb8w/XaPxq55ta/ww057vWda1UIWZ5VtIfwwW/9lrOo9Bo9U0nTm1G8
CHIiXmQ+3p+NdyqhFCqAFAwAOwqpplgun2axDBc8u3qauViUFFFFABRRRQAUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFNdEkUq6qynqGGQadRQBiX/hLQ9SjZJ9
Piw3XYMD8un6Vxep/BLQrgtJYO9pIenlkp/6DgfpXp9FAHgOo/CHxLYZaxvVukHR
ZUDfquD+hrlb3RvEWluUvdHkbHUwNu/8dbDfpX1RTJYo5kKSxpIp6qy5FUpNCsfI
8mqQQ7knZoJAD8k6GM/ka94+Evhw6X4Qsbq4TE06GfBHOXO4k/gQPwrpr7wdoOoD
E+nREZyVHCn8OlbiqqKFVQqgYAAwAKHK4WFoooqRhRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAH//Z

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=ball-and-socket-bad.jpg
Content-Type: image/jpeg; name=ball-and-socket-bad.jpg
Content-Location: http://www.ode.org/pix/ball-and-socket-bad.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIASwBkAMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APSMUYp2KMUANxRinYoxQA3FLilxS4oAbijFOxRigBuKMU7FGKAG4oxTsUYo
AbijFPxRigBuKMU7FGKAG4oxTsUYoAbijFOxRigBuKMU7FGKAG4oxTsUYoAbijFO
xRigBuKMU/FGKAGYoxTsUYoAbijFOxRigBuKMU7FGKAG4oxTsUYoAbijFOxRigBu
KTFPxRigBmKMU/FGKAGYoxTsUYoAbijFOxRigBuKMU7FGKAGYoxT8UmKAHYoxTsU
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
8PItxNtuNQI5lI4T2Uf161pTo21kJs8gvPDOsabEsl1ptxHGRu3bMgfUjp+NZy7l
YMpII6Edq+mqxtS8J6HquTc6fD5h/wCWkY2N+Y6/jXQI8d03xp4g0zAi1CSWMfwT
/vB+vI/Cuv034r/dXU9O+slu3/sp/wAak1H4UxNltN1BlPaO4XI/76H+FcjqPgnX
tM3GSxeWMf8ALSD5x+nP6UAesad4y0HU8CHUI0c/wTfIf16/hVfWtELM13ZruVuX
Rf5ivEjGVYqwII6gitDT9b1XSyDZX08IH8IbK/8AfJ4oA1/FvhGDxJbq6uLfUIAf
Jnx/463qP5fnnhYrfWdHUwXlu0M0ZxuPMcg9Qw//AF+tegR+OJpyP7TsYZ27ywny
nP16g/lUc/ixRKTa2Ksg6faG3fmBipnBSGmR+DvDWpeKJ45b1Hh0pSDK5yPOx/Av
se5p/wASdTk1e9n0Igw6fbfuwkR2lsD1Hb26VN/wsXxAMBHtkUDAVYRgU+20XV/H
lxLqLR21uVXaZtpUSsPz5x3pQgorQTZ5CfB0sDZstSdF/uyJn9RViDwzcMR9s1J5
E7pGu3P4816Pd+B/EFoxB095QP4oSHB/LmoIvCGvzNhdKuB/vLtH61pcDnoIEt7d
IIhtiT7q54FW7fTry8OLa0nmP/TOMt/KvQvD3w1mFxHc6y6LGhDfZ0O4t7MemPpX
paqFACgADsKQHhdt4F8RXWNumyRg95WCfzOa2bX4V6tLg3N1awj0BLkfpj9a9coo
A88tfhPYrj7VqU8nqI0CfzzWvH8OPDkcLp9mld2UgSPKSV9xjArrKKAPnTVtLn0j
VLixuB+8ibGf7w7EfUVS217x4g8H6b4ilSe5MsU6LtEkRAJHoQRzXJXfwplGTZ6m
jeizR4/UZ/lQB5ptpNtdfd/DvxDa5KW0dwo7wyA/ocGsK70XUrHP2qwuYQO7xkD8
6AM3bSbam20mwk4AzQBDto21rWugate4+zabdSA9xEcfn0ratfhx4hucF7eK3B7y
yj+QzQBx22k216ba/CaU4N5qiL/swxk/qSP5VuWnww0GDBnNzcnvvk2j/wAdAoA8
V21LBZXN0223t5Zm9I0LH9K+gLTwpoNlgw6Va5HRnTefzOa10jSJQsaKijoFGBQB
x3gC61/7CbHWLG4SKJf3FxKNpx/dIPP0NdnRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUdaKKAMPU/CGh6tlriwjWQ/8ALSL5G/Mdfxrk5/hLbG7D22pOkJPzB4gz
Y+oI/lXpFFAGdo+iWOhWQtrGEIv8TnlnPqTWjRRQAUUUUAFFFFAFDUNE0zVFIvbG
GY/3ivzD8RzXJan8MtOkR5LC5mt2AJ2MPMX6ev8AOu8ooA+cduDRtrvfFfgS5gup
b7S4jNbuSzQqPmQnrgdxVHwr4Nn1i58+9R4bKNsNkYaQj+Ef1NAEPhLwdNr0wubj
dFYIeW7yH0X/ABr2C3t4bS3jt7eNY4oxtVFGABSwQRW0CQwxrHEg2qqjAAqSgAoo
ooAKKKKACiiigAooooAKKKKACjrRRQBQudE0q8ObnTrWU+rRDP51JbaXp9kB9lsr
eHH/ADzjAq3RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFAH//Z

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=ball-and-socket.jpg
Content-Type: image/jpeg; name=ball-and-socket.jpg
Content-Location: http://www.ode.org/pix/ball-and-socket.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIASwBkAMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APSMUYp2KXFADcUYp2KMUANxRinYoxQA3FGKdilxQAzFLinYoxQA3FGKdijF
ADcUYp2KMUANxRin4oxQAzFGKfijFADcUYp2KMUANxRinYoxQA3FGKdijFADcUYp
2KMUANxRinYoxQA3FGKdijFADcUYp2KMUANxRinYoxQA3FJin4oxQAzFGKfijFAD
MUYp+KTFADcUYp2KMUANxRinYoxQA3FJin4oxQAzFGKfikxQA3FGKdijFADsUYp2
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
O1XdE8TaJ4jjkfRtUtb0RYEghkBKZ6ZHUV414jGoH9oDUv7N8NWviGf+y0zaXMka
Kq/J8+X4yOB6/NS+DrxdA+J/iXUtc0YaBqC6S08Wk2qqYpIkAZmDKcFv3fYY5buK
APeaK8Pk8TfEJfAQ+Io12y+y7xL/AGL9jXy/JMmzHmfez3+nftWxP4s8R+NPGdho
nhnVE0O1/siLVJ7h7ZZ5G8wKVTa3GBvX07+woA9J0/WtN1W4vbexvI55rKXyblEP
MT8/Kffg1fr560K88UaVoPxK1HT7uKPW7HVfOuHihVkkCl/NwrA4GMt68V29t451
HxP4+8M6boVysWnSaaNT1MKiudrD5YySCVIOAcY+97UAej3t7a6dZy3l7cRW9tCu
6SWVgqqPUk1maF4u8P8AiZpU0bVra9eLmRI3+ZR64POPfpTfF2g6R4i8Oz2Wusy6
cuJpWEpjCheck+g68+leb+A7OHxN8UbrxfomnLp3hyztDYWzrH5YvGHBYL6D1/2V
75wAeyUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB55r/wzvNU8
aXHifTPFN1pF3NAtuwgtw3ygDjJbvgHpU3h74YwaZrd1rWtazea9qM9ubXzLsBVW
I8EBRnqOOvc+td7RQB5Y3wbnbTxoH/CX6h/wiom83+y/ITdjdu2+d1xnnGMZ5681
s638OWudfsdc8O63LoF/bWosmaG3WZJIB0Xaxxkepz0HHFd1RQB53pvhzTPhfovi
C/1C9vdUtNSnDzg2/mSHdkEHH3s7uTgVkfAnwlLo2i6hrN3az282oS7beO4GJEt0
ztznpkk/gAa9booA5vxz4Vk8Z+GpNFXU5NPjlkVpZI495dRztxkcZwfwrF8HfDzV
PCl/bO/jHUL/AE+3iMSWEke2IDGBgbjjH0rvqKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigD//Z

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=hinge.jpg
Content-Type: image/jpeg; name=hinge.jpg
Content-Location: http://www.ode.org/pix/hinge.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIASwBkAMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APVMUYp2KXFADMUYp+KMUANxRinYpcUAMxRin4oxQAzFLinYoxQA3FGKfijF
ADMUYp+KMUAMxRin4oxQAzFLinYoxQA3FGKdilxQAzFGKfijFADMUYp+KMUAMxRi
n4oxQAzFGKfijFADMUYp2KMUAMxRin4oxQAzFGKfijFADMUYp+KMUAMxSYp+KMUA
MxRin4oxQAzFGKfikxQAzFGKfijFADMUYp+KTFADcUmKfijFADMUYp+KTFAEmKMU
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
FFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcz408Jz+L9PjsF1y8
021YMtylsoP2hGx8pJ6dD+ZrZ0jSrTRNItNLsUKWtrEsUYJycAdSe57mrtFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAH//Z

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=slider.jpg
Content-Type: image/jpeg; name=slider.jpg
Content-Location: http://www.ode.org/pix/slider.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIASwBkAMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APTcUYp+KMUAMxRin4oxQAzFLinYoxQA3FGKfijFADMUYp+KMUAMxRin4oxQ
AzFLin4oxQAzFGKfijFADMUYp+KMUAMxRin4oxQAzFGKfijFADMUYp+KMUAMxRin
4oxQAzFGKfijFADMUYp+KMUAMxRin4oxQAzFGKfijFADMUYp+KMUAR4oxUmKTFAD
MUYp+KMUAMxRin4oxQAzFGKfijFAEeKMU/FGKAGYoxT8UYoAZijFPxSYoAfilxT8
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
MzGM/wC0MVoRXdlcDMV1E3/AqXvLdAMKUwpVvyiRlSCPY0xoiOoNCmKxUKV5Z8aN
a+weHRYo2JLg7T9O9esuoVST0FfL/wAYNc/tLxU8CtmO3GPxNW5Wi2NLU7f4ZWn2
bwRauRhriSSU/wDfW0foorsKzfD1n9g8N6bakYMVtGrfXaM/rmtKuUskgMgmQROy
uWABU45r0VQQoBOTjrXDaHD5+rwDGQp3n8K7qgAooooAKOtFFAHz98WfDl5beIY7
u2tJZbdotpaNC23BJGcfXGfavOY5ASQCMjgj0r6y8Q6Xc6xpbWlrdi1durmPdken
t9RXimr/AANukd5baEOxJO+1nwfyb+lQ4XHc4FHqdHqS/wDA3iHSGIE0gx0S7hK/
+Pd6zXGsWX/H1pbuo/jtzv8A061m6bC5qo9To9YUOt2bNskkML91lUqRWnDOkg3I
6sPVTms3FoZoq9TK9UUepleoaGaVrJi4Q+9UL47bqUf7RqWKTEin0NQamcXknvzS
S1AoyNVG5mSGNnkYKo6k0+7ulg2jDPI5wkaDLMfQCtXSPDFxL/xMdRhaRkOViVSY
4fqe7VvCDYmzL07RJtVInvVaGz6rF0aX3PoPavdPA0XhTSbeNxfW5vtuMyjy1iHo
uePxrzzbS7a3SsSfQ0ckU8YaN0kQ91IINV5tLsbj/WWsZPqBg/mK8Ht7m5tH329x
LC3rG5U/pW7Z+ONftMD7Z56j+GZQ369f1pgelTeF7N+YnkjPpnIrPm8LXKZMM0cg
9D8prFs/idIMC905W9WhfH6H/Gt+08faDdYDzyW7HtLGf5jIoAyptH1CDO+1cj1X
5v5VSKMrbSpDehHNegWuo2V6ubW7hmH/AEzcGpyiMwYqpI6EjpQByCeGr17dZAY1
Zhny2OCKqzaNqEH3rZyPVPm/lXd0UAebMjIcMpU+hGKFZkOVYqfUHFejSQxzLtkj
Rx6MM1Qm0LTpsn7OEPqhI/8ArUAcJdwW+oDF/a215/18wrIfzYEisa48GeHbgkrY
S2jH+K0uHT9GLL+leiTeFIjkw3Lr7Ouaz5vDV/H9zy5R/stg/rTA8w1LwxHo6w3M
GrXc0XmhfIuI1J6HneCPT+7SB66Hxna3NnYWonhePdcgAkcH5W71yoet6b0JZcD1
IHqmHp4etbklwPTg9VA9PD0XAtB6cHqqHpwemBaD0u+qwelD0XAs76csrKcqxB9j
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
BqbWOp6FM09reSRh97uQX3r6EgeuAMc16VRQB53pHgy/8PeML7xx4g8Qpev/AGa0
dyEtSgQAqxKgE/KFTpgknJ71x/w30Ww1/wCLuu+KNK82TQLWV5LJ3QqjXEqgSFQf
o3vgrXulIFCgBQAB2FAC1ytt4Qkg+J154vN4rR3GnCyFt5fKkMjbt2f9npjvXVUU
AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB4h8Y5P8AisLNP7tgp/OR
/wDCvPw1en/GjSZ9QudPl0pYv7SjQiUysQGiydo9M5z6V49M+t6dn7fos4UdZIfn
X9M1pGSSsJo1Q1PDViQa/YSnaZvLb0kGK0o545VzG6sPVTmtExFsNTg1Vw1OD0xF
gNTg1Vw1KGoAsbqXdUG6l3UAT7qN1Q7qN1AE+6q19N5VlK+eimn7qyfEVx5Wjzc8
kYob0Ar/AAq006l40N44zHaI0pP+0eB/Mn8K94rzr4PaX9l8N3GoMuHvJsKf9hOB
+pavWNE037fd7nH7iPl/f2rmLNjw7pnkQ/a5V/eSD5Aey+v41vUAADA6UUAFFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFA
BRRRQAUUUUAFFFFAFe6sbW9TbdW8UwHTeoOPpWJd+CdJuMmJZLdj/cbI/I5ro6KA
PMtY+FMF8CWjs7v/AK6x7W/Pn+dcDqvwbFszSQW99YsP4oG8xP6/zr6LooA+T5/B
3iSxJ+yahBeKP4Jl2N/n8azprjWdOz/aOi3CqOskQ3r+Y4/Wvre60yxvQftNpDIf
VkGfz61h3fgfS58mFpbc+ituH5H/ABqlJisfMcHiDT5jjz/Lb0kGK0o50kXKOrD1
BzXr+sfCiG9DFreyvM93TY/5/wD164HVfg8toWeCO/sG/vRneg/z9apTCxgh6XdU
M/hHxNY5NrfW96g/hkG1j/n61nTXer6d/wAhLRriNR1kjG5fzHH61SmhWNjdS7qx
4Nf0+fjzwjejjFaCTJIMo6sPUHNVcCxurnvFcpa1igXlpHAAHetvdVbTLH+2fHul
WpG6KFvPk9MLzz+OB+NTN6Aj2Lwzo7WGjabpUK5eOJUIHdscn88mvTrCzSwtEgTt
yx9T3NZfh3TPIh+1yr+8kHyA9l/+vW7WJQUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUVwvxS8Y6r4M0PTrrR4LOa5u75LXF2rMgDKxz8rA5yorA1Hxz4/wDCGoaU3irS
tBl0+/ultf8AiWvJ5qs3cBmOfy9sjNAHrNFYuu+LvD/hpok1nV7WzeUZRJH+Zh67
Rzj36VZOvaQuif20dStf7M2b/tfmjy9vT73Trx9eKANGivOZfiha3vjrw5pOhXen
32l6is5upl3NJGY0LADkbencHiuwh8T6HcaHJrcOq2r6ZHnfdCQbFwcHJ+tAFm70
jT73P2izhcn+Lbg/mOaw7vwLp02TbyywN2Gdy/rz+tdFa3lve2UV5ayia3mjEkci
ch1IyCPXIryDU/id450WzHiPU/DdnZ+HzfC1+x3AkS92nkPz8vQHt+GOaAL+sfCa
O83M9nZXmf4tux/z/wDr1wWqfCJbNmeAahp5HcZdPz/+vX0mCGUEdCM0tAHyVP4S
8UWOTbXdvfIOiv8AKx/P/Gu6+Dfg7U59Zv8AWtZs/s6KFgjBIO7+JgOf92va7rQ9
Lvc+fZQkn+JV2n8xViysbbT7YW9rEI4gSQoJPJ+tO7AsAADA6UUUUgCiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKAPIf2hfK/4RDRvPYrD/AGtH5hHUL5cmentXnutv4Jtb
3SLr4cajqOo+JI71PIgmikkQjnORIg746f8A1x9OywxTKFljSRQcgMoNNjtoIWLR
QxoT3VAKAPG31DRfDvxj8T3PjdYkjvLWE6dPcwmSMxBcOi8HnOB74Przw/8AZ96P
hNc6gLS4Hhs+JVu0typz9jwQTj+7kqPqM19N3FpbXaBLm3imUHIWRAwB9eakKKUK
FQUIxtxxj0oA8NfVfDOsfHXwbc+GVgaBYJklmt4PLRiInIXoMlQefTIFYOt6bfWP
ifUvhbaxuljrerwX0Lr0S3YFpAP90ov/AH7NfRkVpbQBBFbxRiPOwIgG3PXHpXG+
H/AN5Y+MZvFOv6++s6l5H2a2JtlhWCPPYKSCeT6dT1zQB2UccFhZpGgWK3gjCqOg
RFH8gBXzrdfEbw3408bi/wDFOoS23h7S5Q2naakDv9ocf8tJSB+nvj13fSBAIIIy
D1Bqv9gs/wDn0g/79igCdWDqGHQjIpaKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KAP/2Q==

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=universal.jpg
Content-Type: image/jpeg; name=universal.jpg
Content-Location: http://www.ode.org/pix/universal.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQEBLAEsAAD/2wBDAAUDBAQEAwUEBAQFBQUGBwwIBwcHBw8L
CwkMEQ8SEhEPERETFhwXExQaFRERGCEYGh0dHx8fExciJCIeJBweHx7/2wBDAQUF
BQcGBw4ICA4eFBEUHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4e
Hh4eHh4eHh4eHh4eHh7/wAARCAEsAZADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEA
AAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6
Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZ
mqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx
8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREA
AgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hp
anN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPE
xcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3
jFGPanYpcUAMx7UYp+KMUwG4oxTse1LigBmKMU/FGKQDMUYp+KMUAMxS4p2KMUAN
xRj2p2KXHtTAZj2oxT8UYpAMxRin4ox7UAMxRin49qMUwGYoxT8UYoAZijFPxRig
BmKMU/FGPagBmKMU/HtRigBmKMU/FGKQDMe1GKfj2oxTAZikx7U/FGKQDMUYp+KM
UAMxRin4oxQAzFGKfikx7UwGYox7U/HtRigBmPajFPxSYpAMxRin4oxQAzFGKfij
HtTAZikx7U/FGKAJMUuKdilxQAzFGKfijFIBmPajFPxS4pgMxRin4oxSAZijFPxR
imAzFLinYpcUgGYoxT8UYoAZijFPxRimAzFGKfijFIDA8feI7Twh4N1XxLep5kOn
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
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABXmf7SPgLxF8S/h6vhDQdVstMiur2J9Qlud/zQId
2xQoOTvCHnA+X3r0yigD59+Jf7LHw+1TwPc6f4I0a00HxCPKaz1CS4mYKVdS275j
1UMMgcEg1Y8dfBXxT8Udc0eP4k+ILJvD2l6QYltNMkkDzai0QV7ltygYDEso5+6A
eGYH3qigD571r4NfEPXvgp4d8B674k0W7v8AQNct7qC/zL++s4lcKjjbnzBvx3BA
GTnJNv4t/Cz4jeKfEGsNFL8P/E2i38e2zj8S6ay3OkcEEQSwJlhkk5Y54HuT7zRQ
BxvwU8Ef8K5+GGi+DTqLai+nxv5lwV2h3eRpG2jsoLkAegFYv7Q3w71T4keHvD+m
6VfWdnJpniC21SVrndh44kkUqu0H5jvGM8cGvTKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigD/2Q==

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=hinge2.jpg
Content-Type: image/jpeg; name=hinge2.jpg
Content-Location: http://www.ode.org/pix/hinge2.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIASwBkAMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APRcUYp2KMUANxRinYpcUAMxRin4oxQAzFLinYoxQA3FGKdijFADcUYp+KMU
AMxRin4oxQAzFGKfijFADMUuKdijFADcUYp2KMUANxRinYoxQA3FGKdijFADcUYp
2KMUANxRinYoxQA3FJin4oxQAzFGKfikBBJAPI60ANxRin4oxQAzFGKfijFADMUY
p+KTFADcUmKfijFADMUYp+KMUAMxRin4pMUANxSYp+KMUAMxRin4oxQAzFGKdijF
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
AooooAKKKKACiiigAooooA//2Q==

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=contact.jpg
Content-Type: image/jpeg; name=contact.jpg
Content-Location: http://www.ode.org/pix/contact.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIASwBkAMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APcsUYp2KMUANxRinYoxQA3FLilxRigBMUYpcUYoATFGKXFGKAExRinYoxQA
3FGKdijFADcUYp2KMUANxRinYoxQA3FV53ydg/GppX8tfc9Kp59T1oAWloFOoAAK
fikUc07FACUYpaMUANopaKAG0UuKKAG4opcUUAJyDkVOjh+O9QUdDkdaALWKMU2N
t689RUmKAG4oxTsUmKAExRilxRigBMUYpcUYoAbijFOxRigBuKMU7FGKAG4oxTsU
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
nXUaL4Jgtpjd6ntnm3bliHKL9fU/pXXYwMConV6RGkVNO0y00q1FtZwrHGOuOrH1
J7mrdFFYFBVLWLWS+0S/s4dvmz20kSbjgZZSBn86u0UAeNeHPDXxX8NeFY/DljH4
W+yIJFWaZ5WkG9ixPoeWP8P51PH8I9T0rwb4fh0rUbZtf0W8a+jeYN5EjMQWj9QP
lXnvg9M8evUUAeY6f4J8QeIvGp8T+MRZWwgsnsrWysZC+A6srMzH2dvzHTHPPy/D
34gD4f3fgWKXRm0uN8wXbSOJJU8zzAhGMLzyT+HPWvbqKAPDvjFFBYeFfDUFtqEK
eKNPMdtFBBIGlZZI9j4XrgkDBI/nXq3g/QE8L+EdL0ZMZtYAshHRpDy5/FiTVubQ
tIudVi1WfS7OXUIgFjungVpUA6YYjI6n860KAPJPiH4L8beJvGdnqFgNIn0nTwrW
tpfSMUeTHzO6AcnPA5xhR6mvQfC3/CRf2OP+Eo+w/wBo+Y3/AB5Z8vZxjrznrW1R
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRR
QAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAf/9k=

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=amotor.jpg
Content-Type: image/jpeg; name=amotor.jpg
Content-Location: http://www.ode.org/pix/amotor.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBjQ3JlYXRlZCBieSBQYWludCBTaG9wIFBy
bwoKQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEwYSAgUmV2OiAxMi8yOS85NCAgUXVh
bGl0eSA9IDc1LCBTbW9vdGhpbmcgPSAwCv/bAEMACAYGBwYFCAcHBwkJCAoMFA0M
CwsMGRITDxQdGh8eHRocHCAkLicgIiwjHBwoNyksMDE0NDQfJzk9ODI8LjM0Mv/b
AEMBCQkJDAsMGA0NGDIhHCEyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMv/AABEIASwBkAMBIgACEQEDEQH/xAAfAAABBQEB
AQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMA
BBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1
Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOU
lZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm
5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/
xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJ
IzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNk
ZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4
ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhED
EQA/APRcUYp+KMUAMxS4p2KMUANxRinYoxQA3FGKdilxQAzFGKfijFADMUYp+KMU
AMxRin4oxQAzFGKfijFADMUYp+KMUAMxRin4oxQAzFGKfijFADMUYp+KMUAMxRin
4oxQAzFGKfijFADMUYp+KMUAMxRin4pMUANxRinYoxQAzFGKfijFADMUYp+KMUAM
xRin4oxQAzFGKdijFADMUYp+KMUAMxRin4oxQAzFGKdijFADMUYp+KMUAS4oxTsU
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
+5VwG3MFABZ8nj5T7c+oal4tlt7nWEsNPW8i0WJZL5jNsbJXeUjG0hmCc8kDJA7k
jTsvDumWGvalrkNuP7R1Ep587cttRFUKvovyg47n8Mee3EKaRqHj+K+vri3luW+1
2kSOB9qV4QoCAjLHeuzA749RQaHqFndwahY297bOJLe4jWWJx/ErDIP5Gp68vn1T
xX4H8F6bb2uk2T2uk6NHNfXV7OVVnUAGGMLzv9CeDkCvRtMvf7S0mzvvJeH7TAk3
lP8AeTcoOD7jOKALVFFFABRRRQAUUUUAFFFFABikxS0UAJijFLRQA3FGKdRQA3FJ
in0YoAZikxT8UYoAWiiigAooooAKKKKAOB+Ltv5nhGGcDmC7RifQFWX+ZFeMRSV7
78Rbb7V4B1VcZKRrL9NjBj+gNfO8Ulc9ValI145KtxyVlRSVbjkrBoZqxyVbjkrK
jkq3HJUNAacb1aR6zI5KtRvUNDNFHqwj1no9WEeoaA0oJMSofcVr6y2TCf8AZrn4
nww+tbWrPmGA+1ZtaoZmO1cX460Y39guoW65u7ME8dXj7j8Oo/H1rrHeqk8yRoWd
gq+pralUdOSmuhMkpKzPKtOdZp4pR1xiuj0K6jtp9Q3kliybVHJPBquPC8sF9c3l
s8cVhuMiLJkEDqQPbrinWMc8DXk1vEs0zgFUB5wM9M/Wu3mw+Mxar81qaXvPs/U5
OaVKDit+hp3U+UMt64jiHIiB6/X1rIa7vNX+SyH2ez6GYjr/ALo7/XpUkGlyXb/a
NVkEjdRbg/Kv+96n9PrWg7gDA4A6CvRrZnTpw9lg1aPfuRTwrk+es7sp29nb2CER
KS7ffkY5ZvqabK9Pleqcr15F3J3Z22toiOWSvY/hAP8Aik7pv718/wD6AleJyyV7
f8IRjwUzf3ruQ/oo/pW9JagzvaayIzKzKpZeVJHI+lOoroJPPPHfhjxd4i16wk05
tDm0azAk+w6jLMFmmzw0iovzBeMAnGc5Fd5Z/avsNv8AbfJF35a+f5GfL34+bbnn
bnOM84qeigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigChrlr9u0DUbTGfPtpIx+KkV8qRSZAr66r5K1S1On61fWTKVNvcSRYI
x0YisqiGieKSrkclZEb1cikrBoZrRyVbjkrKjkq3HJWbQzUjkq1HJWXHJVuOSpaA
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
8yrjMUJ9gep9z+AFdHonh/TvD9p9nsIdpbmSVuXkPqx/p0HatStYUlHVibCsjxXb
3F34P1u2swxuZrCeOEL1LmNguPxxWvRWojyRIru80X4YLb3qzhrq2mSJIQpjjjt2
8zJz2B2n3NdVoXj+DxD43vdCs7KYWttafaFvJVKecRJsOxSOVzkbu5B+tdHa6Npl
jdSXNpYW0E8md0kcQUnJyeR6nk+p5rEi0G9T4pXGvlU+wPo6Wand83mCUsePTB60
AcN8bvD+rTyWOv6fBJcQWsTRXKRjLRrnIfHccnPpxXm+jaykyqN1fVVeZeNPhDYa
zJJqegNHpuqH5mQDEMx9wPun3H4g9a7cLi3Rdnsc1fDqor9Tz+7iW7tGxzkV7h4O
1Y614UsLt2zN5flzeu9flY/jjP414BDJf6LqLaVrdrJaXa/wydGHqp6MPcV6h8Lr
/wAm8v8ASmb5JQLqEe/Cv/7L+td+PUa9FVodDlwrdKo6cup6ZRRRXhnphRRRQAUU
UUAYviXwro/i3T0stYtjNHHIJYmRyjxuO6sDkVlW/hHw94Jt9Q1nSdHuZroWjJJF
E8k0l0Ad2NpJ3MT3xnn0rr6KAPMPhrdXeq+IdQ1bXNF1q01u4twm66sGgtbeBWG2
CIk5JydxyBnB9OfT6KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKAOO+Jmja9rvhL7J4flK3IuEkmhExhNxEM7o94+7kkdx0rj/CHgTxBo3jO+1q2
0Ww0OC70eS1ghjuvtP2ecspVpCcF+VyceoFew0UAed/CyK7trjxdbX1/Lf3EOsuj
3EowXPlpk4HCj2HSvRKoadoun6TPfTWVv5Ul9Obm5O9m3yEAFuSccAcDAq/QAUUU
UAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAGVr3hzSvEtgbPVLVZkHKP0eM+
qt1BrzuHwvqngfX7O+V2vtLil/4+FHzxoeGEij2P3hxxzivWazte1q08PaJdarer
K1vbruZIU3u2TgADuSSP61tSrSp3S2e6M501Oze6NGiuN8PfEO01vxB/YVzo+q6R
qLW/2mKK/hCeZHnGRgn3/I12VYmgUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFFFABXLfES28RXfgq9h8LSPHqjbdvluEcpkbgjHo2O/wDW
upooA8V8LeE9ftfiJZeIIvDl1p9qdPlgZtQ1H7VIZsEh5DuyATgYUds4Ga6b4dy6
0PFvjO01zUvt1zBNa5KArEhaIsVjUnhRnHqcZPNeiVmWGhWWm6vqmqW6uLnU3je4
LNkEou1cDtxQBp0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFAH//Z

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=sf-graph1.jpg
Content-Type: image/jpeg; name=sf-graph1.jpg
Content-Location: http://www.ode.org/pix/sf-graph1.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBIQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEw
YSAgUmV2OiAxMi8yOS85NCAgUXVhbGl0eSA9IDgwLCBTbW9vdGhpbmcgPSAwCv/b
AEMABgQFBgUEBgYFBgcHBggKEAoKCQkKFA4PDBAXFBgYFxQWFhodJR8aGyMcFhYg
LCAjJicpKikZHy0wLSgwJSgpKP/bAEMBBwcHCggKEwoKEygaFhooKCgoKCgoKCgo
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKP/AABEIAR4B
sAMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1
EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR
8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdo
aWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPE
xcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEB
AQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQF
ITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SV
lpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo
6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/APVaKKKACiiigAorD8VeLNE8KW8E2v6g
lok7FIgVZ2cgZOFUE4HGTjAyPUV5fqHxE1GbWdY1DSdXSTwvp+o6S8sqRIwjs5kb
zuq7yS+0EcupyBjBoA9sorz/AMYeK7/S/iL4a0y1hvn0x8f2k0Vurxjz2MVvuc8p
iRWJ5GR03dKuR6/dSfE3VrMXiL4f0nSUe98wKiwXLuXUliAceUCcg7R3waAO0ork
/DnxE8K+JNTXT9G1dJ7xlLrE0UkRYDrt3qATjnA5wCegNc34++JVh/wg19d+EtW/
4mf2WO8t3+zN/qftSwM2JE2/e3Lg898d6APUKK5vxV448OeFLiCDXtTS1nnUukYj
eRtoOMkICQM5wTjODjoa8zf4kayYriOHUbGOzvPEV3p0WtXEQeCyt1VDFjYArMd5
Ks5wdp3fLkqAe4UV53oep+I9JeK81LWdO8TeE3gnuJ9Yt40he18tSSNkZIkT5SPl
BbJOcBQCfDz4mad4nuNdhuby1ieynnmgKxvGpsUKhZnZ+Afm55H0FAHolFc34V8c
eHPFdxPBoOppdTwKHeMxvG20nGQHAJGcZIzjIz1FZcfxX8EPLaxrr8Aa5xsLRSAD
LFfnJXCcg/exxg9CDQB3FFV9RvINO0+5vbyTy7W2iaaV8E7UUEscDk8A9Kz5/Euk
wafpF7Ld7bXVpYYbJ/Lc+a8ozGMYyuR64x3xQBsUVy//AAn/AIX/AOEm/wCEf/ti
D+1vN8jytrbfMx9zfjZuzxjOd3y9eK6S4nitreWe5lSGCJS8kkjBVRQMkkngADvQ
BJRXleu/FDS9TuPD0Hg/Wkknm1q0truMwFWe3kLBgBIoOMgZK8jI5GRmTSfF2rJ8
ItTvb6Se58U2Ms+mzLBAjOl4ZfLiUKBsbBki+7kH3PFAHqFFeX6t4u1Z/hFpl7Yy
T23im+lg02FZ4EV3vBL5cqlSNi5Mcv3sAex4rpPEfxE8K+G9TbT9Z1dILxVDtEsU
kpUHpu2KQDjnB5wQehFAHWUVzereOPDmklxfamihbNNQ3RxvKpt3kEayBkBBBZgO
Oec9Oax/CHixhpnjDUPEuoIlnpWtXVskrqqiOFNmxflGWOWwOrEkDk4oA7yivM4/
iJZa9478JWXhbV0uNPumvEvohFtYlIQ8eQ6hlGc4IwDgjnBrH8O+J/E3jC4kntPF
Oj6FqcU8sUfhua1DyOYyW2zM5EmSOGMYwAMjDBgAD2SivK/EnxOuPDVj4bg1+C10
/XrqeJtStGV5lhtSzq8qMhIz8gIXLEZxg4zXSXfxL8IWl3Z21zrcEc13FFNEGR8B
JAChdtuEyCD8xGAQTgGgDsKK5vxH448OeGrxrTXNTS0uBALny2jdi0ZfYCuAdxzn
gZOATjAJrn/HPjiKX4Vap4j8G6mjvC0aRzrGCUbzkVgyOODhuhHQgjqDQB6JRXD6
d4b8aQahbTXnj37Vaxyq8tv/AGPCnmoCCybgcrkZGR0zVj/hZXhP739rf6P9q+x/
avs032fzv7vnbPL6c53YxznHNAHYUVzfirxx4c8KXEEGvamlrPOpdIxG8jbQcZIQ
EgZzgnGcHHQ1y/ir4saPovjDR9NW/tX091kfUZxFJIYlaJXgMbLwwbcOQG49KAPT
KK8/l8X+IYfiPo+g3ugwWGmX0t2kd09yJnuUiQsrqFI8v+EkMD97HGDXcajeQadp
9ze3knl2ttE00r4J2ooJY4HJ4B6UAWKK8j1r4k6hoPw7j13Ujaxa1rDG50rT5Ime
NLfdGNpdD8x8tvM3MVOXxgYxRonxd0RvEviabUteT+wUa1TTQbdg2TGxlwoTzCNy
8lhgcdMjIB65RWP/AMJNo3/CM/8ACQ/2jB/Y3led9qydu3OMY67s/Ltxu3cYzxUf
hXxZoniu3nm0DUEu0gYJKArIyEjIyrAHB5wcYOD6GgDcorj7D4l+ENQ1uPSbPW4J
L6SUwooRwjuM8LIV2HJGBg85GM5FaFp4x0G71aPTLe+330l1cWax+TIMzQKGlXJX
Hyhgc5wc8E0AdBRXL6J4/wDC+ua2+kaVrEFxfrvxGqsA+3rsYgK/r8pOQCRwM15/
efGDTNRu/ENjB4jg0e1X7P8A2XqSadLO7ZGZtyMMHkbRkL1zzigD2iiub8VeOPDn
hS4gg17U0tZ51LpGI3kbaDjJCAkDOcE4zg46Go38feGh/Zgi1L7TJqURmtYrSCW4
kkQZydkalhjDDkDlWHVTgA6iivO/EfjiK90zwrqHhLU0ltL7X7bT7h1jGTG27fGy
uMqTgHoDggjg1seH9cvV8Zaz4b1lkeeJRqFhMq7TNauxBDAZAMbfJkkFhg46kgHW
UUUUAFFFFABRRRQAUUUUAeZ+N9StfC/xN0fxB4idxob6dLZQSiJpVtLrfuLkAHaX
j+UFcscEEYBNc34esrDxzqXxVt9NtvJtdSis3thPG0AaTy3ZJiBztZwJM4ywbJHJ
Fe4UUAeF6HoGo+O/h74t1jzX+2eIILNYldEBmltI1DNwwCh5VdRnbgAHGDirFvp+
oeKfhh438QaYznUPEM7y2+0ssrWkD7EgZUBG/Yki4Gd28Ak549sooA8buPFGieNt
Z8EWHgoOl5YXiXcpW2aEWVoiYkhZgMAMCqYXKEgAnGM8/FBFF+yjM8USI8zb5GVQ
C7fbQuW9ThVGT2AHavoSigDyvUNe07wV8VNcv/FszxW+qWdv/Zt2YXlWJI8iWEEA
lSXIcquRyCSCRXN+B/FFr4e0DW5rzw9Ovhi88RXkF5uiA/s6NkiCJJAAcryVIHAx
jkkA+8UUAeL+EbvRr74r2lz8NVnXSHtX/twQQGG0GFYQYRgMSbh/COnI/wCWlY98
H1Dwv8TvClnDPJ4hk1ifUkshEwd7cTQNvXIwcgZABycjAORX0BRQB5H4V1nQvFfj
Dw9fWereJtavLJZmBls4kgsTJEQVnZIkGWAIGCw3L1x14vwt4q8PW3wSl8NXFnO2
t38U6QWq2RY3kryMsUqHG1trbRkncDEQASFz9IVz/gHw5/wiXhOx0T7V9r+y+Z++
8vy926Rn+7k4xux17UAXNG0+WPwxY6brTJfTrZx2920hMqztsCuTuGWDHPUc55ry
/wAFaVdXPiPRfDl9JdTJ4Ka4e6e4CtFcNIf9DKrvJBWMlgSPk27eM17JRQB89+Eb
sHWPD+ieFtQutRs7LUQ0vh/WNIjE2nRqz+bO8+AA6sSVwQQXVeTlT6x8VtP1DVPh
3rtnpDOLx4MqsZbdIqsGdBtBJLKGXHfdg8GusooA8L8T+MfDPii48Aw+G4HZ7TWr
LJFmY1skJwIS2MAnAwqkg+UeflFXL7QZ2+K7eH7c+XYyanbeK02AMIgiyJMWLENu
eURgAbgAc8YIr2iigDxex0Gdfiuvh+4PmWMep3Pit94CiUOsaQlSpLbklMgIO0ED
POQKkt/FGieCdZ8b2HjUO95f3j3cRa2aYXto6YjhViMEKAyYbCAkgHGceyUUAeH/
AAt0i6sPHvh231xPMv7bwp5q+cCXg3XbbV+YZVljfYR25XpVOeCVvC3iq88p7jT9
P8by3uo2qKXNxaoyb02dGAyGIbC4UknivfKKAPG5vFGieKvjD4HutAD3CRLexS3p
tmjWQ+QSIwzAFiuSxGMDzB6mq/ijxj4H1zTNSs/iDo76V4hgV7d7fyPNuU2/Mhhn
C4wcgjJCkk5ypyfbKKAPE9cm1ez+GHgHUPFwuhc2GtWtzfSyoWeKFXk2tJtBOdpj
Bz82Tg/Max9O1nTLZ/Femazq2v2Meu3k19ZWdjZxyDUra6X935ZaJm3sPlwSoBIH
DBsfQlFAHh76ro3hT4leHrrU7a+h0228KQxRyXNsXls/3hVWlCglGx+7JA+8+OhN
ZfieZdU8AfEvX9MDx+H9SvLT7EjI0YkeOSNZplTGMO2Pm6kqdwBGK9k/4Rz/AIr/
AP4Sb7V/zDP7O+zeX/018zfuz+GMfjXQUAcfoHw18J+H9Wg1PSNJ+z30G7y5PtMz
7dylTwzkHgkdK8X1S7k1v4RapFNqs8WqWt07t4b0+yS3is1SXLCSNU3+WoLOXZgo
baDlxz9MUUAeB+Nta09PEGtT+Hte1HT9Q1uzt5RaXGkLdwawrQYgSEFSVByUbcOW
YjHykV0Hi+/Xw7rfwx1fxDbpplpZwXMV59nhZobWV7ZVEahN2BkMABnhT2BNeuUU
Aef+M/8AkrPw5/7iP/oha6D4h/8AIgeJv+wZc/8Aopq6CigDyPxjBLcfs126QRPK
40mwcqiliFUxMx47AAknsATVj4X6lpfiH4leO9a0p0uYJFsUhuTEVbb5RDgbgGAL
RjI77R6Cu48IeHovC+mS6bZTvJp6zvJaQuBm3jbDGPd1YBy5BPOGAJOMncoA+e7O
C6/4UJ4M1C2iuni0rVv7QuXtFVpYoUmn3SKrcEjIPII7ngGuo0R9P8VaxrN94Z1n
X9S1STRZtPh1a5gW3tYWLArGHSJGEgZlfgH5STzjj1yigD5/m8Q6TrPw40LwVocU
9t4vSW2t47c2jxvY3MbgyzswHyY2yMWXLDeSQPmx0nhHTGv/AAx8VYbG3R9QvNW1
O2QjarSHZhFLHHGXOMnA3H1NeuUUAeD+FdS0fWbTwlo95qPim81bSrq1L6THZRKL
GWE+XvlYRAiJTwcuWAYZ5zjL+LWpWum6n8S9PvneG71ZdLexRomxOse3eVbGMDBG
SeoI6ivoyigDyvUNe07wV8VNcv8AxbM8Vvqlnb/2bdmF5ViSPIlhBAJUlyHKrkcg
kgkVjr4isW8WeGpLFk8FeH7zSZZIbl9NghlmPmsfJ8x1ZETgSjHB3ju649sooA+b
9KaO1ittKMl891b+Pra4P26N0naGVT5Ukm5QdzhGJyAe5AyK9Q/5r7/3LP8A7dV6
BWH4f8PRaTqes6k873OoarOJJ5mAUCNMrFGqjjCJxnqxySegABuUUUUAFFFFABRR
RQAUUUUAJAy3DTLbsJWhfy5Qh3FG2htrY6HaynB7EHvU3kS/88pP++TWf4E/5CXi
7/sLJ/6RWtdbQBheRL/zyk/75NHkS/8APKT/AL5NbtFAGF5Ev/PKT/vk0eRL/wA8
pP8Avk1u0UAYXkS/88pP++TR5Ev/ADyk/wC+TW7RQBheRL/zyk/75NHkS/8APKT/
AL5NbtFAGF5Ev/PKT/vk0eRL/wA8pP8Avk1u0UAYXkS/88pP++TR5Ev/ADyk/wC+
TW7RQBheRL/zyk/75NHkS/8APKT/AL5NbtFAHO25+0xl7f8AeoHaMtH8wDKxVlyO
4YEEdiCKl8iX/nlJ/wB8moPh/wD8gK6/7C2p/wDpdPXSUAYXkS/88pP++TR5Ev8A
zyk/75NbtFAGF5Ev/PKT/vk0eRL/AM8pP++TW7RQBheRL/zyk/75NHkS/wDPKT/v
k1u0UAYXkS/88pP++TR5Ev8Azyk/75NbtFAGF5Ev/PKT/vk0eRL/AM8pP++TW7RQ
BheRL/zyk/75NHkS/wDPKT/vk1u0UAYXkS/88pP++TR5Ev8Azyk/75NbtFAHO25+
0xl7f96gdoy0fzAMrFWXI7hgQR2IIqXyJf8AnlJ/3yag+H//ACArr/sLan/6XT10
lAGF5Ev/ADyk/wC+TR5Ev/PKT/vk1u0UAYXkS/8APKT/AL5NHkS/88pP++TW7RQB
heRL/wA8pP8Avk0eRL/zyk/75NbtFAGF5Ev/ADyk/wC+TR5Ev/PKT/vk1u0UAYXk
S/8APKT/AL5NHkS/88pP++TW7RQBheRL/wA8pP8Avk0eRL/zyk/75NbtFAGF5Ev/
ADyk/wC+TR5Ev/PKT/vk1u0UAczbzxXNvFPbSpNBKoeOSNgyupGQQRwQR3qSuf8A
h5/yIHhn/sGW3/opa6CgAooooAKKKKAKngT/AJCXi7/sLJ/6RWtdbXJeBP8AkJeL
v+wsn/pFa11tABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBzfw//AOQFdf8A
YW1P/wBLp66Sub+H/wDyArr/ALC2p/8ApdPXSUAc54+toLzRLS1vIYp7afVtMjli
lQMkiNfQAqwPBBBIINQQ2nw+j8dXHhnVvAGg6bMdv2KefTbfZd59MJgZPC8nOCDt
b5aueM/+Qdp3/Ya0r/0vt663x34Q0/xjo5s74eXPHlre5VcvCx7+6nAyvf2IBG+H
dLmtWWj69vPz9DGuqvLeluunfy8iD/hXHgf/AKE3w3/4K4P/AImorvwD4Bs7Wa6v
PCfhaC2gRpJZZdNt1SNFGSzErgAAEkmsDwJ4v1DS9YHg/wAdHy9Wjwtnes2UvFPC
gserHHDfxdDhx82R8cb1FtfFttqWqX1lGPDhfSoYJGX7VMwuRcr5YBE4Eawb9yt5
StvBjzvoxGHlQlyy+T6Nd0FCvGtHmj811T7M7B/BXw6Tzt/hrwivkzJbS5sLYbJX
2bI2+Xhm8yPCnk71x1FTQ+AfAM8k8cHhPwtJJbuI5lTTbcmNyqsFYBeDtZWwezA9
xXP+MtK1WXxdcaXob2KDV0i1tVuS+37VYlfmYgEgNJ/ZilRwY458bXILVFukbwpo
mt6jfS2Gk+JNWfUtUvFuWtPLtJLeU2gkmQr5JCx2MRKsAzLt3PvJfA2Oru/APgGz
tZrq88J+FoLaBGklll023VI0UZLMSuAAASSaLnwD4BtYxJdeE/C0MbOkYaTTbdQX
dgqLkr1LMFA7kgd68vvZb7VPDPj6S71XUprCx8M3T2MJuWMM0TT6pHBMx6y5t44s
OSQ4Ku29gjLteOL1JPEt1BqGqX0Wox+I9HjsbBJG2S2PnWTF2hwV8vzzL+/wDvUR
78fuyAdN/wAI58LP7d/sT+xvBH9tf8+H2W1+0fd3/wCrxu+783Tpz0rQtvAPgG6j
Mlr4T8LTRq7xlo9Nt2AdGKuuQvUMpUjsQR2rmf7X02x1j+z9Mv7a5abWsT+FtQSJ
7qORrzLXUAB8xVDM15lxICgUr5S8jkILuLSbC3sbfUok0ddW11b19Q8T3OnpHdJe
qIEa6Xe4kMTO4hJAfLSEFhuoA9a/4Vx4H/6E3w3/AOCuD/4mua+JvgHwdZ/DbxZd
WfhPw/BcwaTdyRSxabCrxusLkMpC5BBAIIrmdf1jUrf7SNV8QalHr8XhKwubCCEy
20N3qp+14xGUTdK7qoFuwHmDIaJvLGz0v4sf8ks8Zf8AYFvf/RD0AV6KKKAOb+H/
APyArr/sLan/AOl09dJXN/D/AP5AV1/2FtT/APS6eukoAKKKKACiiigAooooAKKK
KACiiigAooooAKK5rx54nj8L6P8AaAiy3kzeXBEzYBOOWIzkqO+O5A4zmrnhC41W
58P2suvwLDfMvzAcFh2Zlx8rHuP5fdG7w81SVZ7N29TFV4Or7JbpXOW+Hn/IgeGf
+wZbf+ilroK5/wCHn/IgeGf+wZbf+ilroKwNgooooAKKKKAKngT/AJCXi7/sLJ/6
RWtdbXJeBP8AkJeLv+wsn/pFa11tABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQBzfw//AOQFdf8AYW1P/wBLp66Sub+H/wDyArr/ALC2p/8ApdPXSUAYPjP/AJB2
nf8AYa0r/wBL7evQodX0+bWLjSoruF9Rt41lltw3zqrdCR+X0yufvDPnvjP/AJB2
nf8AYa0r/wBL7eq/xL8B3cWojxZ4KL2+swMZpoIRzMe7oO7EZ3L0cE8ZyGxrznTj
zQV+/p5HZgaFHEVPZ1Z8t1o+l+l+yPStQ0jT9RurG5vrOGeexk863d1yY2xjI/Q/
UKeoBF6uL+Gnjy08ZacVcJb6vAoNxbA8EdPMTPVSfxUnB7Ep41tJNT1WKy0nUdSj
1zyQ8At7p4rfTlLN/pUyIQJckALFJuEhj2gKvnONIVlWgpRd10MK+FnhasqdWNpL
c7WivMNZursazrmqLfXyXOm+I9M0u2RLmRYFt5vsPmK0IPluT9pm+dlLDcMEbV2n
xG1PWU1q+s9EvYrGSF9AfzZFmk3CfUZomXYsqKAdqbsAF13Ix5UpRken0V51qHjf
U08b3WmWNnLPbWWoW2ny28ek3UxlEqQu0/2tP3MIjWfcUZSSIj8w8wbatl4x8Q3H
gvw3ql5caRZX2sWq3oitdMu9SdYzHGcLBEQ5BLlmkJCx7o48OWEhAPT6K8ag8Vaz
qOqDWDPFHpeoaf4auYtOBmBtzd3zK37xZFDEDfuOwBx5asNqMH0PEvj7XNJ0S/1y
KPTZLJptVsrS0aB/Mils4rthLJL5mJFY2bfIEQgSj5jsywB6LBpUEOv3urq8pubq
1gtHUkbAkTzMpAxnJM7557DpznF+LH/JLPGX/YFvf/RD1ny+IvEdo2u2M9pY3OqW
lraXyfY4pHSGK4lljZSmd85hELv8uxpuFVEbGYvGGoSap8DvFF3PLbSytot+rvbq
6KWWORTlHG6Nvl+aJsmNtyEsVyQC7RRRQBzfw/8A+QFdf9hbU/8A0unrpK5v4f8A
/ICuv+wtqf8A6XT10lABRRRQAUUUUAFFFFABRRRQAUUUUAFZ2v6xZ6Fpkl9qMmyF
OAByzt2VR3J/+ucAE0a/rFnoWmSX2oybIU4AHLO3ZVHcn/65wATXm3hi2vPiD4i/
tvWUi/saycpDaE7lLYB2479VZmP3uBjHC9uFwqqRdarpCO/n5Lz/ACOPEYnkkqVP
Wb/Dzfl+Zr+DdKn8Ra1L4s1+02b9v9nW7uWEaDo+D+BB4ySzYGVNeh0UVjiK7rz5
nolol2XY2oUVRjbdvVvuzz34ef8AIgeGf+wZbf8Aopa6Cuf+Hn/IgeGf+wZbf+il
roKwNgoorz/4teIL/Qra2Npqn9lQta3kwuPs6yebcRxhobfc4KJvJduRlvL2qQTQ
B6BRXL+Fte/tnxDr6WV/BqOkQfZzbzwR/JHIyHzIRIDtkxtR8jkebg9BjqKAKngT
/kJeLv8AsLJ/6RWtdbXJeBP+Ql4u/wCwsn/pFa11tABRRRQAUUUUAFFFFABRRRQA
UUUUAFFFFABRRRQBzfw//wCQFdf9hbU//S6eukrm/h//AMgK6/7C2p/+l09dJQBg
+M/+Qdp3/Ya0r/0vt69Qry/xn/yDtO/7DWlf+l9vXoVw81rOZSWkgbqP7tcWOxsc
FBVZxbjfVr7K7vrZdbbLUqMeZ2RyuofDnT5/HNj4lsbmbT54pPNuIrcYFw3rn+HP
Ifg7gT0JJOxrPhHStX1VtSuTqUN60KW7SWWqXVpvjRnZQwhkUNgyPgkZ+Y1vxusi
BkIKnoawNZ8Qzab4m0LSv7JuZbfVJmg+3+ZGsMTCCaXbt3eYWxD/AHQuGzuyNp6K
UaaXPT2lrps/M1rYmrWUVVd+VWXp2JrnwvpFzrI1Sa3lNzvSVkFxKsEkiY2SSQhv
LeRdqYdlLDYmCNi4NZ8L6RrLXjX9vK0l2ltHLJFcSwvi3laWHayMCpWR2YFSDzyT
gVlah4wntdZuok02KTSbLULbS7q5NyVnFxceT5flxbCrRj7TDljIpHz4U7RuPGHj
i28M3E0U9tLdNG+noY7aOaWQC6uHi3FUiYAARsVwSXYbMKWTfqYGrc+F9IudZGqT
W8pud6SsguJVgkkTGySSEN5byLtTDspYbEwRsXEM/g/RpdK0zT1gube30yEW1o9p
ez280UQVV8vzY3WQqQiZUsQSik5Kgia58UaRbayNLmuJRc70iZxbytBHI+NkckwX
y0kbcmEZgx3pgHeuc+2+IHhy70q11Gwu7m+tbvJt/sdhcXDyqFUsyxohYqu9VZgM
I52MQ/y0ASx+BvD8dxHNHZSoY0gjSNbqYRqkNx9ohUR79oEchJUY+VfkGE+Wi98D
eH72S+a6spZY7xJklgN1N5C+crLK8cW/ZHIweTMiKrHzH5+ds58nxB08+IbnTLZP
Niih06eO9Ky/Z51u7jyl2SLGyt1QqQSHLMMqI3ZdC98c+H7KS+W6vZYo7NJnlnNr
N5DeSrNKkcuzZJIoSTMaMzDy34+RsAGhqHh7S9QmvZru13y3kMNvM4kZW2wu7xFS
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
igAooooAKKKKACiiigD/2Q==

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=sf-graph2.jpg
Content-Type: image/jpeg; name=sf-graph2.jpg
Content-Location: http://www.ode.org/pix/sf-graph2.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBIQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEw
YSAgUmV2OiAxMi8yOS85NCAgUXVhbGl0eSA9IDgwLCBTbW9vdGhpbmcgPSAwCv/b
AEMABgQFBgUEBgYFBgcHBggKEAoKCQkKFA4PDBAXFBgYFxQWFhodJR8aGyMcFhYg
LCAjJicpKikZHy0wLSgwJSgpKP/bAEMBBwcHCggKEwoKEygaFhooKCgoKCgoKCgo
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKP/AABEIAR4B
rwMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1
EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR
8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdo
aWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPE
xcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEB
AQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQF
ITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SV
lpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo
6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/APVaKKKACiiigAork/FXjmy8PaxBpQ03
WNU1CWA3Jg0y185o4t20M3I4JyOM9OcZGfM/DPie+udd03XBq19c6FN4rvdOWLzp
P3iTxJ9mGxsDy1IJwfu54Gc0Ae8UV5f/AMJLf/8AC4t+f+KY/wCQD5v29fJ+27PP
z5ef9Z/yy6deM5+WpNJ8VLYX3xD8Tapd3R0GxvI7GG2Zmdo5YVCSbEztUO7rg5Ge
rbaAPTKK4fTviTpt1/aqXOl63pt1p1i+pPbX9p5UksC53Mg3YPIxyRknjocc/wCJ
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
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAH//Z

------------EFBe3geZg9eFblqpdVA4hm
Content-Disposition: inline; filename=rollingcontact.jpg
Content-Type: image/jpeg; name=rollingcontact.jpg
Content-Location: http://www.ode.org/pix/rollingcontact.jpg
Content-Transfer-Encoding: Base64

/9j/4AAQSkZJRgABAQAAAQABAAD//gBIQ1JFQVRPUjogWFYgVmVyc2lvbiAzLjEw
YSAgUmV2OiAxMi8yOS85NCAgUXVhbGl0eSA9IDgwLCBTbW9vdGhpbmcgPSAwCv/b
AEMABgQFBgUEBgYFBgcHBggKEAoKCQkKFA4PDBAXFBgYFxQWFhodJR8aGyMcFhYg
LCAjJicpKikZHy0wLSgwJSgpKP/AAAsIAPcBQAEBEQD/xAAfAAABBQEBAQEBAQAA
AAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiEx
QQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpD
REVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJma
oqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy
8/T19vf4+fr/2gAIAQEAAD8A+qaKKKK4L4qfFPQvhoumf27BqFw+oGQQpZxI5+Tb
uJ3MoH317967uJi8aMyNGzAEo2Mr7HBI/I06iiiiiiiiiiiiiiiiiiiiiiiiiiii
iiiiiiiiivlX4p/8Vp+1h4Y8Pjm30vyPNX12g3L88HlNo4J6ZHPFfVVFFFFFFFFF
FYnjSbXrfwzfTeEoLK41qNN1vDebvLkIPKnBByRnHIGcZrwnwj8VPGt5crqvjKdN
F0WG5ENz9j0U3MEJXh45n84ywNnj5kIGQehGfoTR9W07WrFL3R761v7NzhZraVZE
J7jIJGau0UUUUUUUUUUUUUUUUUUUUUUUV8q/s1/8VF8ePHniR/njXz/LLfMV82f5
cEccIhFfVVFFFFFFFFFFFZlvoOmW2t3ur29okeoXsSRXMqkjzlXO3cudpIyRnGcc
ZxXK618M9Nkv5NV8K3Vx4W1xvvXWmgLHMewmgPySD6gH3qiPGviDwg6xfEbTIm03
O0a/pSs9uPQzQ8vF7sNy5PYV6Hp97a6jZQ3lhcRXNrMoeOaJwyOPUEcGrFFFFFFF
FFFFFFFFFFFFFFFZXi3UxovhbWNUYqBZWc1xlwSPkQtyByRx2rwD9iHTDD4V8S6o
Q2Lq8jtwcjB8pC3A65/e/wAvevpSiiiiiiiiiiiiiggMCGAIPBBrzm/8AXmg3cup
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
oooooooooooooooooooooooooooooooooor/2Q==

------------EFBe3geZg9eFblqpdVA4hm--
